package tool;

import java.util.Set;
import beaver.*;
import java.util.ArrayList;

/**
 * This class is a LALR parser generated by
 * <a href="http://beaver.sourceforge.net">Beaver</a> v0.9.6.1
 * from the grammar specification "Parser.grammar".
 */
public class Parser extends beaver.Parser {
	static public class Terminals {
		static public final short EOF = 0;
		static public final short PLUS = 1;
		static public final short MINUS = 2;
		static public final short ID = 3;
		static public final short LPAREN = 4;
		static public final short PREFIX = 5;
		static public final short POSTFIX = 6;
		static public final short NUM = 7;
		static public final short BANG = 8;
		static public final short TILDE = 9;
		static public final short STAR = 10;
		static public final short DIV = 11;
		static public final short MOD = 12;
		static public final short SHL = 13;
		static public final short SHR = 14;
		static public final short LT = 15;
		static public final short LE = 16;
		static public final short GE = 17;
		static public final short GT = 18;
		static public final short SEMICOLON = 19;
		static public final short EQ = 20;
		static public final short NEQ = 21;
		static public final short ASG = 22;
		static public final short AMP = 23;
		static public final short CARET = 24;
		static public final short PIPE = 25;
		static public final short AND = 26;
		static public final short VOID = 27;
		static public final short OR = 28;
		static public final short INT = 29;
		static public final short CHAR = 30;
		static public final short WHILE = 31;
		static public final short IF = 32;
		static public final short MODE = 33;
		static public final short LBRACE = 34;
		static public final short FENCE = 35;
		static public final short LPRED = 36;
		static public final short RPAREN = 37;
		static public final short RBRACE = 38;
		static public final short COLON = 39;
		static public final short REG_ID = 40;
		static public final short COMMA = 41;
		static public final short INVARIANT = 42;
		static public final short ELSE = 43;
		static public final short NORW = 44;
		static public final short NOW = 45;
		static public final short RW = 46;

		static public final String[] NAMES = {
			"EOF",
			"PLUS",
			"MINUS",
			"ID",
			"LPAREN",
			"PREFIX",
			"POSTFIX",
			"NUM",
			"BANG",
			"TILDE",
			"STAR",
			"DIV",
			"MOD",
			"SHL",
			"SHR",
			"LT",
			"LE",
			"GE",
			"GT",
			"SEMICOLON",
			"EQ",
			"NEQ",
			"ASG",
			"AMP",
			"CARET",
			"PIPE",
			"AND",
			"VOID",
			"OR",
			"INT",
			"CHAR",
			"WHILE",
			"IF",
			"MODE",
			"LBRACE",
			"FENCE",
			"LPRED",
			"RPAREN",
			"RBRACE",
			"COLON",
			"REG_ID",
			"COMMA",
			"INVARIANT",
			"ELSE",
			"NORW",
			"NOW",
			"RW"
		};
	}

	static final ParsingTables PARSING_TABLES = new ParsingTables(
		"U9pjM6Tq5KKK$ZOl8H2Cb4W0eyPe4aAHbn08fD1440AAIX5GmOuAIXL4G12mGXGfWYYA3Sx" +
		"nA451H46nW5rK445Hm8eKaIAY1Xc$dNVVldsRYMpEyMUMyyqtS$T#zzwPsNsp0OXjXYJKmr" +
		"MuJlsZoZ0Pqp41YQY5EgYFXaZ1wKX56cRYR6GW1utG64rn3geXg7Nte0InU00F8WuT3RhpF" +
		"Be4qJ4VkgAdpdU7GNU9HzSbebF7K4FhxZVehexMgLBHrMIT9#awut6oGJV4a#yHLvspyJZw" +
		"Cz$31jreZwwsIrSNrJ6NkdCDkbCykcINhXVwO25rumsw1XxTgQ8BUORQQGPTNu$kPj7rm0M" +
		"u4ETZ64RW8eFkD8$k3D6Le5YlPWAknva6tLaUNRheYZ4Ojr1r8qOYqw3BykYQKDSQ#MY5zi" +
		"X5I#IX46qDbabenjZDCOknxRfAaAtvJjo6Ip40r#ZiBUZJ1lVIvrQCDMGlqDcBdEn#ClV3e" +
		"tnQsg43vg4J8vTWlfEviyuSNYlRqarRkkDYzPqXLZ5wutAr0zSQxYNW1jp4M0bEh4awrb0K" +
		"gvqOZb5HUSReU$vMRXnknqHCmLJSXRiPPOuJvJwfVuPZMU0xxcE8lag8S1GuEn9zbTyHw1s" +
		"1x4Xb5PNpz#$jnzEFZvzrhB9KMK8M#somhojvDeIkXvodR21n1IwBUieYJs2u5xbdyWfTrL" +
		"ptdj2MEEqJO2$6xgdddKYHcELh6mIB$a7#3jkNFOjM$EsgoLCuaITmBPwKTNX21daIrkFfL" +
		"vydMqEUPjaySMnT8T#HFBubPt0LCWow98ykNNHslXp#pbUKpwiBk7IWihAwHgmpgElC8fzO" +
		"b#tAby4zjlCL#D05NJhx9BLroJxMCsXO5zDwLgGBUOPQaowsWdLfnjEpEUkqSrQcpXJ#Ajg" +
		"hcLx1UbQaitzlawXArbzI$dK1pY2EptmylzLg62n9z4mZKXZRhYkyswdywidGNpcXrRLz6j" +
		"F7dcz5sODETd#PC$HUst63Z9p2foMSEKTd3g#LRMcXBOtecMc8bSRxcVoNPBXdrnoPdnqhI" +
		"SVAeIgJkg0XZx$wOwbjgjic#Zr9Sg84fVw89U0$hegwa4985FOaYiUdt8xGnXrX6zgHoYeg" +
		"v#$Rsu#dNvyJhcELfSeIil1iqCyHpmPvejg4dpAq9TgZGzHJvZo1ZbVadi5BVBDTz$Aq9L$" +
		"NKiHUEzth68xaYccg3LWqEVID4Qk$Je1#zbXiFOa5H5qPTmUiVkGT$7n92zbYrWYl5zx0PY" +
		"jv2taRUIT3roRl9lFhAEOG4FYMN4RUIp1lu02HI1mdadblFZcL$1mvYpoLd4CUIYuWzoPt8" +
		"XUIUx2caUG#p5SMhZqoXy10uS72muN72K#nLqBwzlTM2kDDaVdk9$xcU6PeRCrYiz6GOmwR" +
		"rhpF#LdFHEoMlLupNEEvn9FIVufOxLhhNc9VAUEZxASJfP9Z8PjX72yNF$wTPN4DhBMkEXQ" +
		"puHmiheMrpfNt6E#LihE4$Gy8xesrBteEbgBFAdRUOP$xPd6F0s#H#Gm4FYJN5x$ZvUTlvK" +
		"hDGzW$uhAFPoDh6vCatC2hbzgtsCojs5F#7h9S$Sx2tOJ72ayKdYuyMtY9iAmZTWZl4ZueN" +
		"2Or1uGJXSFpJXLkAPmdN2JSnJmlgwjmN#7#mgE4HxjynmXFYDZuviAQPehjqeNdF8$zEIxj" +
		"069GP1nuDbeNEFnVSINsqyABXPUwud$EyJANxmhXRiGgJnpztd1$DuNdPSYrsJscxm#m$oy" +
		"1rlOJrUcgQRmdvWZF$Na6pIB8fOwhNPeFgoEQbnFl4UyIwubr1DyGzJR1jqEzIQmbtY1U9z" +
		"OGgudNY5S9lb7g5M8byRBwL6rGdwYFsV#8u5kb#3QgztMc5Rezf7wNIWxgzYNrebgcVdFgE" +
		"w3sQ$vLxT6yNRVVgn$PybTLVQF7NwbjchUghqMtHMrsOdofld3wcuYDwcVr4poN#aDnTzLd" +
		"gbGjLI#eeteleFQftPh$9FZBgFQgNzHVF4du#uKYdZn5F7lQSMIVGXs9rXmNa0juJXQI2yd" +
		"vF6loUMBcwtwS8DvbZnEExkTHtqfWdwfjDM9ufeAmq878PSnSsaA89Qg9BKuGxxA7nzMrVv" +
		"3wQCHu4FXVaKEqS26RESDe#IzHwoRV");

    Set<Variable> variables;

	private final Action[] actions;

	public Parser() {
		super(PARSING_TABLES);
		actions = new Action[] {
			new Action() {	// [0] lst$global1 = global1
				public Symbol reduce(Symbol[] _symbols, int offset) {
					ArrayList lst = new ArrayList(); lst.add(_symbols[offset + 1].value); return new Symbol(lst);
				}
			},
			new Action() {	// [1] lst$global1 = lst$global1 global1
				public Symbol reduce(Symbol[] _symbols, int offset) {
					((ArrayList) _symbols[offset + 1].value).add(_symbols[offset + 2].value); return _symbols[offset + 1];
				}
			},
			Action.NONE,  	// [2] opt$lst$global1 = 
			Action.RETURN,	// [3] opt$lst$global1 = lst$global1
			Action.RETURN,	// [4] unit = opt$lst$global1
			new Action() {	// [5] param = type.t ID.n
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_t = _symbols[offset + 1];
					final Type t = (Type) _symbol_t.value;
					final Symbol _symbol_n = _symbols[offset + 2];
					final String n = (String) _symbol_n.value;
					 return new Param(t, n);
				}
			},
			new Action() {	// [6] params = param
				public Symbol reduce(Symbol[] _symbols, int offset) {
					ArrayList lst = new ArrayList(); lst.add(_symbols[offset + 1].value); return new Symbol(lst);
				}
			},
			new Action() {	// [7] params = params COMMA param
				public Symbol reduce(Symbol[] _symbols, int offset) {
					((ArrayList) _symbols[offset + 1].value).add(_symbols[offset + 3].value); return _symbols[offset + 1];
				}
			},
			new Action() {	// [8] exprs = expr
				public Symbol reduce(Symbol[] _symbols, int offset) {
					ArrayList lst = new ArrayList(); lst.add(_symbols[offset + 1].value); return new Symbol(lst);
				}
			},
			new Action() {	// [9] exprs = exprs COMMA expr
				public Symbol reduce(Symbol[] _symbols, int offset) {
					((ArrayList) _symbols[offset + 1].value).add(_symbols[offset + 3].value); return _symbols[offset + 1];
				}
			},
			new Action() {	// [10] global = type.t REG_ID.n SEMICOLON lpred.l
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_t = _symbols[offset + 1];
					final Type t = (Type) _symbol_t.value;
					final Symbol _symbol_n = _symbols[offset + 2];
					final String n = (String) _symbol_n.value;
					final Symbol _symbol_l = _symbols[offset + 4];
					final Expression l = (Expression) _symbol_l.value;
					 variables.add(new Variable(n, l));
                                                            return new VarDef(t, n);
				}
			},
			new Action() {	// [11] global = type.t REG_ID.n ASG expr.e SEMICOLON lpred.l
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_t = _symbols[offset + 1];
					final Type t = (Type) _symbol_t.value;
					final Symbol _symbol_n = _symbols[offset + 2];
					final String n = (String) _symbol_n.value;
					final Symbol _symbol_e = _symbols[offset + 4];
					final Expression e = (Expression) _symbol_e.value;
					final Symbol _symbol_l = _symbols[offset + 6];
					final Expression l = (Expression) _symbol_l.value;
					 variables.add(new Variable(n, l));
                                                            return new VarDef(t, n, e);
				}
			},
			new Action() {	// [12] global = type.t REG_ID.n SEMICOLON
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_t = _symbols[offset + 1];
					final Type t = (Type) _symbol_t.value;
					final Symbol _symbol_n = _symbols[offset + 2];
					final String n = (String) _symbol_n.value;
					 variables.add(new Variable(n));
                                                            return new VarDef(t, n);
				}
			},
			new Action() {	// [13] global = type.t REG_ID.n ASG expr.e SEMICOLON
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_t = _symbols[offset + 1];
					final Type t = (Type) _symbol_t.value;
					final Symbol _symbol_n = _symbols[offset + 2];
					final String n = (String) _symbol_n.value;
					final Symbol _symbol_e = _symbols[offset + 4];
					final Expression e = (Expression) _symbol_e.value;
					 variables.add(new Variable(n));
                                                            return new VarDef(t, n, e);
				}
			},
			new Action() {	// [14] global = type.t ID.n SEMICOLON lpred.l mode.m
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_t = _symbols[offset + 1];
					final Type t = (Type) _symbol_t.value;
					final Symbol _symbol_n = _symbols[offset + 2];
					final String n = (String) _symbol_n.value;
					final Symbol _symbol_l = _symbols[offset + 4];
					final Expression l = (Expression) _symbol_l.value;
					final Symbol _symbol_m = _symbols[offset + 5];
					final Mode m = (Mode) _symbol_m.value;
					  variables.add(new Variable(n, l, m));
                                                            return new VarDef(t, n);
				}
			},
			new Action() {	// [15] global = type.t ID.n ASG expr.e SEMICOLON lpred.l mode.m
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_t = _symbols[offset + 1];
					final Type t = (Type) _symbol_t.value;
					final Symbol _symbol_n = _symbols[offset + 2];
					final String n = (String) _symbol_n.value;
					final Symbol _symbol_e = _symbols[offset + 4];
					final Expression e = (Expression) _symbol_e.value;
					final Symbol _symbol_l = _symbols[offset + 6];
					final Expression l = (Expression) _symbol_l.value;
					final Symbol _symbol_m = _symbols[offset + 7];
					final Mode m = (Mode) _symbol_m.value;
					 variables.add(new Variable(n, l, m));
                                                            return new VarDef(t, n, e);
				}
			},
			new Action() {	// [16] global = type.t ID.n SEMICOLON mode.m
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_t = _symbols[offset + 1];
					final Type t = (Type) _symbol_t.value;
					final Symbol _symbol_n = _symbols[offset + 2];
					final String n = (String) _symbol_n.value;
					final Symbol _symbol_m = _symbols[offset + 4];
					final Mode m = (Mode) _symbol_m.value;
					 variables.add(new Variable(n, m));
                                                            return new VarDef(t, n);
				}
			},
			new Action() {	// [17] global = type.t ID.n ASG expr.e SEMICOLON mode.m
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_t = _symbols[offset + 1];
					final Type t = (Type) _symbol_t.value;
					final Symbol _symbol_n = _symbols[offset + 2];
					final String n = (String) _symbol_n.value;
					final Symbol _symbol_e = _symbols[offset + 4];
					final Expression e = (Expression) _symbol_e.value;
					final Symbol _symbol_m = _symbols[offset + 6];
					final Mode m = (Mode) _symbol_m.value;
					 variables.add(new Variable(n, m));
                                                            return new VarDef(t, n, e);
				}
			},
			new Action() {	// [18] global = type.t ID.n LPAREN RPAREN SEMICOLON
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_t = _symbols[offset + 1];
					final Type t = (Type) _symbol_t.value;
					final Symbol _symbol_n = _symbols[offset + 2];
					final String n = (String) _symbol_n.value;
					 return new FunDef(t, n);
				}
			},
			new Action() {	// [19] global = type.t ID.n LPAREN VOID RPAREN SEMICOLON
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_t = _symbols[offset + 1];
					final Type t = (Type) _symbol_t.value;
					final Symbol _symbol_n = _symbols[offset + 2];
					final String n = (String) _symbol_n.value;
					 return new FunDef(t, n);
				}
			},
			new Action() {	// [20] global = type.t ID.n LPAREN params.xs RPAREN SEMICOLON
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_t = _symbols[offset + 1];
					final Type t = (Type) _symbol_t.value;
					final Symbol _symbol_n = _symbols[offset + 2];
					final String n = (String) _symbol_n.value;
					final Symbol _symbol_xs = _symbols[offset + 4];
					final ArrayList _list_xs = (ArrayList) _symbol_xs.value;
					final Param[] xs = _list_xs == null ? new Param[0] : (Param[]) _list_xs.toArray(new Param[_list_xs.size()]);
					 return new FunDef(t, n, xs);
				}
			},
			new Action() {	// [21] global = type.t ID.n LPAREN RPAREN local1.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_t = _symbols[offset + 1];
					final Type t = (Type) _symbol_t.value;
					final Symbol _symbol_n = _symbols[offset + 2];
					final String n = (String) _symbol_n.value;
					final Symbol _symbol_b = _symbols[offset + 5];
					final Statement b = (Statement) _symbol_b.value;
					 return new FunDef(t, n, b);
				}
			},
			new Action() {	// [22] global = type.t ID.n LPAREN VOID RPAREN local1.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_t = _symbols[offset + 1];
					final Type t = (Type) _symbol_t.value;
					final Symbol _symbol_n = _symbols[offset + 2];
					final String n = (String) _symbol_n.value;
					final Symbol _symbol_b = _symbols[offset + 6];
					final Statement b = (Statement) _symbol_b.value;
					 return new FunDef(t, n, b);
				}
			},
			new Action() {	// [23] global = type.t ID.n LPAREN params.xs RPAREN local1.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_t = _symbols[offset + 1];
					final Type t = (Type) _symbol_t.value;
					final Symbol _symbol_n = _symbols[offset + 2];
					final String n = (String) _symbol_n.value;
					final Symbol _symbol_xs = _symbols[offset + 4];
					final ArrayList _list_xs = (ArrayList) _symbol_xs.value;
					final Param[] xs = _list_xs == null ? new Param[0] : (Param[]) _list_xs.toArray(new Param[_list_xs.size()]);
					final Symbol _symbol_b = _symbols[offset + 6];
					final Statement b = (Statement) _symbol_b.value;
					 return new FunDef(t, n, xs, b);
				}
			},
			Action.RETURN,	// [24] global1 = global
			new Action() {	// [25] local = SEMICOLON
				public Symbol reduce(Symbol[] _symbols, int offset) {
					 return Block.empty();
				}
			},
			Action.RETURN,	// [26] local = local1
			Action.RETURN,	// [27] local2 = local1
			new Action() {	// [28] lst$local2 = local2
				public Symbol reduce(Symbol[] _symbols, int offset) {
					ArrayList lst = new ArrayList(); lst.add(_symbols[offset + 1].value); return new Symbol(lst);
				}
			},
			new Action() {	// [29] lst$local2 = lst$local2 local2
				public Symbol reduce(Symbol[] _symbols, int offset) {
					((ArrayList) _symbols[offset + 1].value).add(_symbols[offset + 2].value); return _symbols[offset + 1];
				}
			},
			Action.NONE,  	// [30] opt$lst$local2 = 
			Action.RETURN,	// [31] opt$lst$local2 = lst$local2
			Action.RETURN,	// [32] locals2 = opt$lst$local2
			new Action() {	// [33] local1 = LBRACE locals2.ss RBRACE
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_ss = _symbols[offset + 2];
					final ArrayList _list_ss = (ArrayList) _symbol_ss.value;
					final Statement[] ss = _list_ss == null ? new Statement[0] : (Statement[]) _list_ss.toArray(new Statement[_list_ss.size()]);
					 return new Block(ss);
				}
			},
			new Action() {	// [34] local1 = expr.a SEMICOLON
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_a = _symbols[offset + 1];
					final Expression a = (Expression) _symbol_a.value;
					 return new Atomic(a);
				}
			},
			new Action() {	// [35] local1 = FENCE SEMICOLON
				public Symbol reduce(Symbol[] _symbols, int offset) {
					 return Fence.self();
				}
			},
			new Action() {	// [36] local1 = type.t REG_ID.n SEMICOLON lpred.l
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_t = _symbols[offset + 1];
					final Type t = (Type) _symbol_t.value;
					final Symbol _symbol_n = _symbols[offset + 2];
					final String n = (String) _symbol_n.value;
					final Symbol _symbol_l = _symbols[offset + 4];
					final Expression l = (Expression) _symbol_l.value;
					 variables.add(new Variable(n, l));
                                                            return new VarDef(t, n);
				}
			},
			new Action() {	// [37] local1 = type.t REG_ID.n ASG expr.e SEMICOLON lpred.l
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_t = _symbols[offset + 1];
					final Type t = (Type) _symbol_t.value;
					final Symbol _symbol_n = _symbols[offset + 2];
					final String n = (String) _symbol_n.value;
					final Symbol _symbol_e = _symbols[offset + 4];
					final Expression e = (Expression) _symbol_e.value;
					final Symbol _symbol_l = _symbols[offset + 6];
					final Expression l = (Expression) _symbol_l.value;
					 variables.add(new Variable(n, l));
                                                            return new VarDef(t, n, e);
				}
			},
			new Action() {	// [38] local1 = type.t REG_ID.n SEMICOLON
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_t = _symbols[offset + 1];
					final Type t = (Type) _symbol_t.value;
					final Symbol _symbol_n = _symbols[offset + 2];
					final String n = (String) _symbol_n.value;
					 variables.add(new Variable(n));
                                                            return new VarDef(t, n);
				}
			},
			new Action() {	// [39] local1 = type.t REG_ID.n ASG expr.e SEMICOLON
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_t = _symbols[offset + 1];
					final Type t = (Type) _symbol_t.value;
					final Symbol _symbol_n = _symbols[offset + 2];
					final String n = (String) _symbol_n.value;
					final Symbol _symbol_e = _symbols[offset + 4];
					final Expression e = (Expression) _symbol_e.value;
					 variables.add(new Variable(n));
                                                            return new VarDef(t, n, e);
				}
			},
			new Action() {	// [40] local1 = type.t ID.n SEMICOLON lpred.l mode.m
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_t = _symbols[offset + 1];
					final Type t = (Type) _symbol_t.value;
					final Symbol _symbol_n = _symbols[offset + 2];
					final String n = (String) _symbol_n.value;
					final Symbol _symbol_l = _symbols[offset + 4];
					final Expression l = (Expression) _symbol_l.value;
					final Symbol _symbol_m = _symbols[offset + 5];
					final Mode m = (Mode) _symbol_m.value;
					  variables.add(new Variable(n, l, m));
                                                            return new VarDef(t, n);
				}
			},
			new Action() {	// [41] local1 = type.t ID.n ASG expr.e SEMICOLON lpred.l mode.m
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_t = _symbols[offset + 1];
					final Type t = (Type) _symbol_t.value;
					final Symbol _symbol_n = _symbols[offset + 2];
					final String n = (String) _symbol_n.value;
					final Symbol _symbol_e = _symbols[offset + 4];
					final Expression e = (Expression) _symbol_e.value;
					final Symbol _symbol_l = _symbols[offset + 6];
					final Expression l = (Expression) _symbol_l.value;
					final Symbol _symbol_m = _symbols[offset + 7];
					final Mode m = (Mode) _symbol_m.value;
					 variables.add(new Variable(n, l, m));
                                                            return new VarDef(t, n, e);
				}
			},
			new Action() {	// [42] local1 = type.t ID.n SEMICOLON mode.m
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_t = _symbols[offset + 1];
					final Type t = (Type) _symbol_t.value;
					final Symbol _symbol_n = _symbols[offset + 2];
					final String n = (String) _symbol_n.value;
					final Symbol _symbol_m = _symbols[offset + 4];
					final Mode m = (Mode) _symbol_m.value;
					 variables.add(new Variable(n, m));
                                                            return new VarDef(t, n);
				}
			},
			new Action() {	// [43] local1 = type.t ID.n ASG expr.e SEMICOLON mode.m
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_t = _symbols[offset + 1];
					final Type t = (Type) _symbol_t.value;
					final Symbol _symbol_n = _symbols[offset + 2];
					final String n = (String) _symbol_n.value;
					final Symbol _symbol_e = _symbols[offset + 4];
					final Expression e = (Expression) _symbol_e.value;
					final Symbol _symbol_m = _symbols[offset + 6];
					final Mode m = (Mode) _symbol_m.value;
					 variables.add(new Variable(n, m));
                                                            return new VarDef(t, n, e);
				}
			},
			new Action() {	// [44] local1 = IF LPAREN expr.a RPAREN local.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_a = _symbols[offset + 3];
					final Expression a = (Expression) _symbol_a.value;
					final Symbol _symbol_b = _symbols[offset + 5];
					final Statement b = (Statement) _symbol_b.value;
					 return new If(a, b);
				}
			},
			new Action() {	// [45] local1 = IF LPAREN expr.a RPAREN local.b ELSE local.c
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_a = _symbols[offset + 3];
					final Expression a = (Expression) _symbol_a.value;
					final Symbol _symbol_b = _symbols[offset + 5];
					final Statement b = (Statement) _symbol_b.value;
					final Symbol _symbol_c = _symbols[offset + 7];
					final Statement c = (Statement) _symbol_c.value;
					 return new If(a, b, c);
				}
			},
			new Action() {	// [46] local1 = WHILE LPAREN expr.a RPAREN INVARIANT COLON exprs.i local.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_a = _symbols[offset + 3];
					final Expression a = (Expression) _symbol_a.value;
					final Symbol _symbol_i = _symbols[offset + 7];
					final ArrayList _list_i = (ArrayList) _symbol_i.value;
					final Expression[] i = _list_i == null ? new Expression[0] : (Expression[]) _list_i.toArray(new Expression[_list_i.size()]);
					final Symbol _symbol_b = _symbols[offset + 8];
					final Statement b = (Statement) _symbol_b.value;
					 return new While(a, i, b);
				}
			},
			new Action() {	// [47] local1 = error SEMICOLON
				public Symbol reduce(Symbol[] _symbols, int offset) {
					 return Malformed.self();
				}
			},
			Action.RETURN,	// [48] expr = PREFIX
			Action.RETURN,	// [49] expr = POSTFIX
			new Action() {	// [50] expr = ID.n
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_n = _symbols[offset + 1];
					final String n = (String) _symbol_n.value;
					 return new Id(n);
				}
			},
			new Action() {	// [51] expr = NUM.n
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_n = _symbols[offset + 1];
					final Integer n = (Integer) _symbol_n.value;
					 return new Lit(n);
				}
			},
			new Action() {	// [52] expr = PLUS expr.a
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_a = _symbols[offset + 2];
					final Expression a = (Expression) _symbol_a.value;
					 return new PreOp("+", a);
				}
			},
			new Action() {	// [53] expr = MINUS expr.a
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_a = _symbols[offset + 2];
					final Expression a = (Expression) _symbol_a.value;
					 return new PreOp("-", a);
				}
			},
			new Action() {	// [54] expr = BANG expr.a
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_a = _symbols[offset + 2];
					final Expression a = (Expression) _symbol_a.value;
					 return new PreOp("!", a);
				}
			},
			new Action() {	// [55] expr = TILDE expr.a
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_a = _symbols[offset + 2];
					final Expression a = (Expression) _symbol_a.value;
					 return new PreOp("~", a);
				}
			},
			new Action() {	// [56] expr = expr.a STAR expr.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_a = _symbols[offset + 1];
					final Expression a = (Expression) _symbol_a.value;
					final Symbol _symbol_b = _symbols[offset + 3];
					final Expression b = (Expression) _symbol_b.value;
					 return new BinOp("*", a, b);
				}
			},
			new Action() {	// [57] expr = expr.a DIV expr.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_a = _symbols[offset + 1];
					final Expression a = (Expression) _symbol_a.value;
					final Symbol _symbol_b = _symbols[offset + 3];
					final Expression b = (Expression) _symbol_b.value;
					 return new BinOp("/", a, b);
				}
			},
			new Action() {	// [58] expr = expr.a MOD expr.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_a = _symbols[offset + 1];
					final Expression a = (Expression) _symbol_a.value;
					final Symbol _symbol_b = _symbols[offset + 3];
					final Expression b = (Expression) _symbol_b.value;
					 return new BinOp("%", a, b);
				}
			},
			new Action() {	// [59] expr = expr.a PLUS expr.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_a = _symbols[offset + 1];
					final Expression a = (Expression) _symbol_a.value;
					final Symbol _symbol_b = _symbols[offset + 3];
					final Expression b = (Expression) _symbol_b.value;
					 return new BinOp("+", a, b);
				}
			},
			new Action() {	// [60] expr = expr.a MINUS expr.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_a = _symbols[offset + 1];
					final Expression a = (Expression) _symbol_a.value;
					final Symbol _symbol_b = _symbols[offset + 3];
					final Expression b = (Expression) _symbol_b.value;
					 return new BinOp("-", a, b);
				}
			},
			new Action() {	// [61] expr = expr.a SHL expr.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_a = _symbols[offset + 1];
					final Expression a = (Expression) _symbol_a.value;
					final Symbol _symbol_b = _symbols[offset + 3];
					final Expression b = (Expression) _symbol_b.value;
					 return new BinOp("<<",a, b);
				}
			},
			new Action() {	// [62] expr = expr.a SHR expr.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_a = _symbols[offset + 1];
					final Expression a = (Expression) _symbol_a.value;
					final Symbol _symbol_b = _symbols[offset + 3];
					final Expression b = (Expression) _symbol_b.value;
					 return new BinOp(">>",a, b);
				}
			},
			new Action() {	// [63] expr = expr.a LT expr.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_a = _symbols[offset + 1];
					final Expression a = (Expression) _symbol_a.value;
					final Symbol _symbol_b = _symbols[offset + 3];
					final Expression b = (Expression) _symbol_b.value;
					 return new BinOp("<", a, b);
				}
			},
			new Action() {	// [64] expr = expr.a LE expr.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_a = _symbols[offset + 1];
					final Expression a = (Expression) _symbol_a.value;
					final Symbol _symbol_b = _symbols[offset + 3];
					final Expression b = (Expression) _symbol_b.value;
					 return new BinOp("<=",a, b);
				}
			},
			new Action() {	// [65] expr = expr.a GE expr.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_a = _symbols[offset + 1];
					final Expression a = (Expression) _symbol_a.value;
					final Symbol _symbol_b = _symbols[offset + 3];
					final Expression b = (Expression) _symbol_b.value;
					 return new BinOp(">=",a, b);
				}
			},
			new Action() {	// [66] expr = expr.a GT expr.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_a = _symbols[offset + 1];
					final Expression a = (Expression) _symbol_a.value;
					final Symbol _symbol_b = _symbols[offset + 3];
					final Expression b = (Expression) _symbol_b.value;
					 return new BinOp(">", a, b);
				}
			},
			new Action() {	// [67] expr = expr.a EQ expr.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_a = _symbols[offset + 1];
					final Expression a = (Expression) _symbol_a.value;
					final Symbol _symbol_b = _symbols[offset + 3];
					final Expression b = (Expression) _symbol_b.value;
					 return new BinOp("==",a, b);
				}
			},
			new Action() {	// [68] expr = expr.a NEQ expr.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_a = _symbols[offset + 1];
					final Expression a = (Expression) _symbol_a.value;
					final Symbol _symbol_b = _symbols[offset + 3];
					final Expression b = (Expression) _symbol_b.value;
					 return new BinOp("!=",a, b);
				}
			},
			new Action() {	// [69] expr = expr.a AMP expr.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_a = _symbols[offset + 1];
					final Expression a = (Expression) _symbol_a.value;
					final Symbol _symbol_b = _symbols[offset + 3];
					final Expression b = (Expression) _symbol_b.value;
					 return new BinOp("&", a, b);
				}
			},
			new Action() {	// [70] expr = expr.a CARET expr.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_a = _symbols[offset + 1];
					final Expression a = (Expression) _symbol_a.value;
					final Symbol _symbol_b = _symbols[offset + 3];
					final Expression b = (Expression) _symbol_b.value;
					 return new BinOp("^", a, b);
				}
			},
			new Action() {	// [71] expr = expr.a PIPE expr.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_a = _symbols[offset + 1];
					final Expression a = (Expression) _symbol_a.value;
					final Symbol _symbol_b = _symbols[offset + 3];
					final Expression b = (Expression) _symbol_b.value;
					 return new BinOp("|", a, b);
				}
			},
			new Action() {	// [72] expr = expr.a AND expr.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_a = _symbols[offset + 1];
					final Expression a = (Expression) _symbol_a.value;
					final Symbol _symbol_b = _symbols[offset + 3];
					final Expression b = (Expression) _symbol_b.value;
					 return new BinOp("&&",a, b);
				}
			},
			new Action() {	// [73] expr = expr.a OR expr.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_a = _symbols[offset + 1];
					final Expression a = (Expression) _symbol_a.value;
					final Symbol _symbol_b = _symbols[offset + 3];
					final Expression b = (Expression) _symbol_b.value;
					 return new BinOp("||",a, b);
				}
			},
			new Action() {	// [74] expr = expr.a ASG expr.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_a = _symbols[offset + 1];
					final Expression a = (Expression) _symbol_a.value;
					final Symbol _symbol_b = _symbols[offset + 3];
					final Expression b = (Expression) _symbol_b.value;
					 return new BinOp("=", a, b);
				}
			},
			new Action() {	// [75] expr = LPAREN expr.e RPAREN
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_e = _symbols[offset + 2];
					final Expression e = (Expression) _symbol_e.value;
					 return (Symbol) e;
				}
			},
			new Action() {	// [76] lpred = LPRED COLON expr.a
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_a = _symbols[offset + 3];
					final Expression a = (Expression) _symbol_a.value;
					 return (Symbol) a;
				}
			},
			new Action() {	// [77] mode = MODE COLON NORW
				public Symbol reduce(Symbol[] _symbols, int offset) {
					 return new Mode("NoRW");
				}
			},
			new Action() {	// [78] mode = MODE COLON NOW
				public Symbol reduce(Symbol[] _symbols, int offset) {
					 return new Mode("NoW");
				}
			},
			new Action() {	// [79] mode = MODE COLON RW
				public Symbol reduce(Symbol[] _symbols, int offset) {
					 return new Mode("RW");
				}
			},
			new Action() {	// [80] type = VOID
				public Symbol reduce(Symbol[] _symbols, int offset) {
					 return (Symbol) Void.self();
				}
			},
			new Action() {	// [81] type = INT
				public Symbol reduce(Symbol[] _symbols, int offset) {
					 return (Symbol) SignedInt.self();
				}
			},
			new Action() {	// [82] type = CHAR
				public Symbol reduce(Symbol[] _symbols, int offset) {
					 return (Symbol) Char.self();
				}
			}
		};
	}

	protected Symbol invokeReduceAction(int rule_num, int offset) {
		return actions[rule_num].reduce(_symbols, offset);
	}
}
