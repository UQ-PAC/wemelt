package tool;

import beaver.*;
import java.util.ArrayList;

/**
 * This class is a LALR parser generated by
 * <a href="http://beaver.sourceforge.net">Beaver</a> v0.9.6.1
 * from the grammar specification "Parser.grammar".
 */
public class Parser extends beaver.Parser {
	static public class Terminals {
		static public final short EOF = 0;
		static public final short PLUS = 1;
		static public final short MINUS = 2;
		static public final short INCR = 3;
		static public final short DECR = 4;
		static public final short LPAREN = 5;
		static public final short ID = 6;
		static public final short NUM = 7;
		static public final short BANG = 8;
		static public final short TILDE = 9;
		static public final short STAR = 10;
		static public final short DIV = 11;
		static public final short MOD = 12;
		static public final short PREFIX = 13;
		static public final short POSTFIX = 14;
		static public final short SHL = 15;
		static public final short SHR = 16;
		static public final short LBRACK = 17;
		static public final short LT = 18;
		static public final short LE = 19;
		static public final short GE = 20;
		static public final short GT = 21;
		static public final short EQ = 22;
		static public final short NEQ = 23;
		static public final short AMP = 24;
		static public final short CARET = 25;
		static public final short PIPE = 26;
		static public final short SEMICOLON = 27;
		static public final short AND = 28;
		static public final short QUESTION = 29;
		static public final short OR = 30;
		static public final short ASG = 31;
		static public final short ASG_OP = 32;
		static public final short COMMA = 33;
		static public final short VOID = 34;
		static public final short INT = 35;
		static public final short CHAR = 36;
		static public final short RPAREN = 37;
		static public final short WHILE = 38;
		static public final short FOR = 39;
		static public final short DO = 40;
		static public final short IF = 41;
		static public final short LBRACE = 42;
		static public final short RETURN = 43;
		static public final short BREAK = 44;
		static public final short CONTINUE = 45;
		static public final short FENCE = 46;
		static public final short MODE = 47;
		static public final short LPRED = 48;
		static public final short COLON = 49;
		static public final short RBRACE = 50;
		static public final short REG_ID = 51;
		static public final short NORW = 52;
		static public final short NOW = 53;
		static public final short RW = 54;
		static public final short ELSE = 55;
		static public final short RBRACK = 56;

		static public final String[] NAMES = {
			"EOF",
			"PLUS",
			"MINUS",
			"INCR",
			"DECR",
			"LPAREN",
			"ID",
			"NUM",
			"BANG",
			"TILDE",
			"STAR",
			"DIV",
			"MOD",
			"PREFIX",
			"POSTFIX",
			"SHL",
			"SHR",
			"LBRACK",
			"LT",
			"LE",
			"GE",
			"GT",
			"EQ",
			"NEQ",
			"AMP",
			"CARET",
			"PIPE",
			"SEMICOLON",
			"AND",
			"QUESTION",
			"OR",
			"ASG",
			"ASG_OP",
			"COMMA",
			"VOID",
			"INT",
			"CHAR",
			"RPAREN",
			"WHILE",
			"FOR",
			"DO",
			"IF",
			"LBRACE",
			"RETURN",
			"BREAK",
			"CONTINUE",
			"FENCE",
			"MODE",
			"LPRED",
			"COLON",
			"RBRACE",
			"REG_ID",
			"NORW",
			"NOW",
			"RW",
			"ELSE",
			"RBRACK"
		};
	}

	static final ParsingTables PARSING_TABLES = new ParsingTables(
		"U9pjMWbu54KM$dicCycWWe55P543AB2i8k4I9W528E4AA8eWk2uUwxBWwgghYyAoACWf2dW" +
		"02YWeY88AQ0GyK2uLHCM3snDG4H4Kv5Qmzg$kDpqzIK#O7Y1#drywtvk$whrw$wjwLLrLCm" +
		"245k9oT4S7T5H7SH3xi1#pS36wu39CGZdqm9Kem5NeXMjm7Qv7R$J13RWHxV0lt8bRy6$SZ" +
		"duH1gHXhycGBmnQ5u#X88QXKFs2nNWMUsok29OJhWg21UWSbxDy3AUJPO9uXsoM0N5PJebX" +
		"EGDduZGyP6Vf24v7HVm1fmfJAjBZCirmpL8boT8GONWObUColEJAK8WgpDRFp9R5y0YUYCl" +
		"mSXo6gbXi#6o6akRwBLS6AmjFuUa465QNmF0EtlMyMlIShC0wcscfS2ttpAHx7SGNDbCAgc" +
		"490ZZRCzFZc8ff#CPcikOu0ok5wJtKYCkqmpK$7#0ZDHJdueZ5O02ruZBiT6KuX5zH1tLnl" +
		"lJXAEh5PVZ1bQ4#6g0Hcg2fntn4$BFH4gtG6db9#hVb$BH79roIfF#bw8fkk08za$J$2$wA" +
		"gt4j$kRHVnH6OnX6u04Cmb3SZx7uEvx1U0p4$$0F5sjV3CPiq$fFt8IRCL7MpvFu5DzYCpx" +
		"6SvYFL$0QNiUjk4si$t6nte7##A$QuX93lpLtcJ7kuReOZf7orjnh#F57d8LVS0wgeoREGs" +
		"ty2N#M6FUvn1Y3SNXGRNQ9CScCecCyYYcOZCSmNQ9CmampogQOA5QCEIunYd6hBstkXNWLY" +
		"$06ruR5lGnl5k4kXxU5UrKYt8v#ly$oXrY3jSAz0PyLuVuSMuNxguIulyOsR3UvltEnVezT" +
		"vDRM7$4J523SI8ZRUhGtubWtYTLwJYptuPF7RHW9SaVULE1kQMkzgVg9zwP2tbGzvuMiBSQ" +
		"BF0drOytv2opfEKUHD#82N4XT9XgZ8LeWn$JFGZE4qGQv3d#8$qKb#4Vx3JJtq6yTC$Q9ZL" +
		"bIdu$7rzdVHFFitIVP7dgDb4mSRp6yHqYSF$6MoRpL2qnhIPvbjZ9RcQtCfct7tejAjqNqF" +
		"8#sE40fC4lpA7Fnl7bwwoTwUfUs9jxTGTlq#H2rnJj9IgVbRv#fawa9HZL6YjaYGF6RAybd" +
		"9KODTgmaS7qLS7rzOjuN2x7UKTxeA7$fA6#noy1k6EJrGyUgoU$sv$4xVJcSWbFvJJiJ5JW" +
		"BwPo7Ifo9ofoZAfobgfoFQfoHitbVoE2DeORDK4qOCeH1w#8nfCSmX1azcxVE5ZPN13E5Aq" +
		"imdTc9nzafXjF94XJlbZPBWxWimM9ZQy2SHBDaCKIor8WzyvQbBCbI3Pl9AqEO7bQs8gFAE" +
		"Ku6xtCTZNoY619VBPeXw9YJQiBWVTtfNcSxc7APbqR8irTRuaoDqOJVhg9CrXndEVhcTPPr" +
		"PlHkaFmwgSMnPPb$5aFh9DPgLWn3elauKVvXpazBVeQJze$y$JR#0SvWAj8G8aE0SXhAyzF" +
		"DseupO5drNtGdhOqw$3PMbz$7pkStidhyrgVjbZKSnnhcj#FYCRGc836o7MCASrteCUKN6L" +
		"CoCUgREXqZXwilo9qpREyFrXvLBIQA5QEXIupYt0rjRfqV$PTfxo7X8jnwrLZSEGbnrtTmw" +
		"vu6x7utPJcMMsV4uWuanArx6oXXviCoyxM8GQKiRc82tCfyj3S$NQqMjvBdzyjDMorfQywR" +
		"MOhpfj9YlQdQDyoQUH96VT76ykLdoRxM6#NiTMpi1iVmD$iTwNc2$QQVYdbY$OxLv#FnZVG" +
		"tqJmduPDi3xr6IYAEnnZU8oJExxcbzpUl9CyoMvcjp5PcSzgK$HJRYqgrHVGyTxJGvtcwMM" +
		"fFwOY2oEuSUpikJKsykuEfroCgvbzqxANRylUfuKg9QdBD5dcKjkPAwY2PwHnTIQo5kTRal" +
		"iXoAozbrbe1Hk1kwtSx$LjI6yf4NHVTZURlIq26r8TG#b6kOVD9bYvbFP3Mtogd3H4SBVWm" +
		"#TE9Zn4R4cTIEOOub$KUn9SfhrBUfdn0#PJoDMKtvJ0G2W3#oudbYOmTgaAiJQmE#FOIwmA" +
		"1sKHo1$eJiudvn3psQo2nCt5VT3oXxgnFaVBLWdq4RnKSOA5$lfaX#38Y$gB$YX$LPUmS6#" +
		"$#21pXU7A187Dbz2Rgtuxx4dLVHn0RizwMs9hZkexOXNWEiHUnFf5vJkDS10SGBoME9ETou" +
		"WJYHk8CuaF45udN4fSGBo2k9bOaViQ#C8$17UnlY7Y8oDoa1eaTYFfVLJiIQx9Th#XOV7jO" +
		"pv6vdKnx9dLzhNfgIuvbDB4JTPM8Ln8R4ViGknAv3dot4OSIsRVK1#bqauDx56KkK$WvyQ3" +
		"ahWubbVMZvBxPcLU9EOqVccSDswL4zEHWpdsp7DnSD$uAmian#NP4RIYqCB1BwckbdOpJtq" +
		"emrqAZ6uLpuwydVPZ3Z$siPucTQnZxME$gwESYwi#WN49zJyVQ64RRAkgRidmMXMlStp5sZ" +
		"7wTKywfSHNBTugExuMVkVG$GjissWQpF45iprF7#0RRfFc8AuYd4xVJDfKI6T$ielcK$g$a" +
		"7FiSTVtkZHAV9HQcPBhxXjg8Jtvn6vgvwAewohq51mcE49mck5IuEmjs4RnTKDv3OxpWPC7" +
		"vWWi45mek4fHy6Ei4rmjk4DmOssV3iJyO#mKF2CgwDGvPwAiiM36MmtUcernLi8dWHO9D1P" +
		"i9XWMx2NONl4AmXs1FGSc7xov1cKFV6C6nWkC4fmfAldqp1ES8pXMSvnoBw0OwoaiSvMM2o" +
		"mLN24gEVPi5jmXkBSfjwJ6TjfrkDfU#o5nWCylx7Vh5$0X5wsaNnlgbj2tEvQ#UI4n7#tC5" +
		"wmhMYzeCW$LCHzkBHJ$6vPs$pC9GBy7hNM95pgCR16znsEvmQJzGSBZWYAWjrE$OOxFUGyT" +
		"u2elObnRtCGAGH$sglZLnhzflwqOgxlcAPxsQGk5veYPH7gLmNrCJAJpFr7WAzrJ5CqDnhr" +
		"SFKCPHnbAOEtKVPRGmtgkcgoVDqXEKQHJkUEfnolsczYUrJxsbtZJBF2yLzsNr6eLdeNg5m" +
		"dD2BQGieCodl4GffF0SLIzGvb6u7ohk#Ohxh7gEyYo5TmerY$ACz6E6UaUjLDnvrTDc$O3Y" +
		"ZKKjeoobBA5mDQetAA#RzgVKJ7LGVFVO#HcXXgjXwaUxlblzOE8kjSF4BypFhOet87rgAfx" +
		"gYZSYzGbb4sMZQL#dDfYuLgqNdZNg8vlpO$MXNUQDIgrMszGtjkPzE1xr7eezwbtAAZLKtQ" +
		"E6w5ENjPtgEnDvfr0$KxvNszLXVJF28Dvf38eFl6DG3DvD3RHcFP#OprjhEs8xOXvlbtcys" +
		"UQPvO18gaCV48mjvzA$bKWRIdjJVER$S#Z8ilxcr9oSpQcpn5dMaa89YZuWakhGH#eHB6Vw" +
		"wL$6OyKdak8e5nN$IP8KmG2os1TB$1IVG$p7AKwE03enHajYZaEogOj8Y$y3KXKQHm==");

	private final Action[] actions;

	public Parser() {
		super(PARSING_TABLES);
		actions = new Action[] {
			new Action() {	// [0] lst$global2 = global2
				public Symbol reduce(Symbol[] _symbols, int offset) {
					ArrayList lst = new ArrayList(); lst.add(_symbols[offset + 1].value); return new Symbol(lst);
				}
			},
			new Action() {	// [1] lst$global2 = lst$global2 global2
				public Symbol reduce(Symbol[] _symbols, int offset) {
					((ArrayList) _symbols[offset + 1].value).add(_symbols[offset + 2].value); return _symbols[offset + 1];
				}
			},
			Action.NONE,  	// [2] opt$lst$global2 = 
			Action.RETURN,	// [3] opt$lst$global2 = lst$global2
			Action.RETURN,	// [4] unit = opt$lst$global2
			new Action() {	// [5] param = type.t ID.n
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_t = _symbols[offset + 1];
					final Type t = (Type) _symbol_t.value;
					final Symbol _symbol_n = _symbols[offset + 2];
					final String n = (String) _symbol_n.value;
					 return new Param(t, n);
				}
			},
			new Action() {	// [6] params = param
				public Symbol reduce(Symbol[] _symbols, int offset) {
					ArrayList lst = new ArrayList(); lst.add(_symbols[offset + 1].value); return new Symbol(lst);
				}
			},
			new Action() {	// [7] params = params COMMA param
				public Symbol reduce(Symbol[] _symbols, int offset) {
					((ArrayList) _symbols[offset + 1].value).add(_symbols[offset + 3].value); return _symbols[offset + 1];
				}
			},
			new Action() {	// [8] exprs = expr
				public Symbol reduce(Symbol[] _symbols, int offset) {
					ArrayList lst = new ArrayList(); lst.add(_symbols[offset + 1].value); return new Symbol(lst);
				}
			},
			new Action() {	// [9] exprs = exprs COMMA expr
				public Symbol reduce(Symbol[] _symbols, int offset) {
					((ArrayList) _symbols[offset + 1].value).add(_symbols[offset + 3].value); return _symbols[offset + 1];
				}
			},
			new Action() {	// [10] global = type.t REG_ID.n SEMICOLON lpred.l
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_t = _symbols[offset + 1];
					final Type t = (Type) _symbol_t.value;
					final Symbol _symbol_n = _symbols[offset + 2];
					final String n = (String) _symbol_n.value;
					final Symbol _symbol_l = _symbols[offset + 4];
					final Predicate l = (Predicate) _symbol_l.value;
					 return new VarDef(t, n, l);
				}
			},
			new Action() {	// [11] global = type.t REG_ID.n ASG expr.e SEMICOLON lpred.l
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_t = _symbols[offset + 1];
					final Type t = (Type) _symbol_t.value;
					final Symbol _symbol_n = _symbols[offset + 2];
					final String n = (String) _symbol_n.value;
					final Symbol _symbol_e = _symbols[offset + 4];
					final Expression e = (Expression) _symbol_e.value;
					final Symbol _symbol_l = _symbols[offset + 6];
					final Predicate l = (Predicate) _symbol_l.value;
					 return new VarDef(t, n, e, l);
				}
			},
			new Action() {	// [12] global = type.t REG_ID.n SEMICOLON
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_t = _symbols[offset + 1];
					final Type t = (Type) _symbol_t.value;
					final Symbol _symbol_n = _symbols[offset + 2];
					final String n = (String) _symbol_n.value;
					 return new VarDef(t, n);
				}
			},
			new Action() {	// [13] global = type.t REG_ID.n ASG expr.e SEMICOLON
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_t = _symbols[offset + 1];
					final Type t = (Type) _symbol_t.value;
					final Symbol _symbol_n = _symbols[offset + 2];
					final String n = (String) _symbol_n.value;
					final Symbol _symbol_e = _symbols[offset + 4];
					final Expression e = (Expression) _symbol_e.value;
					 return new VarDef(t, n, e);
				}
			},
			new Action() {	// [14] global = type.t ID.n SEMICOLON lpred.l mode.m
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_t = _symbols[offset + 1];
					final Type t = (Type) _symbol_t.value;
					final Symbol _symbol_n = _symbols[offset + 2];
					final String n = (String) _symbol_n.value;
					final Symbol _symbol_l = _symbols[offset + 4];
					final Predicate l = (Predicate) _symbol_l.value;
					final Symbol _symbol_m = _symbols[offset + 5];
					final Mode m = (Mode) _symbol_m.value;
					 return new VarDef(t, n, l, m);
				}
			},
			new Action() {	// [15] global = type.t ID.n ASG expr.e SEMICOLON lpred.l mode.m
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_t = _symbols[offset + 1];
					final Type t = (Type) _symbol_t.value;
					final Symbol _symbol_n = _symbols[offset + 2];
					final String n = (String) _symbol_n.value;
					final Symbol _symbol_e = _symbols[offset + 4];
					final Expression e = (Expression) _symbol_e.value;
					final Symbol _symbol_l = _symbols[offset + 6];
					final Predicate l = (Predicate) _symbol_l.value;
					final Symbol _symbol_m = _symbols[offset + 7];
					final Mode m = (Mode) _symbol_m.value;
					 return new VarDef(t, n, e, l, m);
				}
			},
			new Action() {	// [16] global = type.t ID.n SEMICOLON mode.m
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_t = _symbols[offset + 1];
					final Type t = (Type) _symbol_t.value;
					final Symbol _symbol_n = _symbols[offset + 2];
					final String n = (String) _symbol_n.value;
					final Symbol _symbol_m = _symbols[offset + 4];
					final Mode m = (Mode) _symbol_m.value;
					 return new VarDef(t, n, m);
				}
			},
			new Action() {	// [17] global = type.t ID.n ASG expr.e SEMICOLON mode.m
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_t = _symbols[offset + 1];
					final Type t = (Type) _symbol_t.value;
					final Symbol _symbol_n = _symbols[offset + 2];
					final String n = (String) _symbol_n.value;
					final Symbol _symbol_e = _symbols[offset + 4];
					final Expression e = (Expression) _symbol_e.value;
					final Symbol _symbol_m = _symbols[offset + 6];
					final Mode m = (Mode) _symbol_m.value;
					 return new VarDef(t, n, e, m);
				}
			},
			new Action() {	// [18] global = type.t ID.n LPAREN RPAREN SEMICOLON
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_t = _symbols[offset + 1];
					final Type t = (Type) _symbol_t.value;
					final Symbol _symbol_n = _symbols[offset + 2];
					final String n = (String) _symbol_n.value;
					 return new FunDef(t, n);
				}
			},
			new Action() {	// [19] global = type.t ID.n LPAREN VOID RPAREN SEMICOLON
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_t = _symbols[offset + 1];
					final Type t = (Type) _symbol_t.value;
					final Symbol _symbol_n = _symbols[offset + 2];
					final String n = (String) _symbol_n.value;
					 return new FunDef(t, n);
				}
			},
			new Action() {	// [20] global = type.t ID.n LPAREN params.xs RPAREN SEMICOLON
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_t = _symbols[offset + 1];
					final Type t = (Type) _symbol_t.value;
					final Symbol _symbol_n = _symbols[offset + 2];
					final String n = (String) _symbol_n.value;
					final Symbol _symbol_xs = _symbols[offset + 4];
					final ArrayList _list_xs = (ArrayList) _symbol_xs.value;
					final Param[] xs = _list_xs == null ? new Param[0] : (Param[]) _list_xs.toArray(new Param[_list_xs.size()]);
					 return new FunDef(t, n, xs);
				}
			},
			new Action() {	// [21] global = type.t ID.n LPAREN RPAREN local1.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_t = _symbols[offset + 1];
					final Type t = (Type) _symbol_t.value;
					final Symbol _symbol_n = _symbols[offset + 2];
					final String n = (String) _symbol_n.value;
					final Symbol _symbol_b = _symbols[offset + 5];
					final Statement b = (Statement) _symbol_b.value;
					 return new FunDef(t, n, b);
				}
			},
			new Action() {	// [22] global = type.t ID.n LPAREN VOID RPAREN local1.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_t = _symbols[offset + 1];
					final Type t = (Type) _symbol_t.value;
					final Symbol _symbol_n = _symbols[offset + 2];
					final String n = (String) _symbol_n.value;
					final Symbol _symbol_b = _symbols[offset + 6];
					final Statement b = (Statement) _symbol_b.value;
					 return new FunDef(t, n, b);
				}
			},
			new Action() {	// [23] global = type.t ID.n LPAREN params.xs RPAREN local1.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_t = _symbols[offset + 1];
					final Type t = (Type) _symbol_t.value;
					final Symbol _symbol_n = _symbols[offset + 2];
					final String n = (String) _symbol_n.value;
					final Symbol _symbol_xs = _symbols[offset + 4];
					final ArrayList _list_xs = (ArrayList) _symbol_xs.value;
					final Param[] xs = _list_xs == null ? new Param[0] : (Param[]) _list_xs.toArray(new Param[_list_xs.size()]);
					final Symbol _symbol_b = _symbols[offset + 6];
					final Statement b = (Statement) _symbol_b.value;
					 return new FunDef(t, n, xs, b);
				}
			},
			Action.RETURN,	// [24] global2 = global
			new Action() {	// [25] local = SEMICOLON
				public Symbol reduce(Symbol[] _symbols, int offset) {
					 return Block.empty();
				}
			},
			Action.RETURN,	// [26] local = local1
			Action.RETURN,	// [27] local2 = local1
			new Action() {	// [28] lst$local2 = local2
				public Symbol reduce(Symbol[] _symbols, int offset) {
					ArrayList lst = new ArrayList(); lst.add(_symbols[offset + 1].value); return new Symbol(lst);
				}
			},
			new Action() {	// [29] lst$local2 = lst$local2 local2
				public Symbol reduce(Symbol[] _symbols, int offset) {
					((ArrayList) _symbols[offset + 1].value).add(_symbols[offset + 2].value); return _symbols[offset + 1];
				}
			},
			Action.NONE,  	// [30] opt$lst$local2 = 
			Action.RETURN,	// [31] opt$lst$local2 = lst$local2
			Action.RETURN,	// [32] locals2 = opt$lst$local2
			new Action() {	// [33] local1 = LBRACE locals2.ss RBRACE
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_ss = _symbols[offset + 2];
					final ArrayList _list_ss = (ArrayList) _symbol_ss.value;
					final Statement[] ss = _list_ss == null ? new Statement[0] : (Statement[]) _list_ss.toArray(new Statement[_list_ss.size()]);
					 return new Block(ss);
				}
			},
			new Action() {	// [34] local1 = expr.a SEMICOLON
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_a = _symbols[offset + 1];
					final Expression a = (Expression) _symbol_a.value;
					 return new Atomic(a);
				}
			},
			new Action() {	// [35] local1 = RETURN SEMICOLON
				public Symbol reduce(Symbol[] _symbols, int offset) {
					 return Return.none();
				}
			},
			new Action() {	// [36] local1 = RETURN expr.a SEMICOLON
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_a = _symbols[offset + 2];
					final Expression a = (Expression) _symbol_a.value;
					 return new Return(a);
				}
			},
			new Action() {	// [37] local1 = BREAK SEMICOLON
				public Symbol reduce(Symbol[] _symbols, int offset) {
					 return Break.self();
				}
			},
			new Action() {	// [38] local1 = CONTINUE SEMICOLON
				public Symbol reduce(Symbol[] _symbols, int offset) {
					 return Continue.self();
				}
			},
			new Action() {	// [39] local1 = FENCE SEMICOLON
				public Symbol reduce(Symbol[] _symbols, int offset) {
					 return Fence.self();
				}
			},
			new Action() {	// [40] local1 = type.t REG_ID.n SEMICOLON lpred.l
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_t = _symbols[offset + 1];
					final Type t = (Type) _symbol_t.value;
					final Symbol _symbol_n = _symbols[offset + 2];
					final String n = (String) _symbol_n.value;
					final Symbol _symbol_l = _symbols[offset + 4];
					final Predicate l = (Predicate) _symbol_l.value;
					 return new VarDef(t, n, l);
				}
			},
			new Action() {	// [41] local1 = type.t REG_ID.n ASG expr.e SEMICOLON lpred.l
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_t = _symbols[offset + 1];
					final Type t = (Type) _symbol_t.value;
					final Symbol _symbol_n = _symbols[offset + 2];
					final String n = (String) _symbol_n.value;
					final Symbol _symbol_e = _symbols[offset + 4];
					final Expression e = (Expression) _symbol_e.value;
					final Symbol _symbol_l = _symbols[offset + 6];
					final Predicate l = (Predicate) _symbol_l.value;
					 return new VarDef(t, n, e, l);
				}
			},
			new Action() {	// [42] local1 = type.t REG_ID.n SEMICOLON
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_t = _symbols[offset + 1];
					final Type t = (Type) _symbol_t.value;
					final Symbol _symbol_n = _symbols[offset + 2];
					final String n = (String) _symbol_n.value;
					 return new VarDef(t, n);
				}
			},
			new Action() {	// [43] local1 = type.t REG_ID.n ASG expr.e SEMICOLON
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_t = _symbols[offset + 1];
					final Type t = (Type) _symbol_t.value;
					final Symbol _symbol_n = _symbols[offset + 2];
					final String n = (String) _symbol_n.value;
					final Symbol _symbol_e = _symbols[offset + 4];
					final Expression e = (Expression) _symbol_e.value;
					 return new VarDef(t, n, e);
				}
			},
			new Action() {	// [44] local1 = type.t ID.n SEMICOLON lpred.l mode.m
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_t = _symbols[offset + 1];
					final Type t = (Type) _symbol_t.value;
					final Symbol _symbol_n = _symbols[offset + 2];
					final String n = (String) _symbol_n.value;
					final Symbol _symbol_l = _symbols[offset + 4];
					final Predicate l = (Predicate) _symbol_l.value;
					final Symbol _symbol_m = _symbols[offset + 5];
					final Mode m = (Mode) _symbol_m.value;
					 return new VarDef(t, n, l, m);
				}
			},
			new Action() {	// [45] local1 = type.t ID.n ASG expr.e SEMICOLON lpred.l mode.m
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_t = _symbols[offset + 1];
					final Type t = (Type) _symbol_t.value;
					final Symbol _symbol_n = _symbols[offset + 2];
					final String n = (String) _symbol_n.value;
					final Symbol _symbol_e = _symbols[offset + 4];
					final Expression e = (Expression) _symbol_e.value;
					final Symbol _symbol_l = _symbols[offset + 6];
					final Predicate l = (Predicate) _symbol_l.value;
					final Symbol _symbol_m = _symbols[offset + 7];
					final Mode m = (Mode) _symbol_m.value;
					 return new VarDef(t, n, e, l, m);
				}
			},
			new Action() {	// [46] local1 = type.t ID.n SEMICOLON mode.m
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_t = _symbols[offset + 1];
					final Type t = (Type) _symbol_t.value;
					final Symbol _symbol_n = _symbols[offset + 2];
					final String n = (String) _symbol_n.value;
					final Symbol _symbol_m = _symbols[offset + 4];
					final Mode m = (Mode) _symbol_m.value;
					 return new VarDef(t, n, m);
				}
			},
			new Action() {	// [47] local1 = type.t ID.n ASG expr.e SEMICOLON mode.m
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_t = _symbols[offset + 1];
					final Type t = (Type) _symbol_t.value;
					final Symbol _symbol_n = _symbols[offset + 2];
					final String n = (String) _symbol_n.value;
					final Symbol _symbol_e = _symbols[offset + 4];
					final Expression e = (Expression) _symbol_e.value;
					final Symbol _symbol_m = _symbols[offset + 6];
					final Mode m = (Mode) _symbol_m.value;
					 return new VarDef(t, n, e, m);
				}
			},
			new Action() {	// [48] local1 = IF LPAREN expr.a RPAREN local.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_a = _symbols[offset + 3];
					final Expression a = (Expression) _symbol_a.value;
					final Symbol _symbol_b = _symbols[offset + 5];
					final Statement b = (Statement) _symbol_b.value;
					 return new If(a, b);
				}
			},
			new Action() {	// [49] local1 = IF LPAREN expr.a RPAREN local.b ELSE local.c
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_a = _symbols[offset + 3];
					final Expression a = (Expression) _symbol_a.value;
					final Symbol _symbol_b = _symbols[offset + 5];
					final Statement b = (Statement) _symbol_b.value;
					final Symbol _symbol_c = _symbols[offset + 7];
					final Statement c = (Statement) _symbol_c.value;
					 return new If(a, b, c);
				}
			},
			new Action() {	// [50] local1 = WHILE LPAREN expr.a RPAREN local.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_a = _symbols[offset + 3];
					final Expression a = (Expression) _symbol_a.value;
					final Symbol _symbol_b = _symbols[offset + 5];
					final Statement b = (Statement) _symbol_b.value;
					 return new While(a, /*i,*/ b);
				}
			},
			new Action() {	// [51] local1 = DO local.b WHILE LPAREN expr.a RPAREN SEMICOLON
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_b = _symbols[offset + 2];
					final Statement b = (Statement) _symbol_b.value;
					final Symbol _symbol_a = _symbols[offset + 5];
					final Expression a = (Expression) _symbol_a.value;
					 return new DoWhile(b, a);
				}
			},
			new Action() {	// [52] local1 = FOR LPAREN expr.a SEMICOLON expr.b SEMICOLON expr.c SEMICOLON RPAREN local.p
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_a = _symbols[offset + 3];
					final Expression a = (Expression) _symbol_a.value;
					final Symbol _symbol_b = _symbols[offset + 5];
					final Expression b = (Expression) _symbol_b.value;
					final Symbol _symbol_c = _symbols[offset + 7];
					final Expression c = (Expression) _symbol_c.value;
					final Symbol _symbol_p = _symbols[offset + 10];
					final Statement p = (Statement) _symbol_p.value;
					 return new For(a, b, c, p);
				}
			},
			new Action() {	// [53] local1 = error SEMICOLON
				public Symbol reduce(Symbol[] _symbols, int offset) {
					 return Malformed.self();
				}
			},
			Action.RETURN,	// [54] expr = PREFIX
			Action.RETURN,	// [55] expr = POSTFIX
			new Action() {	// [56] expr = ID.n
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_n = _symbols[offset + 1];
					final String n = (String) _symbol_n.value;
					 return new Id(n);
				}
			},
			new Action() {	// [57] expr = NUM.n
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_n = _symbols[offset + 1];
					final Integer n = (Integer) _symbol_n.value;
					 return new Lit(n);
				}
			},
			new Action() {	// [58] expr = expr.a INCR
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_a = _symbols[offset + 1];
					final Expression a = (Expression) _symbol_a.value;
					 return new PostOp("++", a);
				}
			},
			new Action() {	// [59] expr = expr.a DECR
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_a = _symbols[offset + 1];
					final Expression a = (Expression) _symbol_a.value;
					 return new PostOp("--", a);
				}
			},
			new Action() {	// [60] expr = expr.a LBRACK expr.i RBRACK
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_a = _symbols[offset + 1];
					final Expression a = (Expression) _symbol_a.value;
					final Symbol _symbol_i = _symbols[offset + 3];
					final Expression i = (Expression) _symbol_i.value;
					 return new PreOp("*", new BinOp("+", a, i));
				}
			},
			new Action() {	// [61] expr = INCR expr.a
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_a = _symbols[offset + 2];
					final Expression a = (Expression) _symbol_a.value;
					 return new PreOp("++", a);
				}
			},
			new Action() {	// [62] expr = DECR expr.a
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_a = _symbols[offset + 2];
					final Expression a = (Expression) _symbol_a.value;
					 return new PreOp("--", a);
				}
			},
			new Action() {	// [63] expr = PLUS expr.a
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_a = _symbols[offset + 2];
					final Expression a = (Expression) _symbol_a.value;
					 return new PreOp("+", a);
				}
			},
			new Action() {	// [64] expr = MINUS expr.a
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_a = _symbols[offset + 2];
					final Expression a = (Expression) _symbol_a.value;
					 return new PreOp("-", a);
				}
			},
			new Action() {	// [65] expr = BANG expr.a
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_a = _symbols[offset + 2];
					final Expression a = (Expression) _symbol_a.value;
					 return new PreOp("!", a);
				}
			},
			new Action() {	// [66] expr = TILDE expr.a
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_a = _symbols[offset + 2];
					final Expression a = (Expression) _symbol_a.value;
					 return new PreOp("~", a);
				}
			},
			new Action() {	// [67] expr = expr.a STAR expr.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_a = _symbols[offset + 1];
					final Expression a = (Expression) _symbol_a.value;
					final Symbol _symbol_b = _symbols[offset + 3];
					final Expression b = (Expression) _symbol_b.value;
					 return new BinOp("*", a, b);
				}
			},
			new Action() {	// [68] expr = expr.a DIV expr.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_a = _symbols[offset + 1];
					final Expression a = (Expression) _symbol_a.value;
					final Symbol _symbol_b = _symbols[offset + 3];
					final Expression b = (Expression) _symbol_b.value;
					 return new BinOp("/", a, b);
				}
			},
			new Action() {	// [69] expr = expr.a MOD expr.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_a = _symbols[offset + 1];
					final Expression a = (Expression) _symbol_a.value;
					final Symbol _symbol_b = _symbols[offset + 3];
					final Expression b = (Expression) _symbol_b.value;
					 return new BinOp("%", a, b);
				}
			},
			new Action() {	// [70] expr = expr.a PLUS expr.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_a = _symbols[offset + 1];
					final Expression a = (Expression) _symbol_a.value;
					final Symbol _symbol_b = _symbols[offset + 3];
					final Expression b = (Expression) _symbol_b.value;
					 return new BinOp("+", a, b);
				}
			},
			new Action() {	// [71] expr = expr.a MINUS expr.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_a = _symbols[offset + 1];
					final Expression a = (Expression) _symbol_a.value;
					final Symbol _symbol_b = _symbols[offset + 3];
					final Expression b = (Expression) _symbol_b.value;
					 return new BinOp("-", a, b);
				}
			},
			new Action() {	// [72] expr = expr.a SHL expr.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_a = _symbols[offset + 1];
					final Expression a = (Expression) _symbol_a.value;
					final Symbol _symbol_b = _symbols[offset + 3];
					final Expression b = (Expression) _symbol_b.value;
					 return new BinOp("<<",a, b);
				}
			},
			new Action() {	// [73] expr = expr.a SHR expr.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_a = _symbols[offset + 1];
					final Expression a = (Expression) _symbol_a.value;
					final Symbol _symbol_b = _symbols[offset + 3];
					final Expression b = (Expression) _symbol_b.value;
					 return new BinOp(">>",a, b);
				}
			},
			new Action() {	// [74] expr = expr.a LT expr.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_a = _symbols[offset + 1];
					final Expression a = (Expression) _symbol_a.value;
					final Symbol _symbol_b = _symbols[offset + 3];
					final Expression b = (Expression) _symbol_b.value;
					 return new BinOp("<", a, b);
				}
			},
			new Action() {	// [75] expr = expr.a LE expr.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_a = _symbols[offset + 1];
					final Expression a = (Expression) _symbol_a.value;
					final Symbol _symbol_b = _symbols[offset + 3];
					final Expression b = (Expression) _symbol_b.value;
					 return new BinOp("<=",a, b);
				}
			},
			new Action() {	// [76] expr = expr.a GE expr.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_a = _symbols[offset + 1];
					final Expression a = (Expression) _symbol_a.value;
					final Symbol _symbol_b = _symbols[offset + 3];
					final Expression b = (Expression) _symbol_b.value;
					 return new BinOp(">=",a, b);
				}
			},
			new Action() {	// [77] expr = expr.a GT expr.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_a = _symbols[offset + 1];
					final Expression a = (Expression) _symbol_a.value;
					final Symbol _symbol_b = _symbols[offset + 3];
					final Expression b = (Expression) _symbol_b.value;
					 return new BinOp(">", a, b);
				}
			},
			new Action() {	// [78] expr = expr.a EQ expr.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_a = _symbols[offset + 1];
					final Expression a = (Expression) _symbol_a.value;
					final Symbol _symbol_b = _symbols[offset + 3];
					final Expression b = (Expression) _symbol_b.value;
					 return new BinOp("==",a, b);
				}
			},
			new Action() {	// [79] expr = expr.a NEQ expr.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_a = _symbols[offset + 1];
					final Expression a = (Expression) _symbol_a.value;
					final Symbol _symbol_b = _symbols[offset + 3];
					final Expression b = (Expression) _symbol_b.value;
					 return new BinOp("!=",a, b);
				}
			},
			new Action() {	// [80] expr = expr.a AMP expr.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_a = _symbols[offset + 1];
					final Expression a = (Expression) _symbol_a.value;
					final Symbol _symbol_b = _symbols[offset + 3];
					final Expression b = (Expression) _symbol_b.value;
					 return new BinOp("&", a, b);
				}
			},
			new Action() {	// [81] expr = expr.a CARET expr.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_a = _symbols[offset + 1];
					final Expression a = (Expression) _symbol_a.value;
					final Symbol _symbol_b = _symbols[offset + 3];
					final Expression b = (Expression) _symbol_b.value;
					 return new BinOp("^", a, b);
				}
			},
			new Action() {	// [82] expr = expr.a PIPE expr.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_a = _symbols[offset + 1];
					final Expression a = (Expression) _symbol_a.value;
					final Symbol _symbol_b = _symbols[offset + 3];
					final Expression b = (Expression) _symbol_b.value;
					 return new BinOp("|", a, b);
				}
			},
			new Action() {	// [83] expr = expr.a AND expr.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_a = _symbols[offset + 1];
					final Expression a = (Expression) _symbol_a.value;
					final Symbol _symbol_b = _symbols[offset + 3];
					final Expression b = (Expression) _symbol_b.value;
					 return new BinOp("&&",a, b);
				}
			},
			new Action() {	// [84] expr = expr.a OR expr.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_a = _symbols[offset + 1];
					final Expression a = (Expression) _symbol_a.value;
					final Symbol _symbol_b = _symbols[offset + 3];
					final Expression b = (Expression) _symbol_b.value;
					 return new BinOp("||",a, b);
				}
			},
			new Action() {	// [85] expr = expr.a ASG expr.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_a = _symbols[offset + 1];
					final Expression a = (Expression) _symbol_a.value;
					final Symbol _symbol_b = _symbols[offset + 3];
					final Expression b = (Expression) _symbol_b.value;
					 return new BinOp("=", a, b);
				}
			},
			new Action() {	// [86] expr = expr.a ASG_OP.e expr.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_a = _symbols[offset + 1];
					final Expression a = (Expression) _symbol_a.value;
					final Symbol _symbol_e = _symbols[offset + 2];
					final String e = (String) _symbol_e.value;
					final Symbol _symbol_b = _symbols[offset + 3];
					final Expression b = (Expression) _symbol_b.value;
					 return new BinOp("=", a, new BinOp(e.substring(0, e.length() - 1), a, b));
				}
			},
			new Action() {	// [87] expr = expr.a COMMA expr.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_a = _symbols[offset + 1];
					final Expression a = (Expression) _symbol_a.value;
					final Symbol _symbol_b = _symbols[offset + 3];
					final Expression b = (Expression) _symbol_b.value;
					 return new BinOp(",", a, b);
				}
			},
			new Action() {	// [88] expr = ID.n LPAREN RPAREN
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_n = _symbols[offset + 1];
					final String n = (String) _symbol_n.value;
					 return new FunCall(n, new Expression[]{});
				}
			},
			new Action() {	// [89] expr = ID.n LPAREN exprs.as RPAREN
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_n = _symbols[offset + 1];
					final String n = (String) _symbol_n.value;
					final Symbol _symbol_as = _symbols[offset + 3];
					final ArrayList _list_as = (ArrayList) _symbol_as.value;
					final Expression[] as = _list_as == null ? new Expression[0] : (Expression[]) _list_as.toArray(new Expression[_list_as.size()]);
					 return new FunCall(n, as);
				}
			},
			new Action() {	// [90] expr = LPAREN expr.e RPAREN
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_e = _symbols[offset + 2];
					final Expression e = (Expression) _symbol_e.value;
					 return (Symbol) e;
				}
			},
			new Action() {	// [91] expr = expr.a QUESTION expr.b COLON expr.c
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_a = _symbols[offset + 1];
					final Expression a = (Expression) _symbol_a.value;
					final Symbol _symbol_b = _symbols[offset + 3];
					final Expression b = (Expression) _symbol_b.value;
					final Symbol _symbol_c = _symbols[offset + 5];
					final Expression c = (Expression) _symbol_c.value;
					 return new Question(a, b, c);
				}
			},
			new Action() {	// [92] term = ID.n
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_n = _symbols[offset + 1];
					final String n = (String) _symbol_n.value;
					 return new Var(n);
				}
			},
			new Action() {	// [93] term = NUM.n
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_n = _symbols[offset + 1];
					final Integer n = (Integer) _symbol_n.value;
					 return new Lit(n);
				}
			},
			new Action() {	// [94] term = LPAREN term.a RPAREN
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 2];
					 return (Symbol)a;
				}
			},
			new Action() {	// [95] term = PLUS term.a
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 2];
					 return (Symbol) a;
				}
			},
			new Action() {	// [96] term = MINUS term.a
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 2];
					 return Term.app("-", a);
				}
			},
			new Action() {	// [97] term = TILDE term.a
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 2];
					 return Term.app("~", a);
				}
			},
			new Action() {	// [98] term = term.a STAR term.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					final Symbol b = _symbols[offset + 3];
					 return Term.app("*", a, b);
				}
			},
			new Action() {	// [99] term = term.a DIV term.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					final Symbol b = _symbols[offset + 3];
					 return Term.app("/", a, b);
				}
			},
			new Action() {	// [100] term = term.a MOD term.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					final Symbol b = _symbols[offset + 3];
					 return Term.app("%", a, b);
				}
			},
			new Action() {	// [101] term = term.a PLUS term.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					final Symbol b = _symbols[offset + 3];
					 return Term.app("+", a, b);
				}
			},
			new Action() {	// [102] term = term.a MINUS term.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					final Symbol b = _symbols[offset + 3];
					 return Term.app("-", a, b);
				}
			},
			new Action() {	// [103] term = term.a SHL term.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					final Symbol b = _symbols[offset + 3];
					 return Term.app("<<", a, b);
				}
			},
			new Action() {	// [104] term = term.a SHR term.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					final Symbol b = _symbols[offset + 3];
					 return Term.app(">>", a, b);
				}
			},
			new Action() {	// [105] term = term.a LT term.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					final Symbol b = _symbols[offset + 3];
					 return Term.app("<", a, b);
				}
			},
			new Action() {	// [106] term = term.a LE term.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					final Symbol b = _symbols[offset + 3];
					 return Term.app("<=", a, b);
				}
			},
			new Action() {	// [107] term = term.a GE term.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					final Symbol b = _symbols[offset + 3];
					 return Term.app(">=",a, b);
				}
			},
			new Action() {	// [108] term = term.a GT term.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					final Symbol b = _symbols[offset + 3];
					 return Term.app(">", a, b);
				}
			},
			new Action() {	// [109] term = term.a EQ term.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					final Symbol b = _symbols[offset + 3];
					 return Term.app("==", a, b);
				}
			},
			new Action() {	// [110] term = term.a NEQ term.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					final Symbol b = _symbols[offset + 3];
					 return Term.app("!", Term.app("==", a, b));
				}
			},
			new Action() {	// [111] term = term.a AMP term.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					final Symbol b = _symbols[offset + 3];
					 return Term.app("&", a, b);
				}
			},
			new Action() {	// [112] term = term.a CARET term.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					final Symbol b = _symbols[offset + 3];
					 return Term.app("^", a, b);
				}
			},
			new Action() {	// [113] term = term.a PIPE term.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					final Symbol b = _symbols[offset + 3];
					 return Term.app("|", a, b);
				}
			},
			new Action() {	// [114] term = BANG term.a
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 2];
					 return Term.not(a);
				}
			},
			new Action() {	// [115] term = term.a AND term.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					final Symbol b = _symbols[offset + 3];
					 return Term.and(a, b);
				}
			},
			new Action() {	// [116] term = term.a OR term.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					final Symbol b = _symbols[offset + 3];
					 return Term.or(a, b);
				}
			},
			new Action() {	// [117] term = term.a QUESTION term.b COLON term.c
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					final Symbol b = _symbols[offset + 3];
					final Symbol c = _symbols[offset + 5];
					 return Term.question(a, b, c);
				}
			},
			Action.RETURN,	// [118] pred = term
			new Action() {	// [119] lpred = LPRED ID.n RPAREN COLON pred.a
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_n = _symbols[offset + 2];
					final String n = (String) _symbol_n.value;
					final Symbol _symbol_a = _symbols[offset + 5];
					final Prop a = (Prop) _symbol_a.value;
					 return new Predicate(n, a);
				}
			},
			new Action() {	// [120] mode = MODE ID.n RPAREN COLON NORW
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_n = _symbols[offset + 2];
					final String n = (String) _symbol_n.value;
					 return new Mode(n, "NoRW");
				}
			},
			new Action() {	// [121] mode = MODE ID.n RPAREN COLON NOW
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_n = _symbols[offset + 2];
					final String n = (String) _symbol_n.value;
					 return new Mode(n, "NoW");
				}
			},
			new Action() {	// [122] mode = MODE ID.n RPAREN COLON RW
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_n = _symbols[offset + 2];
					final String n = (String) _symbol_n.value;
					 return new Mode(n, "RW");
				}
			},
			new Action() {	// [123] type = VOID
				public Symbol reduce(Symbol[] _symbols, int offset) {
					 return (Symbol) Void.self();
				}
			},
			new Action() {	// [124] type = INT
				public Symbol reduce(Symbol[] _symbols, int offset) {
					 return (Symbol) SignedInt.self();
				}
			},
			new Action() {	// [125] type = CHAR
				public Symbol reduce(Symbol[] _symbols, int offset) {
					 return (Symbol) Char.self();
				}
			}
		};
	}

	protected Symbol invokeReduceAction(int rule_num, int offset) {
		return actions[rule_num].reduce(_symbols, offset);
	}
}
