package wemelt;

import beaver.*;
import java.util.ArrayList;

/**
 * This class is a LALR parser generated by
 * <a href="http://beaver.sourceforge.net">Beaver</a> v0.9.6.1
 * from the grammar specification "Parser.grammar".
 */
public class Parser extends beaver.Parser {
	static public class Terminals {
		static public final short EOF = 0;
		static public final short PLUS = 1;
		static public final short MINUS = 2;
		static public final short ID = 3;
		static public final short LPAREN = 4;
		static public final short PREFIX = 5;
		static public final short POSTFIX = 6;
		static public final short NUM = 7;
		static public final short BANG = 8;
		static public final short TILDE = 9;
		static public final short TRUE = 10;
		static public final short FALSE = 11;
		static public final short STAR = 12;
		static public final short DIV = 13;
		static public final short MOD = 14;
		static public final short SHL = 15;
		static public final short SHR = 16;
		static public final short ASHR = 17;
		static public final short LT = 18;
		static public final short LE = 19;
		static public final short GE = 20;
		static public final short GT = 21;
		static public final short EQ = 22;
		static public final short NEQ = 23;
		static public final short AMP = 24;
		static public final short CARET = 25;
		static public final short PIPE = 26;
		static public final short AND = 27;
		static public final short SEMICOLON = 28;
		static public final short OR = 29;
		static public final short COLON = 30;
		static public final short WHILE = 31;
		static public final short COMMA = 32;
		static public final short DO = 33;
		static public final short IF = 34;
		static public final short LBRACE = 35;
		static public final short FENCE = 36;
		static public final short CFENCE = 37;
		static public final short RPAREN = 38;
		static public final short RELY = 39;
		static public final short RBRACE = 40;
		static public final short ASG = 41;
		static public final short GAMMA_0 = 42;
		static public final short INVARIANT = 43;
		static public final short GAMMA = 44;
		static public final short LBRACK = 45;
		static public final short RBRACK = 46;
		static public final short GLOBAL = 47;
		static public final short LOCAL = 48;
		static public final short LPREDGUAR = 49;
		static public final short CAS = 50;
		static public final short GUARANTEE = 51;
		static public final short P_0 = 52;
		static public final short ELSE = 53;
		static public final short LPRED = 54;
		static public final short LPREDRELY = 55;
		static public final short MAPSTO = 56;
		static public final short LOW = 57;
		static public final short HIGH = 58;

		static public final String[] NAMES = {
			"EOF",
			"PLUS",
			"MINUS",
			"ID",
			"LPAREN",
			"PREFIX",
			"POSTFIX",
			"NUM",
			"BANG",
			"TILDE",
			"TRUE",
			"FALSE",
			"STAR",
			"DIV",
			"MOD",
			"SHL",
			"SHR",
			"ASHR",
			"LT",
			"LE",
			"GE",
			"GT",
			"EQ",
			"NEQ",
			"AMP",
			"CARET",
			"PIPE",
			"AND",
			"SEMICOLON",
			"OR",
			"COLON",
			"WHILE",
			"COMMA",
			"DO",
			"IF",
			"LBRACE",
			"FENCE",
			"CFENCE",
			"RPAREN",
			"RELY",
			"RBRACE",
			"ASG",
			"GAMMA_0",
			"INVARIANT",
			"GAMMA",
			"LBRACK",
			"RBRACK",
			"GLOBAL",
			"LOCAL",
			"LPREDGUAR",
			"CAS",
			"GUARANTEE",
			"P_0",
			"ELSE",
			"LPRED",
			"LPREDRELY",
			"MAPSTO",
			"LOW",
			"HIGH"
		};
	}

	static final ParsingTables PARSING_TABLES = new ParsingTables(
		"U9pjM7cSJLKS$xxtPaWOPC#OnJQsiMimmrZ7lanKrhI8DdiQfAAKIf9TfBGXIsGh5QL2efL" +
		"86rcB94NPJzzpxkzvzxxtPkxJfp$dli$lV7$dTt$Vt##SS#$ztNCV40rKGp9AOofccROayg" +
		"44YgCYab05DL4RTL4VAMY8L3H6EfgX1LgXDIgWhM5QVZvr2b4OYqJaTMNc8TFocOu2A6MYZ" +
		"48C7iSmN8j16A8KkhX5KKSalnxp$PY1r$0AUdCwXLtpvnTcFyCTQTh7K1J5N9bZRJadgKkS" +
		"Ss7qvvmVSMNE8BCS2k4gnhWpt9pn5EvsZJBGbdyMLsyyYg1W95TB7HRcT3oDQsIrHk1XzMT" +
		"48zVC9wbDnmk8nHoCmHjuqvNvkZ0N8L4THtbKGcLCGLLKTsNM8BCMwd25wjbMYB7K2Lo71c" +
		"Y4D3H1KpHNwrnZjNIiMGRQe1tcHdI7Tt8mEwChRi2B4J5l4cOFzC8jk1MtuNRSWG6uovLvZ" +
		"p3lnM0CnN3SXooCnWDuq9MfMUFm4E$8Hp61xHEOYCakBCrv1izYchf8ndFg0kRXvHmv#XeS" +
		"mgjOW8LOWiLOXgLOaGD3#v$2SgpaKx8A$YCxV#TH2WbS#L5yOWBtm4oiXXTnk9hdNq9PjlD" +
		"H1b0hgSt6zUY6ZkY9zkY0JDo8xkY3cyqiGuzmOt1w#djspxvXUU7pvbfphRdM2Asi4lf8l2" +
		"BENwPA9B9rLWaO6$1yDj7y7DWuVbkC8qveDRAVZpTdd75qnVizg88uQuXTjpmISwWuYT8Bh" +
		"esXcGFdhDr5qAZ2nB4i7bRKDDRV9j8sPvrloPrPGSwr4DyBHRXZqBkZudptbMJqqenPXlk0" +
		"iePf#IKnMXnNoCVMZLcNJCkdATyGiIPAFBc9t26Lvxwo8cFLS8sI9FcjCQTojMfnXv7E4RW" +
		"nuuIPu9XrG#ugt9W9Zfpwy36dZpiQDsOgcLKuttJ6I0uxv#eHp3dMaL#lNeC8hvP$jJIdYs" +
		"sr4D78DJETccPNfbQ9kx0KLsPRONRa2bKcM$ygcJQIdDeldX9O8HtB7yV$gntn#FttYVv5j" +
		"cR9$vdfpwaPKPnzWj5Y8vXvbSlCMFwYYFLDMysLQR7Yp1DOpRHnPERCikv2dGk6eP$XZ1mv" +
		"cf54N#rTcpjfdJ6dMMb$cB7uaAhaoCvVEGwEIg#yyobfnV6rvXw#Ai#pfhFjXCviCodrJ3O" +
		"VPntDRyoy$DRAntrYVcrL8KVOCJWy$Js7PvtiUE7pvbfphRdMYAmmpvhlIZci4ZwsZYgXuv" +
		"XeLRFX2OSIg2nXuxXL8tF66SUyfPmL9AY6s7NZOOqscueZ#vdWsXYQsJPIKzT3HXKIH$80Q" +
		"yPQ#y5wD9udvW6yyudHb7pKbr1gKMzBwKdfHoblzjV0NE4keBJJkbzuN0AY#ZXjdXfiJeZE" +
		"h$YeSJR$YSpJJu$CwdlN2cuKt2wucqrHudwpKuJtEEDyJ3n3$8MlCX$n995pyuudbcQVu$D" +
		"L82ubrYIk9pRY#S74LaJczdKXSWVkwqKiJkpFCLuW3YKobsyCSOjjBdrfcq0bDc3pJHMS9x" +
		"X8S9NW1ZRfGMl2zVKieqpX#Qqqz2RkXDdVUsOBRo#RcUpFetwK#ZhXBXTS8KY#xpILNPmZS" +
		"tdc46NTFDkfQuNVJPw5b4$OvrE44SGIx7UbV4evoFu0uUWOdx6llr5cKV#SSeJzBE8#og$K" +
		"gnCBY$yXsxo6sFJ3z4kXjE3QSa$WuNNIMmDmFbxUPnvUBsoJwrj2i2Jj5waSb1Z7nEvXd0p" +
		"s9r7dVH2LINqnzMBK1r9F3kJr5WdeIBBfMRpDDllxr7KUkMOOOVDRPBzMuhlLUVq2EQn#L7" +
		"Td7sTi#bd1Su8N12$A76C4$UjPHB2eOAnWMS4umNZ11C54mNA2zGHJ1TC46mVFZxQWyNjw2" +
		"FOK72GuJ71uS8mWVfRWo23xQ9i#sIN6D0jHNh2PxTnCfoysY7snpQPhLSiWlvqsVIsbJw3l" +
		"sPJJU6oyFVHDiVM$OR#RBSx6R7W7vFmEc#y1csv$ZixQU6kGuw7McdQDMgtC$wtgj3ghpXZ" +
		"je6d$KF#8vm7AbvGlA7og5PzonGgXjb5O1HGhYMA5K5iecocRAAoowYFAXvIDb0yexrCsg3" +
		"tgMxNRnDsbk0QAzKlje7nD#ShOrwltrBiXuzrlqt#cxAFilMpvYV9Z2EUSu0$PhC7tbE$KM" +
		"#gyEgd#3kl1wgD#4$qOvQZHtZRjEs9dPUEtQoPt3PdSCrWImwzVZ$cNeGbHIojA2oDUVXdo" +
		"7gFUdDB6Y1STQEj0lJCbW$qCbk0ClbdRiz#U$KuytubwQqeQuwRnV1fpfN6$acQ#FhL4Ir$" +
		"R2nXRAlq34YNe3HBV$onMFlr5tvRIZjAC$MR4ffGkrBKq$XUn1CQt");

	private final Action[] actions;

	public Parser() {
		super(PARSING_TABLES);
		actions = new Action[] {
			new Action() {	// [0] unit = defs.v RELY COLON exprs.r GUARANTEE COLON exprs.g statements.s
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_v = _symbols[offset + 1];
					final ArrayList _list_v = (ArrayList) _symbol_v.value;
					final Definition[] v = _list_v == null ? new Definition[0] : (Definition[]) _list_v.toArray(new Definition[_list_v.size()]);
					final Symbol _symbol_r = _symbols[offset + 4];
					final ArrayList _list_r = (ArrayList) _symbol_r.value;
					final Expression[] r = _list_r == null ? new Expression[0] : (Expression[]) _list_r.toArray(new Expression[_list_r.size()]);
					final Symbol _symbol_g = _symbols[offset + 7];
					final ArrayList _list_g = (ArrayList) _symbol_g.value;
					final Expression[] g = _list_g == null ? new Expression[0] : (Expression[]) _list_g.toArray(new Expression[_list_g.size()]);
					final Symbol _symbol_s = _symbols[offset + 8];
					final ArrayList _list_s = (ArrayList) _symbol_s.value;
					final Statement[] s = _list_s == null ? new Statement[0] : (Statement[]) _list_s.toArray(new Statement[_list_s.size()]);
					 return new Parsed(v, r, g, s);
				}
			},
			new Action() {	// [1] unit = defs.v RELY COLON exprs.r GUARANTEE COLON exprs.g GAMMA_0 COLON gamma_mappings.f statements.s
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_v = _symbols[offset + 1];
					final ArrayList _list_v = (ArrayList) _symbol_v.value;
					final Definition[] v = _list_v == null ? new Definition[0] : (Definition[]) _list_v.toArray(new Definition[_list_v.size()]);
					final Symbol _symbol_r = _symbols[offset + 4];
					final ArrayList _list_r = (ArrayList) _symbol_r.value;
					final Expression[] r = _list_r == null ? new Expression[0] : (Expression[]) _list_r.toArray(new Expression[_list_r.size()]);
					final Symbol _symbol_g = _symbols[offset + 7];
					final ArrayList _list_g = (ArrayList) _symbol_g.value;
					final Expression[] g = _list_g == null ? new Expression[0] : (Expression[]) _list_g.toArray(new Expression[_list_g.size()]);
					final Symbol _symbol_f = _symbols[offset + 10];
					final ArrayList _list_f = (ArrayList) _symbol_f.value;
					final GammaMapping[] f = _list_f == null ? new GammaMapping[0] : (GammaMapping[]) _list_f.toArray(new GammaMapping[_list_f.size()]);
					final Symbol _symbol_s = _symbols[offset + 11];
					final ArrayList _list_s = (ArrayList) _symbol_s.value;
					final Statement[] s = _list_s == null ? new Statement[0] : (Statement[]) _list_s.toArray(new Statement[_list_s.size()]);
					 return new Parsed(v, r, g, f, s);
				}
			},
			new Action() {	// [2] unit = defs.v RELY COLON exprs.r GUARANTEE COLON exprs.g P_0 COLON exprs.p statements.s
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_v = _symbols[offset + 1];
					final ArrayList _list_v = (ArrayList) _symbol_v.value;
					final Definition[] v = _list_v == null ? new Definition[0] : (Definition[]) _list_v.toArray(new Definition[_list_v.size()]);
					final Symbol _symbol_r = _symbols[offset + 4];
					final ArrayList _list_r = (ArrayList) _symbol_r.value;
					final Expression[] r = _list_r == null ? new Expression[0] : (Expression[]) _list_r.toArray(new Expression[_list_r.size()]);
					final Symbol _symbol_g = _symbols[offset + 7];
					final ArrayList _list_g = (ArrayList) _symbol_g.value;
					final Expression[] g = _list_g == null ? new Expression[0] : (Expression[]) _list_g.toArray(new Expression[_list_g.size()]);
					final Symbol _symbol_p = _symbols[offset + 10];
					final ArrayList _list_p = (ArrayList) _symbol_p.value;
					final Expression[] p = _list_p == null ? new Expression[0] : (Expression[]) _list_p.toArray(new Expression[_list_p.size()]);
					final Symbol _symbol_s = _symbols[offset + 11];
					final ArrayList _list_s = (ArrayList) _symbol_s.value;
					final Statement[] s = _list_s == null ? new Statement[0] : (Statement[]) _list_s.toArray(new Statement[_list_s.size()]);
					 return new Parsed(v, r, g, p, s);
				}
			},
			new Action() {	// [3] unit = defs.v RELY COLON exprs.r GUARANTEE COLON exprs.g P_0 COLON exprs.p GAMMA_0 COLON gamma_mappings.f statements.s
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_v = _symbols[offset + 1];
					final ArrayList _list_v = (ArrayList) _symbol_v.value;
					final Definition[] v = _list_v == null ? new Definition[0] : (Definition[]) _list_v.toArray(new Definition[_list_v.size()]);
					final Symbol _symbol_r = _symbols[offset + 4];
					final ArrayList _list_r = (ArrayList) _symbol_r.value;
					final Expression[] r = _list_r == null ? new Expression[0] : (Expression[]) _list_r.toArray(new Expression[_list_r.size()]);
					final Symbol _symbol_g = _symbols[offset + 7];
					final ArrayList _list_g = (ArrayList) _symbol_g.value;
					final Expression[] g = _list_g == null ? new Expression[0] : (Expression[]) _list_g.toArray(new Expression[_list_g.size()]);
					final Symbol _symbol_p = _symbols[offset + 10];
					final ArrayList _list_p = (ArrayList) _symbol_p.value;
					final Expression[] p = _list_p == null ? new Expression[0] : (Expression[]) _list_p.toArray(new Expression[_list_p.size()]);
					final Symbol _symbol_f = _symbols[offset + 13];
					final ArrayList _list_f = (ArrayList) _symbol_f.value;
					final GammaMapping[] f = _list_f == null ? new GammaMapping[0] : (GammaMapping[]) _list_f.toArray(new GammaMapping[_list_f.size()]);
					final Symbol _symbol_s = _symbols[offset + 14];
					final ArrayList _list_s = (ArrayList) _symbol_s.value;
					final Statement[] s = _list_s == null ? new Statement[0] : (Statement[]) _list_s.toArray(new Statement[_list_s.size()]);
					 return new Parsed(v, r, g, p, f, s);
				}
			},
			new Action() {	// [4] exprs = expr
				public Symbol reduce(Symbol[] _symbols, int offset) {
					ArrayList lst = new ArrayList(); lst.add(_symbols[offset + 1].value); return new Symbol(lst);
				}
			},
			new Action() {	// [5] exprs = exprs COMMA expr
				public Symbol reduce(Symbol[] _symbols, int offset) {
					((ArrayList) _symbols[offset + 1].value).add(_symbols[offset + 3].value); return _symbols[offset + 1];
				}
			},
			new Action() {	// [6] statement = SEMICOLON
				public Symbol reduce(Symbol[] _symbols, int offset) {
					 return Block.empty();
				}
			},
			Action.RETURN,	// [7] statement = statement1
			Action.RETURN,	// [8] statement2 = statement1
			new Action() {	// [9] lst$statement = statement
				public Symbol reduce(Symbol[] _symbols, int offset) {
					ArrayList lst = new ArrayList(); lst.add(_symbols[offset + 1].value); return new Symbol(lst);
				}
			},
			new Action() {	// [10] lst$statement = lst$statement statement
				public Symbol reduce(Symbol[] _symbols, int offset) {
					((ArrayList) _symbols[offset + 1].value).add(_symbols[offset + 2].value); return _symbols[offset + 1];
				}
			},
			Action.NONE,  	// [11] opt$lst$statement = 
			Action.RETURN,	// [12] opt$lst$statement = lst$statement
			Action.RETURN,	// [13] statements = opt$lst$statement
			new Action() {	// [14] lst$statement2 = statement2
				public Symbol reduce(Symbol[] _symbols, int offset) {
					ArrayList lst = new ArrayList(); lst.add(_symbols[offset + 1].value); return new Symbol(lst);
				}
			},
			new Action() {	// [15] lst$statement2 = lst$statement2 statement2
				public Symbol reduce(Symbol[] _symbols, int offset) {
					((ArrayList) _symbols[offset + 1].value).add(_symbols[offset + 2].value); return _symbols[offset + 1];
				}
			},
			Action.NONE,  	// [16] opt$lst$statement2 = 
			Action.RETURN,	// [17] opt$lst$statement2 = lst$statement2
			Action.RETURN,	// [18] statements2 = opt$lst$statement2
			new Action() {	// [19] definition = LOCAL ID.n
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_n = _symbols[offset + 2];
					final String n = (String) _symbol_n.value;
					 return new LocalVarDef(n);
				}
			},
			new Action() {	// [20] definition = GLOBAL ID.n COLON lpred.l
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_n = _symbols[offset + 2];
					final String n = (String) _symbol_n.value;
					final Symbol _symbol_l = _symbols[offset + 4];
					final Expression l = (Expression) _symbol_l.value;
					 return new GlobalVarDef(n, l, false);
				}
			},
			new Action() {	// [21] definition = GLOBAL ID.n COLON lpredr.r lpredg.g
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_n = _symbols[offset + 2];
					final String n = (String) _symbol_n.value;
					final Symbol _symbol_r = _symbols[offset + 4];
					final Expression r = (Expression) _symbol_r.value;
					final Symbol _symbol_g = _symbols[offset + 5];
					final Expression g = (Expression) _symbol_g.value;
					 return new GlobalVarDef(n, r, g, false);
				}
			},
			new Action() {	// [22] lst$definition = definition
				public Symbol reduce(Symbol[] _symbols, int offset) {
					ArrayList lst = new ArrayList(); lst.add(_symbols[offset + 1].value); return new Symbol(lst);
				}
			},
			new Action() {	// [23] lst$definition = lst$definition definition
				public Symbol reduce(Symbol[] _symbols, int offset) {
					((ArrayList) _symbols[offset + 1].value).add(_symbols[offset + 2].value); return _symbols[offset + 1];
				}
			},
			Action.NONE,  	// [24] opt$lst$definition = 
			Action.RETURN,	// [25] opt$lst$definition = lst$definition
			Action.RETURN,	// [26] defs = opt$lst$definition
			new Action() {	// [27] statement1 = LBRACE statements2.ss RBRACE
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_ss = _symbols[offset + 2];
					final ArrayList _list_ss = (ArrayList) _symbol_ss.value;
					final Statement[] ss = _list_ss == null ? new Statement[0] : (Statement[]) _list_ss.toArray(new Statement[_list_ss.size()]);
					 return new Block(ss);
				}
			},
			new Action() {	// [28] statement1 = ID.n ASG expr.b SEMICOLON
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_n = _symbols[offset + 1];
					final String n = (String) _symbol_n.value;
					final Symbol _symbol_b = _symbols[offset + 3];
					final Expression b = (Expression) _symbol_b.value;
					 return new Assignment(n, b);
				}
			},
			new Action() {	// [29] statement1 = ID.n ASG CAS LPAREN ID.x COMMA expr.y COMMA expr.z RPAREN SEMICOLON
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_n = _symbols[offset + 1];
					final String n = (String) _symbol_n.value;
					final Symbol _symbol_x = _symbols[offset + 5];
					final String x = (String) _symbol_x.value;
					final Symbol _symbol_y = _symbols[offset + 7];
					final Expression y = (Expression) _symbol_y.value;
					final Symbol _symbol_z = _symbols[offset + 9];
					final Expression z = (Expression) _symbol_z.value;
					 return new CompareAndSwap(n, x, y, z);
				}
			},
			new Action() {	// [30] statement1 = ID.n LBRACK expr.i RBRACK ASG expr.b SEMICOLON
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_n = _symbols[offset + 1];
					final String n = (String) _symbol_n.value;
					final Symbol _symbol_i = _symbols[offset + 3];
					final Expression i = (Expression) _symbol_i.value;
					final Symbol _symbol_b = _symbols[offset + 6];
					final Expression b = (Expression) _symbol_b.value;
					 return new ArrayAssignment(n, i, b);
				}
			},
			new Action() {	// [31] statement1 = FENCE SEMICOLON
				public Symbol reduce(Symbol[] _symbols, int offset) {
					 return Fence.self();
				}
			},
			new Action() {	// [32] statement1 = CFENCE SEMICOLON
				public Symbol reduce(Symbol[] _symbols, int offset) {
					 return ControlFence.self();
				}
			},
			new Action() {	// [33] statement1 = IF LPAREN expr.a RPAREN statement.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_a = _symbols[offset + 3];
					final Expression a = (Expression) _symbol_a.value;
					final Symbol _symbol_b = _symbols[offset + 5];
					final Statement b = (Statement) _symbol_b.value;
					 return new If(a, b);
				}
			},
			new Action() {	// [34] statement1 = IF LPAREN expr.a RPAREN statement.b ELSE statement.c
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_a = _symbols[offset + 3];
					final Expression a = (Expression) _symbol_a.value;
					final Symbol _symbol_b = _symbols[offset + 5];
					final Statement b = (Statement) _symbol_b.value;
					final Symbol _symbol_c = _symbols[offset + 7];
					final Statement c = (Statement) _symbol_c.value;
					 return new If(a, b, c);
				}
			},
			new Action() {	// [35] statement1 = WHILE LPAREN expr.a RPAREN INVARIANT COLON exprs.i GAMMA COLON gamma_mappings.g statement.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_a = _symbols[offset + 3];
					final Expression a = (Expression) _symbol_a.value;
					final Symbol _symbol_i = _symbols[offset + 7];
					final ArrayList _list_i = (ArrayList) _symbol_i.value;
					final Expression[] i = _list_i == null ? new Expression[0] : (Expression[]) _list_i.toArray(new Expression[_list_i.size()]);
					final Symbol _symbol_g = _symbols[offset + 10];
					final ArrayList _list_g = (ArrayList) _symbol_g.value;
					final GammaMapping[] g = _list_g == null ? new GammaMapping[0] : (GammaMapping[]) _list_g.toArray(new GammaMapping[_list_g.size()]);
					final Symbol _symbol_b = _symbols[offset + 11];
					final Statement b = (Statement) _symbol_b.value;
					 return new While(a, i, g, b);
				}
			},
			new Action() {	// [36] statement1 = DO INVARIANT COLON exprs.i GAMMA COLON gamma_mappings.g statement.b WHILE LPAREN expr.a RPAREN
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_i = _symbols[offset + 4];
					final ArrayList _list_i = (ArrayList) _symbol_i.value;
					final Expression[] i = _list_i == null ? new Expression[0] : (Expression[]) _list_i.toArray(new Expression[_list_i.size()]);
					final Symbol _symbol_g = _symbols[offset + 7];
					final ArrayList _list_g = (ArrayList) _symbol_g.value;
					final GammaMapping[] g = _list_g == null ? new GammaMapping[0] : (GammaMapping[]) _list_g.toArray(new GammaMapping[_list_g.size()]);
					final Symbol _symbol_b = _symbols[offset + 8];
					final Statement b = (Statement) _symbol_b.value;
					final Symbol _symbol_a = _symbols[offset + 11];
					final Expression a = (Expression) _symbol_a.value;
					 return new DoWhile(a, i, g, b);
				}
			},
			new Action() {	// [37] statement1 = error SEMICOLON
				public Symbol reduce(Symbol[] _symbols, int offset) {
					 return Malformed.self();
				}
			},
			Action.RETURN,	// [38] expr = PREFIX
			Action.RETURN,	// [39] expr = POSTFIX
			new Action() {	// [40] expr = ID.n
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_n = _symbols[offset + 1];
					final String n = (String) _symbol_n.value;
					 return new Id(n);
				}
			},
			new Action() {	// [41] expr = ID.n LBRACK expr.i RBRACK
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_n = _symbols[offset + 1];
					final String n = (String) _symbol_n.value;
					final Symbol _symbol_i = _symbols[offset + 3];
					final Expression i = (Expression) _symbol_i.value;
					 return new Access(n, i);
				}
			},
			new Action() {	// [42] expr = NUM.n
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_n = _symbols[offset + 1];
					final Integer n = (Integer) _symbol_n.value;
					 return new Lit(n);
				}
			},
			new Action() {	// [43] expr = PLUS expr.a
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_a = _symbols[offset + 2];
					final Expression a = (Expression) _symbol_a.value;
					 return new PreOp("+", a);
				}
			},
			new Action() {	// [44] expr = MINUS expr.a
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_a = _symbols[offset + 2];
					final Expression a = (Expression) _symbol_a.value;
					 return new PreOp("-", a);
				}
			},
			new Action() {	// [45] expr = BANG expr.a
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_a = _symbols[offset + 2];
					final Expression a = (Expression) _symbol_a.value;
					 return new PreOp("!", a);
				}
			},
			new Action() {	// [46] expr = TILDE expr.a
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_a = _symbols[offset + 2];
					final Expression a = (Expression) _symbol_a.value;
					 return new PreOp("~", a);
				}
			},
			new Action() {	// [47] expr = expr.a STAR expr.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_a = _symbols[offset + 1];
					final Expression a = (Expression) _symbol_a.value;
					final Symbol _symbol_b = _symbols[offset + 3];
					final Expression b = (Expression) _symbol_b.value;
					 return new BinOp("*", a, b);
				}
			},
			new Action() {	// [48] expr = expr.a DIV expr.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_a = _symbols[offset + 1];
					final Expression a = (Expression) _symbol_a.value;
					final Symbol _symbol_b = _symbols[offset + 3];
					final Expression b = (Expression) _symbol_b.value;
					 return new BinOp("/", a, b);
				}
			},
			new Action() {	// [49] expr = expr.a MOD expr.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_a = _symbols[offset + 1];
					final Expression a = (Expression) _symbol_a.value;
					final Symbol _symbol_b = _symbols[offset + 3];
					final Expression b = (Expression) _symbol_b.value;
					 return new BinOp("%", a, b);
				}
			},
			new Action() {	// [50] expr = expr.a PLUS expr.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_a = _symbols[offset + 1];
					final Expression a = (Expression) _symbol_a.value;
					final Symbol _symbol_b = _symbols[offset + 3];
					final Expression b = (Expression) _symbol_b.value;
					 return new BinOp("+", a, b);
				}
			},
			new Action() {	// [51] expr = expr.a MINUS expr.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_a = _symbols[offset + 1];
					final Expression a = (Expression) _symbol_a.value;
					final Symbol _symbol_b = _symbols[offset + 3];
					final Expression b = (Expression) _symbol_b.value;
					 return new BinOp("-", a, b);
				}
			},
			new Action() {	// [52] expr = expr.a SHL expr.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_a = _symbols[offset + 1];
					final Expression a = (Expression) _symbol_a.value;
					final Symbol _symbol_b = _symbols[offset + 3];
					final Expression b = (Expression) _symbol_b.value;
					 return new BinOp("<<",a, b);
				}
			},
			new Action() {	// [53] expr = expr.a SHR expr.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_a = _symbols[offset + 1];
					final Expression a = (Expression) _symbol_a.value;
					final Symbol _symbol_b = _symbols[offset + 3];
					final Expression b = (Expression) _symbol_b.value;
					 return new BinOp(">>",a, b);
				}
			},
			new Action() {	// [54] expr = expr.a ASHR expr.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_a = _symbols[offset + 1];
					final Expression a = (Expression) _symbol_a.value;
					final Symbol _symbol_b = _symbols[offset + 3];
					final Expression b = (Expression) _symbol_b.value;
					 return new BinOp(">>>",a, b);
				}
			},
			new Action() {	// [55] expr = expr.a LT expr.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_a = _symbols[offset + 1];
					final Expression a = (Expression) _symbol_a.value;
					final Symbol _symbol_b = _symbols[offset + 3];
					final Expression b = (Expression) _symbol_b.value;
					 return new BinOp("<", a, b);
				}
			},
			new Action() {	// [56] expr = expr.a LE expr.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_a = _symbols[offset + 1];
					final Expression a = (Expression) _symbol_a.value;
					final Symbol _symbol_b = _symbols[offset + 3];
					final Expression b = (Expression) _symbol_b.value;
					 return new BinOp("<=",a, b);
				}
			},
			new Action() {	// [57] expr = expr.a GE expr.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_a = _symbols[offset + 1];
					final Expression a = (Expression) _symbol_a.value;
					final Symbol _symbol_b = _symbols[offset + 3];
					final Expression b = (Expression) _symbol_b.value;
					 return new BinOp(">=",a, b);
				}
			},
			new Action() {	// [58] expr = expr.a GT expr.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_a = _symbols[offset + 1];
					final Expression a = (Expression) _symbol_a.value;
					final Symbol _symbol_b = _symbols[offset + 3];
					final Expression b = (Expression) _symbol_b.value;
					 return new BinOp(">", a, b);
				}
			},
			new Action() {	// [59] expr = expr.a EQ expr.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_a = _symbols[offset + 1];
					final Expression a = (Expression) _symbol_a.value;
					final Symbol _symbol_b = _symbols[offset + 3];
					final Expression b = (Expression) _symbol_b.value;
					 return new BinOp("==",a, b);
				}
			},
			new Action() {	// [60] expr = expr.a NEQ expr.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_a = _symbols[offset + 1];
					final Expression a = (Expression) _symbol_a.value;
					final Symbol _symbol_b = _symbols[offset + 3];
					final Expression b = (Expression) _symbol_b.value;
					 return new BinOp("!=",a, b);
				}
			},
			new Action() {	// [61] expr = expr.a AMP expr.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_a = _symbols[offset + 1];
					final Expression a = (Expression) _symbol_a.value;
					final Symbol _symbol_b = _symbols[offset + 3];
					final Expression b = (Expression) _symbol_b.value;
					 return new BinOp("&", a, b);
				}
			},
			new Action() {	// [62] expr = expr.a CARET expr.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_a = _symbols[offset + 1];
					final Expression a = (Expression) _symbol_a.value;
					final Symbol _symbol_b = _symbols[offset + 3];
					final Expression b = (Expression) _symbol_b.value;
					 return new BinOp("^", a, b);
				}
			},
			new Action() {	// [63] expr = expr.a PIPE expr.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_a = _symbols[offset + 1];
					final Expression a = (Expression) _symbol_a.value;
					final Symbol _symbol_b = _symbols[offset + 3];
					final Expression b = (Expression) _symbol_b.value;
					 return new BinOp("|", a, b);
				}
			},
			new Action() {	// [64] expr = expr.a AND expr.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_a = _symbols[offset + 1];
					final Expression a = (Expression) _symbol_a.value;
					final Symbol _symbol_b = _symbols[offset + 3];
					final Expression b = (Expression) _symbol_b.value;
					 return new BinOp("&&",a, b);
				}
			},
			new Action() {	// [65] expr = expr.a OR expr.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_a = _symbols[offset + 1];
					final Expression a = (Expression) _symbol_a.value;
					final Symbol _symbol_b = _symbols[offset + 3];
					final Expression b = (Expression) _symbol_b.value;
					 return new BinOp("||",a, b);
				}
			},
			new Action() {	// [66] expr = LPAREN expr.e RPAREN
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_e = _symbols[offset + 2];
					final Expression e = (Expression) _symbol_e.value;
					 return (Symbol) e;
				}
			},
			new Action() {	// [67] expr = TRUE
				public Symbol reduce(Symbol[] _symbols, int offset) {
					 return new Const("True");
				}
			},
			new Action() {	// [68] expr = FALSE
				public Symbol reduce(Symbol[] _symbols, int offset) {
					 return new Const("False");
				}
			},
			new Action() {	// [69] lpred = LPRED COLON expr.a
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_a = _symbols[offset + 3];
					final Expression a = (Expression) _symbol_a.value;
					 return (Symbol) a;
				}
			},
			new Action() {	// [70] lpredr = LPREDRELY COLON expr.a
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_a = _symbols[offset + 3];
					final Expression a = (Expression) _symbol_a.value;
					 return (Symbol) a;
				}
			},
			new Action() {	// [71] lpredg = LPREDGUAR COLON expr.a
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_a = _symbols[offset + 3];
					final Expression a = (Expression) _symbol_a.value;
					 return (Symbol) a;
				}
			},
			new Action() {	// [72] gamma_mappings = gamma_mapping
				public Symbol reduce(Symbol[] _symbols, int offset) {
					ArrayList lst = new ArrayList(); lst.add(_symbols[offset + 1].value); return new Symbol(lst);
				}
			},
			new Action() {	// [73] gamma_mappings = gamma_mappings COMMA gamma_mapping
				public Symbol reduce(Symbol[] _symbols, int offset) {
					((ArrayList) _symbols[offset + 1].value).add(_symbols[offset + 3].value); return _symbols[offset + 1];
				}
			},
			new Action() {	// [74] gamma_mapping = ID.n MAPSTO security.s
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_n = _symbols[offset + 1];
					final String n = (String) _symbol_n.value;
					final Symbol _symbol_s = _symbols[offset + 3];
					final Security s = (Security) _symbol_s.value;
					 return new GammaMapping(n, s);
				}
			},
			new Action() {	// [75] security = LOW
				public Symbol reduce(Symbol[] _symbols, int offset) {
					 return Low.instance();
				}
			},
			new Action() {	// [76] security = HIGH
				public Symbol reduce(Symbol[] _symbols, int offset) {
					 return High.instance();
				}
			}
		};
	}

	protected Symbol invokeReduceAction(int rule_num, int offset) {
		return actions[rule_num].reduce(_symbols, offset);
	}
}
