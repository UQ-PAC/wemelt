package wemelt;

import beaver.*;
import java.util.ArrayList;

/**
 * This class is a LALR parser generated by
 * <a href="http://beaver.sourceforge.net">Beaver</a> v0.9.6.1
 * from the grammar specification "Parser.grammar".
 */
public class Parser extends beaver.Parser {
	static public class Terminals {
		static public final short EOF = 0;
		static public final short PLUS = 1;
		static public final short MINUS = 2;
		static public final short ID = 3;
		static public final short LPAREN = 4;
		static public final short NUM = 5;
		static public final short BANG = 6;
		static public final short TILDE = 7;
		static public final short TRUE = 8;
		static public final short FALSE = 9;
		static public final short STAR = 10;
		static public final short DIV = 11;
		static public final short MOD = 12;
		static public final short SHL = 13;
		static public final short SHR = 14;
		static public final short ASHR = 15;
		static public final short PREFIX = 16;
		static public final short POSTFIX = 17;
		static public final short LT = 18;
		static public final short LE = 19;
		static public final short GE = 20;
		static public final short GT = 21;
		static public final short EQ = 22;
		static public final short NEQ = 23;
		static public final short PRIMEID = 24;
		static public final short AMP = 25;
		static public final short CARET = 26;
		static public final short PIPE = 27;
		static public final short AND = 28;
		static public final short OR = 29;
		static public final short COLON = 30;
		static public final short COMMA = 31;
		static public final short SEMICOLON = 32;
		static public final short WHILE = 33;
		static public final short DO = 34;
		static public final short IF = 35;
		static public final short LBRACE = 36;
		static public final short FENCE = 37;
		static public final short CFENCE = 38;
		static public final short RPAREN = 39;
		static public final short G_VAR = 40;
		static public final short P_INV = 41;
		static public final short RBRACE = 42;
		static public final short ASG = 43;
		static public final short INVARIANT = 44;
		static public final short GAMMA = 45;
		static public final short GLOBAL = 46;
		static public final short R_VAR = 47;
		static public final short GAMMA_0 = 48;
		static public final short LOCAL = 49;
		static public final short LPREDGUAR = 50;
		static public final short CAS = 51;
		static public final short P_0 = 52;
		static public final short LBRACK = 53;
		static public final short RBRACK = 54;
		static public final short ELSE = 55;
		static public final short LPRED = 56;
		static public final short LPREDRELY = 57;
		static public final short MAPSTO = 58;

		static public final String[] NAMES = {
			"EOF",
			"PLUS",
			"MINUS",
			"ID",
			"LPAREN",
			"NUM",
			"BANG",
			"TILDE",
			"TRUE",
			"FALSE",
			"STAR",
			"DIV",
			"MOD",
			"SHL",
			"SHR",
			"ASHR",
			"PREFIX",
			"POSTFIX",
			"LT",
			"LE",
			"GE",
			"GT",
			"EQ",
			"NEQ",
			"PRIMEID",
			"AMP",
			"CARET",
			"PIPE",
			"AND",
			"OR",
			"COLON",
			"COMMA",
			"SEMICOLON",
			"WHILE",
			"DO",
			"IF",
			"LBRACE",
			"FENCE",
			"CFENCE",
			"RPAREN",
			"G_VAR",
			"P_INV",
			"RBRACE",
			"ASG",
			"INVARIANT",
			"GAMMA",
			"GLOBAL",
			"R_VAR",
			"GAMMA_0",
			"LOCAL",
			"LPREDGUAR",
			"CAS",
			"P_0",
			"LBRACK",
			"RBRACK",
			"ELSE",
			"LPRED",
			"LPREDRELY",
			"MAPSTO"
		};
	}

	static final ParsingTables PARSING_TABLES = new ParsingTables(
		"U9pjMGbuLSKPFU##X4H0b288KfAeHJP1DWc5i2EGi2$kjThQ5YkMrQMA2xLQhQoYBE82Bko" +
		"BA0WkW0Y8YCege0WQ0WWgcsm2WjCpS$#yDtEJzo3zAAKrDz#vP#xSEV$$ppzpvyxB1P97e0" +
		"pAudpy0XV8EIny4Nw952p2EKZ39VWLBaDbLCKgN8uQg8dQgAk#mc$mMoHWCTOZ4LtnALhW6" +
		"bo76t0BVey$O3f6ua#u3RVZ3lH4RwNG5tVYRlmLzndbrSZ2GhGHZQsSWPss4XijvKoZNOJN" +
		"qKKqJmIq1npjRalx9eORTIOcOZR6eIsUmmkEUX7UTjJPblfSezrClvqPzo9yZASTRJ8wEVt" +
		"zAOysjj#ZEExu7Ht8rRCcLw#OymH7kGER76LnIrd2QBLcbZc$WvS3sgySxUAeLdrfjETnnD" +
		"TZBafoTASuscKevMXBMtulDDhlK0wVqyUtA8zt0txtEjeAbZORsyoSt87zn26aOXykTkRaf" +
		"QZepCbAqJc9AiPpDVKzgkCAZbGjVEruheCh7SyDBCyPQ8ocQ6wykoDbULVxr0Z7UtlBEvNg" +
		"EtJ3jRWUD#8ctEp4$JlSwYZ$w2hH7Nz63$m5lT07$HpbNRZ7KTvhANL$##Dl#3iUnMFu9uO" +
		"u$HsAOKv$dmpCgwSm0gFm3CRWHJplA5$2M4SvFg2SXCcOYcbu5QznTjlADp37KRuLKCvd#t" +
		"bOWFVmWJhXA3$Y7Vi9EcufTOPMgirOYtNOWC$mXPEX77pfP2WdaY7jCOUpQWksOZk#OTdsc" +
		"8rTJgo78nwrlptudksr#Y3Fjhzi$E3uEoB#jBSVyHE0OpW1VTZUz65xWtZJljp3zgKFsnUC" +
		"B#t9FKxkgU1#2kublWzjp$KHnvxQRsgwY4szwkPdSuaLTqUMEn3jY1M1frWV2XxFlhqrIC9" +
		"gLWt6qfXv6827yI0UnqDu1F$0G0noCd8$7WZqGD$DxK7yV4MFmVbuiG$jfR15OOl25Z#l5b" +
		"rYjOYiYx5jsEkUMQNKxeZTuBgOLxtyhEt5heZTOe5U$1eDKG$DK1#Dq0GjSLK#DT4ZNP#S2" +
		"D8BR24OmQbPqFlmzoCn545hjFelnr3qB8ZXGua11OZ1jV39ls4XkbT95$Rt0VzR5g8xabmB" +
		"$fxZRBPW7$QEKPVJdTsONGwsHCoMzYxDBzlxiE2ExTHQXhXtBChPNbpELOJFvU$iy$YxiGN" +
		"zbs84fHdRXUnnESPIdj5KO4kjJU4lp1gSfTNugxIIest3NwMs5fPMAzEOjyRCdEtTLwPo5s" +
		"qhhx2KrOrMnnKMJQK2Q5F5yyNS2L$AlN15xeRZzJVLKeUDjZ9PnwrRkfvJk6B4wc$u97xhS" +
		"pRPsdenScLdp5SsvGoqbSqjPGEZjPMLucepyenk1aUy1aSo8y$ejcPTB6s6qROZTp0#CWhW" +
		"DrN6IBVnjPK9MvrnKiyPpBrk5SxZERxM$ui$Kk2lRzj2rS18LMN6ed#sKb$7UfQqik5fKIO" +
		"uoZ2p6L#PHbGpkhI0ppH7cHvG9h35vURfJuayYRvIrzhAb3pACBEhxUjVfUuJ58wxOZJahC" +
		"nYcp1RfZZAX83FX8ZIzvZAkTJGn9eGM2tQExhQZYx5jDVglBgKVFCgew6KrYeUjifSMofUH" +
		"LJAEKv1TMOqfrbXykCgujZZNbRNX7sRUWNBrsQcfUh8ScUYAv7gFiL6buMsFFlsEg4ckf2x" +
		"eMxCA7IyOOvz8lUqIKZ6ENR$#6uk6Rj$yVDbvQTENYzE$kYbi4LXYy8MFwyM2CTgaRiknhR" +
		"Xx5xyLQfgn6vWNSn7NVF$eXTneaPPSxOZA5jG2taYE2KB$ZuyDmRpgx5LOGovCKHidXaBaN" +
		"UvFnzotzQ55lxJ5fHrE3igtRAiiwCAxAvSrHbjoTi3ODQCWyHNB7f0#3r2VvkxadYC60uKQ" +
		"KIUJimSuFy7PZRhRgN#SV8TVbsHHuG72u#dpIFa6UGVoKk1f0V8Ayala7UGtoNl0vARifnC" +
		"RaKkIRwQN8Ly8xasu#bCpYBVI#vAhaJkmN0FaUyaC#QaGUI1v17ahZg6NB1kkl0SuHN26uJ" +
		"twcovcj1eeeTRbxYSTNVB$GSPU$NSUvGVPLn3MApWtm#l4TugVD3dX4IO$xubb25t8#k#P9" +
		"FhixyXSYRv4l8DvDl9x6ToR$Bzv8V8WycFafd3y2Zog#G9v8NaUkJLv1Ba7ERX2$81Ckyd9" +
		"f1xsVsHFfKMlamuNRYDyFKyDGZaPXknYw2lHCQ8wyZzoVUmBbjq#ji2noAqWUNdMPubskt2" +
		"kttM7teJP$2qYc2VGvl98#LUMTxZ7C4Urk$dDVEJn3d5t$T8FfzruraN9b8v5Wl5xWbU5#V" +
		"zShnWBhrI1FETH4VUHGJdTI9zXOgBZmfMlnP5oruQssqXDhBSXAXCjAGVZhlNGNyIO7i#Cw" +
		"7ZlAx12nbdxnhXQmdzt71Eyaq2hp5nCyiSIu$ptEjESFozddxx8fpteQgCknOvqug3#VVq7" +
		"B#5u7E1PcHjW$aDyHdn#X2S4ru$uYvY6C6vukdvoNdaCGyUvsMHEcJE3syeo#n7g7lKHzYU" +
		"nvjulxzr$Gclv$ljC26gmLfXUOQmHNYdy1xX$SA79ST5X2yGBYCipqqeHRYYS3NX6i8rXMi" +
		"9rn5kA9oH6sCqrb0BuKpXBE6smks26eavv5w7omRktnJmqzCgznBkBTn7kAzmF#7xXFiBFo" +
		"pyXF10uK72ihw6XWWF5HucF4fujF1OuOdvzp4qINYoy1JXgSBJyjDP#dd2ImBrIwtoifFOM" +
		"Eqp97QCiUxbs6qv7tFNZstHDj3F#cpN9fPRPVqbOsxqsdF6DNPSMCUvhwnhhaz9QMAZlDlM" +
		"An73nXQhFCugBn1TNU46DWTix9DxTQowOz6olvP9kKIqxDrcbQsv6NqFw3r0h4CDDMUk7Me" +
		"QCPMOGamc9X4J2RvN5DTWzGhnCl4IyI8nZXXBy1sbkFQhvuXdYJ5gbdfTlSRIJ89lBiMLNq" +
		"qtVfvHezKeKpgWVb27JMcJEUzHXoGYli$KXyGouWE2UmhrFh64M4mi8hWNK0i9lZVK0c8#C" +
		"OzuXtYRU8juavYhLgjLQgLQmJBNEFKnyH5XlgghEUeDDJjFHZPQvS#9puWDaPhrnBeycYF2" +
		"dyR8ybfYZHgcZggzwc0#zu$ftHCvc$XMwhunvntcl9KO7cdzf7hAy7PYfobzRSuvvhpDd9y" +
		"svv6Yu3iEVRaJIIII1SNGcXEZDVUuRSXjo4t86fd4LGQU#OxRYkMMH4S33zof4I5q9R9udS" +
		"LTSXPjPt6Vd4NRKIvA54Cdjkl4TlghTXUMsnADp1Uf1A8OaKHuWaIvrlN5JLr3jdVX1H0#p" +
		"V3zP3Zm0WYVPlX#Eh3SZcXFDEDrCt9JvgG5o$hhONEYyRy0Da28bW==");

	private final Action[] actions;

	public Parser() {
		super(PARSING_TABLES);
		actions = new Action[] {
			new Action() {	// [0] unit = defs.v P_INV COLON exprs.r statements.s
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_v = _symbols[offset + 1];
					final ArrayList _list_v = (ArrayList) _symbol_v.value;
					final Definition[] v = _list_v == null ? new Definition[0] : (Definition[]) _list_v.toArray(new Definition[_list_v.size()]);
					final Symbol _symbol_r = _symbols[offset + 4];
					final ArrayList _list_r = (ArrayList) _symbol_r.value;
					final Expression[] r = _list_r == null ? new Expression[0] : (Expression[]) _list_r.toArray(new Expression[_list_r.size()]);
					final Symbol _symbol_s = _symbols[offset + 5];
					final ArrayList _list_s = (ArrayList) _symbol_s.value;
					final Statement[] s = _list_s == null ? new Statement[0] : (Statement[]) _list_s.toArray(new Statement[_list_s.size()]);
					 return new Parsed(v, r, s);
				}
			},
			new Action() {	// [1] unit = defs.v P_INV COLON exprs.r GAMMA_0 COLON gamma_mappings.f statements.s
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_v = _symbols[offset + 1];
					final ArrayList _list_v = (ArrayList) _symbol_v.value;
					final Definition[] v = _list_v == null ? new Definition[0] : (Definition[]) _list_v.toArray(new Definition[_list_v.size()]);
					final Symbol _symbol_r = _symbols[offset + 4];
					final ArrayList _list_r = (ArrayList) _symbol_r.value;
					final Expression[] r = _list_r == null ? new Expression[0] : (Expression[]) _list_r.toArray(new Expression[_list_r.size()]);
					final Symbol _symbol_f = _symbols[offset + 7];
					final ArrayList _list_f = (ArrayList) _symbol_f.value;
					final GammaMapping[] f = _list_f == null ? new GammaMapping[0] : (GammaMapping[]) _list_f.toArray(new GammaMapping[_list_f.size()]);
					final Symbol _symbol_s = _symbols[offset + 8];
					final ArrayList _list_s = (ArrayList) _symbol_s.value;
					final Statement[] s = _list_s == null ? new Statement[0] : (Statement[]) _list_s.toArray(new Statement[_list_s.size()]);
					 return new Parsed(v, r,f, s);
				}
			},
			new Action() {	// [2] unit = defs.v P_INV COLON exprs.r P_0 COLON exprs.p statements.s
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_v = _symbols[offset + 1];
					final ArrayList _list_v = (ArrayList) _symbol_v.value;
					final Definition[] v = _list_v == null ? new Definition[0] : (Definition[]) _list_v.toArray(new Definition[_list_v.size()]);
					final Symbol _symbol_r = _symbols[offset + 4];
					final ArrayList _list_r = (ArrayList) _symbol_r.value;
					final Expression[] r = _list_r == null ? new Expression[0] : (Expression[]) _list_r.toArray(new Expression[_list_r.size()]);
					final Symbol _symbol_p = _symbols[offset + 7];
					final ArrayList _list_p = (ArrayList) _symbol_p.value;
					final Expression[] p = _list_p == null ? new Expression[0] : (Expression[]) _list_p.toArray(new Expression[_list_p.size()]);
					final Symbol _symbol_s = _symbols[offset + 8];
					final ArrayList _list_s = (ArrayList) _symbol_s.value;
					final Statement[] s = _list_s == null ? new Statement[0] : (Statement[]) _list_s.toArray(new Statement[_list_s.size()]);
					 return new Parsed(v, r, p, s);
				}
			},
			new Action() {	// [3] unit = defs.v P_INV COLON exprs.r P_0 COLON exprs.p GAMMA_0 COLON gamma_mappings.f statements.s
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_v = _symbols[offset + 1];
					final ArrayList _list_v = (ArrayList) _symbol_v.value;
					final Definition[] v = _list_v == null ? new Definition[0] : (Definition[]) _list_v.toArray(new Definition[_list_v.size()]);
					final Symbol _symbol_r = _symbols[offset + 4];
					final ArrayList _list_r = (ArrayList) _symbol_r.value;
					final Expression[] r = _list_r == null ? new Expression[0] : (Expression[]) _list_r.toArray(new Expression[_list_r.size()]);
					final Symbol _symbol_p = _symbols[offset + 7];
					final ArrayList _list_p = (ArrayList) _symbol_p.value;
					final Expression[] p = _list_p == null ? new Expression[0] : (Expression[]) _list_p.toArray(new Expression[_list_p.size()]);
					final Symbol _symbol_f = _symbols[offset + 10];
					final ArrayList _list_f = (ArrayList) _symbol_f.value;
					final GammaMapping[] f = _list_f == null ? new GammaMapping[0] : (GammaMapping[]) _list_f.toArray(new GammaMapping[_list_f.size()]);
					final Symbol _symbol_s = _symbols[offset + 11];
					final ArrayList _list_s = (ArrayList) _symbol_s.value;
					final Statement[] s = _list_s == null ? new Statement[0] : (Statement[]) _list_s.toArray(new Statement[_list_s.size()]);
					 return new Parsed(v, r, p, f, s);
				}
			},
			new Action() {	// [4] exprs = expr
				public Symbol reduce(Symbol[] _symbols, int offset) {
					ArrayList lst = new ArrayList(); lst.add(_symbols[offset + 1].value); return new Symbol(lst);
				}
			},
			new Action() {	// [5] exprs = exprs COMMA expr
				public Symbol reduce(Symbol[] _symbols, int offset) {
					((ArrayList) _symbols[offset + 1].value).add(_symbols[offset + 3].value); return _symbols[offset + 1];
				}
			},
			new Action() {	// [6] rgexprs = rgexpr
				public Symbol reduce(Symbol[] _symbols, int offset) {
					ArrayList lst = new ArrayList(); lst.add(_symbols[offset + 1].value); return new Symbol(lst);
				}
			},
			new Action() {	// [7] rgexprs = rgexprs COMMA rgexpr
				public Symbol reduce(Symbol[] _symbols, int offset) {
					((ArrayList) _symbols[offset + 1].value).add(_symbols[offset + 3].value); return _symbols[offset + 1];
				}
			},
			new Action() {	// [8] statement = SEMICOLON
				public Symbol reduce(Symbol[] _symbols, int offset) {
					 return Block.empty();
				}
			},
			Action.RETURN,	// [9] statement = statement1
			Action.RETURN,	// [10] statement2 = statement1
			new Action() {	// [11] lst$statement = statement
				public Symbol reduce(Symbol[] _symbols, int offset) {
					ArrayList lst = new ArrayList(); lst.add(_symbols[offset + 1].value); return new Symbol(lst);
				}
			},
			new Action() {	// [12] lst$statement = lst$statement statement
				public Symbol reduce(Symbol[] _symbols, int offset) {
					((ArrayList) _symbols[offset + 1].value).add(_symbols[offset + 2].value); return _symbols[offset + 1];
				}
			},
			Action.NONE,  	// [13] opt$lst$statement = 
			Action.RETURN,	// [14] opt$lst$statement = lst$statement
			Action.RETURN,	// [15] statements = opt$lst$statement
			new Action() {	// [16] lst$statement2 = statement2
				public Symbol reduce(Symbol[] _symbols, int offset) {
					ArrayList lst = new ArrayList(); lst.add(_symbols[offset + 1].value); return new Symbol(lst);
				}
			},
			new Action() {	// [17] lst$statement2 = lst$statement2 statement2
				public Symbol reduce(Symbol[] _symbols, int offset) {
					((ArrayList) _symbols[offset + 1].value).add(_symbols[offset + 2].value); return _symbols[offset + 1];
				}
			},
			Action.NONE,  	// [18] opt$lst$statement2 = 
			Action.RETURN,	// [19] opt$lst$statement2 = lst$statement2
			Action.RETURN,	// [20] statements2 = opt$lst$statement2
			new Action() {	// [21] definition = LOCAL ID.n
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_n = _symbols[offset + 2];
					final String n = (String) _symbol_n.value;
					 return new LocalVarDef(n);
				}
			},
			new Action() {	// [22] definition = GLOBAL ID.n COLON lpred.l
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_n = _symbols[offset + 2];
					final String n = (String) _symbol_n.value;
					final Symbol _symbol_l = _symbols[offset + 4];
					final Expression l = (Expression) _symbol_l.value;
					 return new GlobalVarDef(n, l);
				}
			},
			new Action() {	// [23] definition = GLOBAL ID.n COLON lpredr.r lpredg.g
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_n = _symbols[offset + 2];
					final String n = (String) _symbol_n.value;
					final Symbol _symbol_r = _symbols[offset + 4];
					final Expression r = (Expression) _symbol_r.value;
					final Symbol _symbol_g = _symbols[offset + 5];
					final Expression g = (Expression) _symbol_g.value;
					 return new GlobalVarDef(n, r, g);
				}
			},
			new Action() {	// [24] definition = GLOBAL ID.n COLON lpred.l R_VAR COLON rvars.rv
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_n = _symbols[offset + 2];
					final String n = (String) _symbol_n.value;
					final Symbol _symbol_l = _symbols[offset + 4];
					final Expression l = (Expression) _symbol_l.value;
					final Symbol _symbol_rv = _symbols[offset + 7];
					final ArrayList _list_rv = (ArrayList) _symbol_rv.value;
					final Relation[] rv = _list_rv == null ? new Relation[0] : (Relation[]) _list_rv.toArray(new Relation[_list_rv.size()]);
					 return new GlobalVarDef(n, l, rv);
				}
			},
			new Action() {	// [25] definition = GLOBAL ID.n COLON lpredr.r lpredg.g R_VAR COLON rvars.rv
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_n = _symbols[offset + 2];
					final String n = (String) _symbol_n.value;
					final Symbol _symbol_r = _symbols[offset + 4];
					final Expression r = (Expression) _symbol_r.value;
					final Symbol _symbol_g = _symbols[offset + 5];
					final Expression g = (Expression) _symbol_g.value;
					final Symbol _symbol_rv = _symbols[offset + 8];
					final ArrayList _list_rv = (ArrayList) _symbol_rv.value;
					final Relation[] rv = _list_rv == null ? new Relation[0] : (Relation[]) _list_rv.toArray(new Relation[_list_rv.size()]);
					 return new GlobalVarDef(n, r, g, rv);
				}
			},
			new Action() {	// [26] definition = GLOBAL ID.n COLON lpred.l G_VAR COLON rvars.gv
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_n = _symbols[offset + 2];
					final String n = (String) _symbol_n.value;
					final Symbol _symbol_l = _symbols[offset + 4];
					final Expression l = (Expression) _symbol_l.value;
					final Symbol _symbol_gv = _symbols[offset + 7];
					final ArrayList _list_gv = (ArrayList) _symbol_gv.value;
					final Relation[] gv = _list_gv == null ? new Relation[0] : (Relation[]) _list_gv.toArray(new Relation[_list_gv.size()]);
					 return new GlobalVarDef(n, gv, l);
				}
			},
			new Action() {	// [27] definition = GLOBAL ID.n COLON lpredr.r lpredg.g G_VAR COLON rvars.gv
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_n = _symbols[offset + 2];
					final String n = (String) _symbol_n.value;
					final Symbol _symbol_r = _symbols[offset + 4];
					final Expression r = (Expression) _symbol_r.value;
					final Symbol _symbol_g = _symbols[offset + 5];
					final Expression g = (Expression) _symbol_g.value;
					final Symbol _symbol_gv = _symbols[offset + 8];
					final ArrayList _list_gv = (ArrayList) _symbol_gv.value;
					final Relation[] gv = _list_gv == null ? new Relation[0] : (Relation[]) _list_gv.toArray(new Relation[_list_gv.size()]);
					 return new GlobalVarDef(n, gv, r, g);
				}
			},
			new Action() {	// [28] definition = GLOBAL ID.n COLON lpred.l R_VAR COLON rvars.rv G_VAR COLON rvars.gv
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_n = _symbols[offset + 2];
					final String n = (String) _symbol_n.value;
					final Symbol _symbol_l = _symbols[offset + 4];
					final Expression l = (Expression) _symbol_l.value;
					final Symbol _symbol_rv = _symbols[offset + 7];
					final ArrayList _list_rv = (ArrayList) _symbol_rv.value;
					final Relation[] rv = _list_rv == null ? new Relation[0] : (Relation[]) _list_rv.toArray(new Relation[_list_rv.size()]);
					final Symbol _symbol_gv = _symbols[offset + 10];
					final ArrayList _list_gv = (ArrayList) _symbol_gv.value;
					final Relation[] gv = _list_gv == null ? new Relation[0] : (Relation[]) _list_gv.toArray(new Relation[_list_gv.size()]);
					 return new GlobalVarDef(n, l, rv, gv);
				}
			},
			new Action() {	// [29] definition = GLOBAL ID.n COLON lpredr.r lpredg.g R_VAR COLON rvars.rv G_VAR COLON rvars.gv
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_n = _symbols[offset + 2];
					final String n = (String) _symbol_n.value;
					final Symbol _symbol_r = _symbols[offset + 4];
					final Expression r = (Expression) _symbol_r.value;
					final Symbol _symbol_g = _symbols[offset + 5];
					final Expression g = (Expression) _symbol_g.value;
					final Symbol _symbol_rv = _symbols[offset + 8];
					final ArrayList _list_rv = (ArrayList) _symbol_rv.value;
					final Relation[] rv = _list_rv == null ? new Relation[0] : (Relation[]) _list_rv.toArray(new Relation[_list_rv.size()]);
					final Symbol _symbol_gv = _symbols[offset + 11];
					final ArrayList _list_gv = (ArrayList) _symbol_gv.value;
					final Relation[] gv = _list_gv == null ? new Relation[0] : (Relation[]) _list_gv.toArray(new Relation[_list_gv.size()]);
					 return new GlobalVarDef(n, r, g, rv, gv);
				}
			},
			new Action() {	// [30] lst$definition = definition
				public Symbol reduce(Symbol[] _symbols, int offset) {
					ArrayList lst = new ArrayList(); lst.add(_symbols[offset + 1].value); return new Symbol(lst);
				}
			},
			new Action() {	// [31] lst$definition = lst$definition definition
				public Symbol reduce(Symbol[] _symbols, int offset) {
					((ArrayList) _symbols[offset + 1].value).add(_symbols[offset + 2].value); return _symbols[offset + 1];
				}
			},
			Action.NONE,  	// [32] opt$lst$definition = 
			Action.RETURN,	// [33] opt$lst$definition = lst$definition
			Action.RETURN,	// [34] defs = opt$lst$definition
			new Action() {	// [35] statement1 = LBRACE statements2.ss RBRACE
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_ss = _symbols[offset + 2];
					final ArrayList _list_ss = (ArrayList) _symbol_ss.value;
					final Statement[] ss = _list_ss == null ? new Statement[0] : (Statement[]) _list_ss.toArray(new Statement[_list_ss.size()]);
					 return new Block(ss);
				}
			},
			new Action() {	// [36] statement1 = ID.n ASG expr.b SEMICOLON
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_n = _symbols[offset + 1];
					final String n = (String) _symbol_n.value;
					final Symbol _symbol_b = _symbols[offset + 3];
					final Expression b = (Expression) _symbol_b.value;
					 return new Assignment(n, b);
				}
			},
			new Action() {	// [37] statement1 = ID.n ASG CAS LPAREN ID.x COMMA expr.y COMMA expr.z RPAREN SEMICOLON
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_n = _symbols[offset + 1];
					final String n = (String) _symbol_n.value;
					final Symbol _symbol_x = _symbols[offset + 5];
					final String x = (String) _symbol_x.value;
					final Symbol _symbol_y = _symbols[offset + 7];
					final Expression y = (Expression) _symbol_y.value;
					final Symbol _symbol_z = _symbols[offset + 9];
					final Expression z = (Expression) _symbol_z.value;
					 return new CompareAndSwap(n, x, y, z);
				}
			},
			new Action() {	// [38] statement1 = ID.n LBRACK expr.i RBRACK ASG expr.b SEMICOLON
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_n = _symbols[offset + 1];
					final String n = (String) _symbol_n.value;
					final Symbol _symbol_i = _symbols[offset + 3];
					final Expression i = (Expression) _symbol_i.value;
					final Symbol _symbol_b = _symbols[offset + 6];
					final Expression b = (Expression) _symbol_b.value;
					 return new ArrayAssignment(n, i, b);
				}
			},
			new Action() {	// [39] statement1 = FENCE SEMICOLON
				public Symbol reduce(Symbol[] _symbols, int offset) {
					 return Fence.self();
				}
			},
			new Action() {	// [40] statement1 = CFENCE SEMICOLON
				public Symbol reduce(Symbol[] _symbols, int offset) {
					 return ControlFence.self();
				}
			},
			new Action() {	// [41] statement1 = IF LPAREN expr.a RPAREN statement.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_a = _symbols[offset + 3];
					final Expression a = (Expression) _symbol_a.value;
					final Symbol _symbol_b = _symbols[offset + 5];
					final Statement b = (Statement) _symbol_b.value;
					 return new If(a, b);
				}
			},
			new Action() {	// [42] statement1 = IF LPAREN expr.a RPAREN statement.b ELSE statement.c
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_a = _symbols[offset + 3];
					final Expression a = (Expression) _symbol_a.value;
					final Symbol _symbol_b = _symbols[offset + 5];
					final Statement b = (Statement) _symbol_b.value;
					final Symbol _symbol_c = _symbols[offset + 7];
					final Statement c = (Statement) _symbol_c.value;
					 return new If(a, b, c);
				}
			},
			new Action() {	// [43] statement1 = WHILE LPAREN expr.a RPAREN INVARIANT COLON rgexprs.i GAMMA COLON gamma_mappings.g statement.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_a = _symbols[offset + 3];
					final Expression a = (Expression) _symbol_a.value;
					final Symbol _symbol_i = _symbols[offset + 7];
					final ArrayList _list_i = (ArrayList) _symbol_i.value;
					final Expression[] i = _list_i == null ? new Expression[0] : (Expression[]) _list_i.toArray(new Expression[_list_i.size()]);
					final Symbol _symbol_g = _symbols[offset + 10];
					final ArrayList _list_g = (ArrayList) _symbol_g.value;
					final GammaMapping[] g = _list_g == null ? new GammaMapping[0] : (GammaMapping[]) _list_g.toArray(new GammaMapping[_list_g.size()]);
					final Symbol _symbol_b = _symbols[offset + 11];
					final Statement b = (Statement) _symbol_b.value;
					 return new While(a, i, g, b);
				}
			},
			new Action() {	// [44] statement1 = DO INVARIANT COLON rgexprs.i GAMMA COLON gamma_mappings.g statement.b WHILE LPAREN expr.a RPAREN
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_i = _symbols[offset + 4];
					final ArrayList _list_i = (ArrayList) _symbol_i.value;
					final Expression[] i = _list_i == null ? new Expression[0] : (Expression[]) _list_i.toArray(new Expression[_list_i.size()]);
					final Symbol _symbol_g = _symbols[offset + 7];
					final ArrayList _list_g = (ArrayList) _symbol_g.value;
					final GammaMapping[] g = _list_g == null ? new GammaMapping[0] : (GammaMapping[]) _list_g.toArray(new GammaMapping[_list_g.size()]);
					final Symbol _symbol_b = _symbols[offset + 8];
					final Statement b = (Statement) _symbol_b.value;
					final Symbol _symbol_a = _symbols[offset + 11];
					final Expression a = (Expression) _symbol_a.value;
					 return new DoWhile(a, i, g, b);
				}
			},
			new Action() {	// [45] statement1 = error SEMICOLON
				public Symbol reduce(Symbol[] _symbols, int offset) {
					 return Malformed.self();
				}
			},
			Action.RETURN,	// [46] expr = PREFIX
			Action.RETURN,	// [47] expr = POSTFIX
			new Action() {	// [48] expr = ID.n
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_n = _symbols[offset + 1];
					final String n = (String) _symbol_n.value;
					 return new Id(n);
				}
			},
			new Action() {	// [49] expr = NUM.n
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_n = _symbols[offset + 1];
					final Integer n = (Integer) _symbol_n.value;
					 return new Lit(n);
				}
			},
			new Action() {	// [50] expr = PLUS expr.a
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_a = _symbols[offset + 2];
					final Expression a = (Expression) _symbol_a.value;
					 return new PreOp("+", a);
				}
			},
			new Action() {	// [51] expr = MINUS expr.a
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_a = _symbols[offset + 2];
					final Expression a = (Expression) _symbol_a.value;
					 return new PreOp("-", a);
				}
			},
			new Action() {	// [52] expr = BANG expr.a
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_a = _symbols[offset + 2];
					final Expression a = (Expression) _symbol_a.value;
					 return new PreOp("!", a);
				}
			},
			new Action() {	// [53] expr = TILDE expr.a
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_a = _symbols[offset + 2];
					final Expression a = (Expression) _symbol_a.value;
					 return new PreOp("~", a);
				}
			},
			new Action() {	// [54] expr = expr.a STAR expr.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_a = _symbols[offset + 1];
					final Expression a = (Expression) _symbol_a.value;
					final Symbol _symbol_b = _symbols[offset + 3];
					final Expression b = (Expression) _symbol_b.value;
					 return new BinOp("*", a, b);
				}
			},
			new Action() {	// [55] expr = expr.a DIV expr.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_a = _symbols[offset + 1];
					final Expression a = (Expression) _symbol_a.value;
					final Symbol _symbol_b = _symbols[offset + 3];
					final Expression b = (Expression) _symbol_b.value;
					 return new BinOp("/", a, b);
				}
			},
			new Action() {	// [56] expr = expr.a MOD expr.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_a = _symbols[offset + 1];
					final Expression a = (Expression) _symbol_a.value;
					final Symbol _symbol_b = _symbols[offset + 3];
					final Expression b = (Expression) _symbol_b.value;
					 return new BinOp("%", a, b);
				}
			},
			new Action() {	// [57] expr = expr.a PLUS expr.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_a = _symbols[offset + 1];
					final Expression a = (Expression) _symbol_a.value;
					final Symbol _symbol_b = _symbols[offset + 3];
					final Expression b = (Expression) _symbol_b.value;
					 return new BinOp("+", a, b);
				}
			},
			new Action() {	// [58] expr = expr.a MINUS expr.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_a = _symbols[offset + 1];
					final Expression a = (Expression) _symbol_a.value;
					final Symbol _symbol_b = _symbols[offset + 3];
					final Expression b = (Expression) _symbol_b.value;
					 return new BinOp("-", a, b);
				}
			},
			new Action() {	// [59] expr = expr.a SHL expr.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_a = _symbols[offset + 1];
					final Expression a = (Expression) _symbol_a.value;
					final Symbol _symbol_b = _symbols[offset + 3];
					final Expression b = (Expression) _symbol_b.value;
					 return new BinOp("<<",a, b);
				}
			},
			new Action() {	// [60] expr = expr.a SHR expr.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_a = _symbols[offset + 1];
					final Expression a = (Expression) _symbol_a.value;
					final Symbol _symbol_b = _symbols[offset + 3];
					final Expression b = (Expression) _symbol_b.value;
					 return new BinOp(">>",a, b);
				}
			},
			new Action() {	// [61] expr = expr.a ASHR expr.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_a = _symbols[offset + 1];
					final Expression a = (Expression) _symbol_a.value;
					final Symbol _symbol_b = _symbols[offset + 3];
					final Expression b = (Expression) _symbol_b.value;
					 return new BinOp(">>>",a, b);
				}
			},
			new Action() {	// [62] expr = expr.a LT expr.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_a = _symbols[offset + 1];
					final Expression a = (Expression) _symbol_a.value;
					final Symbol _symbol_b = _symbols[offset + 3];
					final Expression b = (Expression) _symbol_b.value;
					 return new BinOp("<", a, b);
				}
			},
			new Action() {	// [63] expr = expr.a LE expr.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_a = _symbols[offset + 1];
					final Expression a = (Expression) _symbol_a.value;
					final Symbol _symbol_b = _symbols[offset + 3];
					final Expression b = (Expression) _symbol_b.value;
					 return new BinOp("<=",a, b);
				}
			},
			new Action() {	// [64] expr = expr.a GE expr.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_a = _symbols[offset + 1];
					final Expression a = (Expression) _symbol_a.value;
					final Symbol _symbol_b = _symbols[offset + 3];
					final Expression b = (Expression) _symbol_b.value;
					 return new BinOp(">=",a, b);
				}
			},
			new Action() {	// [65] expr = expr.a GT expr.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_a = _symbols[offset + 1];
					final Expression a = (Expression) _symbol_a.value;
					final Symbol _symbol_b = _symbols[offset + 3];
					final Expression b = (Expression) _symbol_b.value;
					 return new BinOp(">", a, b);
				}
			},
			new Action() {	// [66] expr = expr.a EQ expr.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_a = _symbols[offset + 1];
					final Expression a = (Expression) _symbol_a.value;
					final Symbol _symbol_b = _symbols[offset + 3];
					final Expression b = (Expression) _symbol_b.value;
					 return new BinOp("==",a, b);
				}
			},
			new Action() {	// [67] expr = expr.a NEQ expr.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_a = _symbols[offset + 1];
					final Expression a = (Expression) _symbol_a.value;
					final Symbol _symbol_b = _symbols[offset + 3];
					final Expression b = (Expression) _symbol_b.value;
					 return new BinOp("!=",a, b);
				}
			},
			new Action() {	// [68] expr = expr.a AMP expr.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_a = _symbols[offset + 1];
					final Expression a = (Expression) _symbol_a.value;
					final Symbol _symbol_b = _symbols[offset + 3];
					final Expression b = (Expression) _symbol_b.value;
					 return new BinOp("&", a, b);
				}
			},
			new Action() {	// [69] expr = expr.a CARET expr.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_a = _symbols[offset + 1];
					final Expression a = (Expression) _symbol_a.value;
					final Symbol _symbol_b = _symbols[offset + 3];
					final Expression b = (Expression) _symbol_b.value;
					 return new BinOp("^", a, b);
				}
			},
			new Action() {	// [70] expr = expr.a PIPE expr.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_a = _symbols[offset + 1];
					final Expression a = (Expression) _symbol_a.value;
					final Symbol _symbol_b = _symbols[offset + 3];
					final Expression b = (Expression) _symbol_b.value;
					 return new BinOp("|", a, b);
				}
			},
			new Action() {	// [71] expr = expr.a AND expr.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_a = _symbols[offset + 1];
					final Expression a = (Expression) _symbol_a.value;
					final Symbol _symbol_b = _symbols[offset + 3];
					final Expression b = (Expression) _symbol_b.value;
					 return new BinOp("&&",a, b);
				}
			},
			new Action() {	// [72] expr = expr.a OR expr.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_a = _symbols[offset + 1];
					final Expression a = (Expression) _symbol_a.value;
					final Symbol _symbol_b = _symbols[offset + 3];
					final Expression b = (Expression) _symbol_b.value;
					 return new BinOp("||",a, b);
				}
			},
			new Action() {	// [73] expr = LPAREN expr.e RPAREN
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_e = _symbols[offset + 2];
					final Expression e = (Expression) _symbol_e.value;
					 return (Symbol) e;
				}
			},
			new Action() {	// [74] expr = TRUE
				public Symbol reduce(Symbol[] _symbols, int offset) {
					 return new Const("True");
				}
			},
			new Action() {	// [75] expr = FALSE
				public Symbol reduce(Symbol[] _symbols, int offset) {
					 return new Const("False");
				}
			},
			new Action() {	// [76] rgexpr = ID.n
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_n = _symbols[offset + 1];
					final String n = (String) _symbol_n.value;
					 return new Id(n);
				}
			},
			new Action() {	// [77] rgexpr = PRIMEID.n
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_n = _symbols[offset + 1];
					final String n = (String) _symbol_n.value;
					 return new Id(n);
				}
			},
			new Action() {	// [78] rgexpr = NUM.n
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_n = _symbols[offset + 1];
					final Integer n = (Integer) _symbol_n.value;
					 return new Lit(n);
				}
			},
			new Action() {	// [79] rgexpr = PLUS rgexpr.a
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_a = _symbols[offset + 2];
					final Expression a = (Expression) _symbol_a.value;
					 return new PreOp("+", a);
				}
			},
			new Action() {	// [80] rgexpr = MINUS rgexpr.a
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_a = _symbols[offset + 2];
					final Expression a = (Expression) _symbol_a.value;
					 return new PreOp("-", a);
				}
			},
			new Action() {	// [81] rgexpr = BANG rgexpr.a
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_a = _symbols[offset + 2];
					final Expression a = (Expression) _symbol_a.value;
					 return new PreOp("!", a);
				}
			},
			new Action() {	// [82] rgexpr = TILDE rgexpr.a
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_a = _symbols[offset + 2];
					final Expression a = (Expression) _symbol_a.value;
					 return new PreOp("~", a);
				}
			},
			new Action() {	// [83] rgexpr = rgexpr.a STAR rgexpr.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_a = _symbols[offset + 1];
					final Expression a = (Expression) _symbol_a.value;
					final Symbol _symbol_b = _symbols[offset + 3];
					final Expression b = (Expression) _symbol_b.value;
					 return new BinOp("*", a, b);
				}
			},
			new Action() {	// [84] rgexpr = rgexpr.a DIV rgexpr.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_a = _symbols[offset + 1];
					final Expression a = (Expression) _symbol_a.value;
					final Symbol _symbol_b = _symbols[offset + 3];
					final Expression b = (Expression) _symbol_b.value;
					 return new BinOp("/", a, b);
				}
			},
			new Action() {	// [85] rgexpr = rgexpr.a MOD rgexpr.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_a = _symbols[offset + 1];
					final Expression a = (Expression) _symbol_a.value;
					final Symbol _symbol_b = _symbols[offset + 3];
					final Expression b = (Expression) _symbol_b.value;
					 return new BinOp("%", a, b);
				}
			},
			new Action() {	// [86] rgexpr = rgexpr.a PLUS rgexpr.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_a = _symbols[offset + 1];
					final Expression a = (Expression) _symbol_a.value;
					final Symbol _symbol_b = _symbols[offset + 3];
					final Expression b = (Expression) _symbol_b.value;
					 return new BinOp("+", a, b);
				}
			},
			new Action() {	// [87] rgexpr = rgexpr.a MINUS rgexpr.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_a = _symbols[offset + 1];
					final Expression a = (Expression) _symbol_a.value;
					final Symbol _symbol_b = _symbols[offset + 3];
					final Expression b = (Expression) _symbol_b.value;
					 return new BinOp("-", a, b);
				}
			},
			new Action() {	// [88] rgexpr = rgexpr.a SHL rgexpr.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_a = _symbols[offset + 1];
					final Expression a = (Expression) _symbol_a.value;
					final Symbol _symbol_b = _symbols[offset + 3];
					final Expression b = (Expression) _symbol_b.value;
					 return new BinOp("<<",a, b);
				}
			},
			new Action() {	// [89] rgexpr = rgexpr.a SHR rgexpr.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_a = _symbols[offset + 1];
					final Expression a = (Expression) _symbol_a.value;
					final Symbol _symbol_b = _symbols[offset + 3];
					final Expression b = (Expression) _symbol_b.value;
					 return new BinOp(">>",a, b);
				}
			},
			new Action() {	// [90] rgexpr = rgexpr.a ASHR rgexpr.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_a = _symbols[offset + 1];
					final Expression a = (Expression) _symbol_a.value;
					final Symbol _symbol_b = _symbols[offset + 3];
					final Expression b = (Expression) _symbol_b.value;
					 return new BinOp(">>>",a, b);
				}
			},
			new Action() {	// [91] rgexpr = rgexpr.a LT rgexpr.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_a = _symbols[offset + 1];
					final Expression a = (Expression) _symbol_a.value;
					final Symbol _symbol_b = _symbols[offset + 3];
					final Expression b = (Expression) _symbol_b.value;
					 return new BinOp("<", a, b);
				}
			},
			new Action() {	// [92] rgexpr = rgexpr.a LE rgexpr.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_a = _symbols[offset + 1];
					final Expression a = (Expression) _symbol_a.value;
					final Symbol _symbol_b = _symbols[offset + 3];
					final Expression b = (Expression) _symbol_b.value;
					 return new BinOp("<=",a, b);
				}
			},
			new Action() {	// [93] rgexpr = rgexpr.a GE rgexpr.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_a = _symbols[offset + 1];
					final Expression a = (Expression) _symbol_a.value;
					final Symbol _symbol_b = _symbols[offset + 3];
					final Expression b = (Expression) _symbol_b.value;
					 return new BinOp(">=",a, b);
				}
			},
			new Action() {	// [94] rgexpr = rgexpr.a GT rgexpr.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_a = _symbols[offset + 1];
					final Expression a = (Expression) _symbol_a.value;
					final Symbol _symbol_b = _symbols[offset + 3];
					final Expression b = (Expression) _symbol_b.value;
					 return new BinOp(">", a, b);
				}
			},
			new Action() {	// [95] rgexpr = rgexpr.a EQ rgexpr.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_a = _symbols[offset + 1];
					final Expression a = (Expression) _symbol_a.value;
					final Symbol _symbol_b = _symbols[offset + 3];
					final Expression b = (Expression) _symbol_b.value;
					 return new BinOp("==",a, b);
				}
			},
			new Action() {	// [96] rgexpr = rgexpr.a NEQ rgexpr.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_a = _symbols[offset + 1];
					final Expression a = (Expression) _symbol_a.value;
					final Symbol _symbol_b = _symbols[offset + 3];
					final Expression b = (Expression) _symbol_b.value;
					 return new BinOp("!=",a, b);
				}
			},
			new Action() {	// [97] rgexpr = rgexpr.a AMP rgexpr.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_a = _symbols[offset + 1];
					final Expression a = (Expression) _symbol_a.value;
					final Symbol _symbol_b = _symbols[offset + 3];
					final Expression b = (Expression) _symbol_b.value;
					 return new BinOp("&", a, b);
				}
			},
			new Action() {	// [98] rgexpr = rgexpr.a CARET rgexpr.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_a = _symbols[offset + 1];
					final Expression a = (Expression) _symbol_a.value;
					final Symbol _symbol_b = _symbols[offset + 3];
					final Expression b = (Expression) _symbol_b.value;
					 return new BinOp("^", a, b);
				}
			},
			new Action() {	// [99] rgexpr = rgexpr.a PIPE rgexpr.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_a = _symbols[offset + 1];
					final Expression a = (Expression) _symbol_a.value;
					final Symbol _symbol_b = _symbols[offset + 3];
					final Expression b = (Expression) _symbol_b.value;
					 return new BinOp("|", a, b);
				}
			},
			new Action() {	// [100] rgexpr = rgexpr.a AND rgexpr.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_a = _symbols[offset + 1];
					final Expression a = (Expression) _symbol_a.value;
					final Symbol _symbol_b = _symbols[offset + 3];
					final Expression b = (Expression) _symbol_b.value;
					 return new BinOp("&&",a, b);
				}
			},
			new Action() {	// [101] rgexpr = rgexpr.a OR rgexpr.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_a = _symbols[offset + 1];
					final Expression a = (Expression) _symbol_a.value;
					final Symbol _symbol_b = _symbols[offset + 3];
					final Expression b = (Expression) _symbol_b.value;
					 return new BinOp("||",a, b);
				}
			},
			new Action() {	// [102] rgexpr = LPAREN rgexpr.e RPAREN
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_e = _symbols[offset + 2];
					final Expression e = (Expression) _symbol_e.value;
					 return (Symbol) e;
				}
			},
			new Action() {	// [103] rgexpr = TRUE
				public Symbol reduce(Symbol[] _symbols, int offset) {
					 return new Const("True");
				}
			},
			new Action() {	// [104] rgexpr = FALSE
				public Symbol reduce(Symbol[] _symbols, int offset) {
					 return new Const("False");
				}
			},
			new Action() {	// [105] lpred = LPRED COLON expr.a
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_a = _symbols[offset + 3];
					final Expression a = (Expression) _symbol_a.value;
					 return (Symbol) a;
				}
			},
			new Action() {	// [106] lpredr = LPREDRELY COLON expr.a
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_a = _symbols[offset + 3];
					final Expression a = (Expression) _symbol_a.value;
					 return (Symbol) a;
				}
			},
			new Action() {	// [107] lpredg = LPREDGUAR COLON expr.a
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_a = _symbols[offset + 3];
					final Expression a = (Expression) _symbol_a.value;
					 return (Symbol) a;
				}
			},
			new Action() {	// [108] rvars = rvar
				public Symbol reduce(Symbol[] _symbols, int offset) {
					ArrayList lst = new ArrayList(); lst.add(_symbols[offset + 1].value); return new Symbol(lst);
				}
			},
			new Action() {	// [109] rvars = rvars COMMA rvar
				public Symbol reduce(Symbol[] _symbols, int offset) {
					((ArrayList) _symbols[offset + 1].value).add(_symbols[offset + 3].value); return _symbols[offset + 1];
				}
			},
			new Action() {	// [110] rvar = LPAREN expr.c COMMA rgexpr.r RPAREN
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_c = _symbols[offset + 2];
					final Expression c = (Expression) _symbol_c.value;
					final Symbol _symbol_r = _symbols[offset + 4];
					final Expression r = (Expression) _symbol_r.value;
					 return new Relation(c, r);
				}
			},
			new Action() {	// [111] gamma_mappings = gamma_mapping
				public Symbol reduce(Symbol[] _symbols, int offset) {
					ArrayList lst = new ArrayList(); lst.add(_symbols[offset + 1].value); return new Symbol(lst);
				}
			},
			new Action() {	// [112] gamma_mappings = gamma_mappings COMMA gamma_mapping
				public Symbol reduce(Symbol[] _symbols, int offset) {
					((ArrayList) _symbols[offset + 1].value).add(_symbols[offset + 3].value); return _symbols[offset + 1];
				}
			},
			new Action() {	// [113] gamma_mapping = ID.n MAPSTO rgexpr.e
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_n = _symbols[offset + 1];
					final String n = (String) _symbol_n.value;
					final Symbol _symbol_e = _symbols[offset + 3];
					final Expression e = (Expression) _symbol_e.value;
					 return new GammaMapping(n, e);
				}
			}
		};
	}

	protected Symbol invokeReduceAction(int rule_num, int offset) {
		return actions[rule_num].reduce(_symbols, offset);
	}
}
