/* The following code was generated by JFlex 1.7.0 */

package wemelt;

import beaver.Symbol;
import wemelt.Parser.Terminals;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.7.0
 * from the specification file <tt>wemelt/src/wemelt/Scanner.flex</tt>
 */
class Scanner extends beaver.Scanner {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\3\1\2\1\5\1\6\1\1\22\0\1\63\1\17\1\0"+
    "\1\7\1\0\1\21\1\27\1\107\1\11\1\12\1\10\1\22\1\33"+
    "\1\23\1\0\1\4\1\62\1\106\1\76\1\75\1\100\1\106\1\77"+
    "\3\106\1\32\1\34\1\24\1\26\1\25\2\0\1\72\3\105\1\70"+
    "\1\71\1\52\4\105\1\51\3\105\1\60\1\105\1\53\1\73\1\66"+
    "\1\67\5\105\1\13\1\0\1\14\1\30\1\50\1\0\1\55\1\65"+
    "\1\47\1\35\1\43\1\44\1\64\1\40\1\41\2\105\1\42\1\61"+
    "\1\46\1\36\1\101\1\105\1\56\1\45\1\57\1\74\1\54\1\37"+
    "\1\102\1\104\1\103\1\15\1\31\1\16\1\20\6\0\1\5\u1fa2\0"+
    "\1\5\1\5\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\udfe6\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\1\3\1\1\1\4\1\5\1\6"+
    "\1\7\1\10\1\11\1\12\1\13\1\14\1\15\1\16"+
    "\1\17\1\20\1\21\1\22\1\23\1\24\1\25\1\26"+
    "\1\27\1\30\15\31\1\32\5\31\2\0\2\2\1\33"+
    "\1\34\1\35\1\36\1\37\1\40\1\41\1\42\1\43"+
    "\1\44\1\0\1\45\1\46\4\31\1\47\2\31\1\50"+
    "\7\31\1\51\7\31\1\52\6\31\2\0\1\53\1\0"+
    "\2\31\1\54\1\31\1\55\1\56\4\31\1\57\1\60"+
    "\11\31\1\61\1\31\1\62\3\31\1\63\1\64\1\65"+
    "\2\0\1\31\1\66\1\67\1\70\2\31\1\71\3\31"+
    "\1\72\1\73\4\31\1\74\1\31\1\75\1\31\1\76"+
    "\2\31\1\77\1\100\1\101\12\31\1\102\1\31\1\103"+
    "\3\31\1\104\1\105\1\106\1\107\3\31\1\110\1\31"+
    "\1\0\5\31\1\0\1\111\1\0\1\31\1\112\1\31"+
    "\2\0\1\31\1\113\1\114\1\0\1\31\1\115\1\116";

  private static int [] zzUnpackAction() {
    int [] result = new int[200];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\110\0\220\0\330\0\u0120\0\110\0\110\0\110"+
    "\0\110\0\110\0\110\0\110\0\u0168\0\110\0\110\0\110"+
    "\0\u01b0\0\u01f8\0\u0240\0\110\0\u0288\0\110\0\u02d0\0\u0318"+
    "\0\110\0\110\0\u0360\0\u03a8\0\u03f0\0\u0438\0\u0480\0\u04c8"+
    "\0\u0510\0\u0558\0\u05a0\0\u05e8\0\u0630\0\u0678\0\u06c0\0\u0708"+
    "\0\u0750\0\u0798\0\u07e0\0\u0828\0\u0870\0\u0120\0\u08b8\0\u0900"+
    "\0\110\0\110\0\110\0\110\0\110\0\110\0\u0948\0\110"+
    "\0\110\0\110\0\110\0\u0990\0\u03a8\0\u09d8\0\u0a20\0\u0a68"+
    "\0\u0ab0\0\u0af8\0\u03a8\0\u0b40\0\u0b88\0\u0bd0\0\u0c18\0\u0c60"+
    "\0\u0ca8\0\u0cf0\0\u0d38\0\u0d80\0\u0dc8\0\u0e10\0\u0e58\0\u0ea0"+
    "\0\u0ee8\0\u0f30\0\u0f78\0\u0fc0\0\u1008\0\u03a8\0\u1050\0\u1098"+
    "\0\u10e0\0\u1128\0\u1170\0\u11b8\0\u1200\0\u1248\0\110\0\u1290"+
    "\0\u12d8\0\u1320\0\u03a8\0\u1368\0\u03a8\0\u03a8\0\u13b0\0\u13f8"+
    "\0\u1440\0\u1488\0\u03a8\0\u03a8\0\u14d0\0\u1518\0\u1560\0\u15a8"+
    "\0\u15f0\0\u1638\0\u1680\0\u16c8\0\u1710\0\u03a8\0\u1758\0\u17a0"+
    "\0\u17e8\0\u1830\0\u1878\0\u03a8\0\u03a8\0\u03a8\0\u18c0\0\u1908"+
    "\0\u1950\0\u03a8\0\u03a8\0\u03a8\0\u1998\0\u19e0\0\u03a8\0\u1a28"+
    "\0\u1a70\0\u1ab8\0\u03a8\0\u03a8\0\u1b00\0\u1b48\0\u1b90\0\u1bd8"+
    "\0\u03a8\0\u1c20\0\u03a8\0\u1c68\0\u03a8\0\u1cb0\0\u1cf8\0\110"+
    "\0\u03a8\0\u03a8\0\u1d40\0\u1d88\0\u1dd0\0\u1e18\0\u1e60\0\u1ea8"+
    "\0\u1ef0\0\u1f38\0\u1f80\0\u1fc8\0\u03a8\0\u2010\0\u03a8\0\u2058"+
    "\0\u20a0\0\u20e8\0\u03a8\0\u2130\0\u03a8\0\u03a8\0\u2178\0\u21c0"+
    "\0\u2208\0\u03a8\0\u2250\0\u2298\0\u22e0\0\u2328\0\u2370\0\u23b8"+
    "\0\u2400\0\u2448\0\u03a8\0\u2490\0\u24d8\0\u03a8\0\u2520\0\u2568"+
    "\0\u25b0\0\u25f8\0\u03a8\0\110\0\u2640\0\u2688\0\110\0\u03a8";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[200];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\3\3\1\4\1\2\1\3\1\5\1\6\1\7"+
    "\1\10\1\11\1\12\1\13\1\14\1\15\1\16\1\17"+
    "\1\20\1\21\1\22\1\23\1\24\1\25\1\26\1\27"+
    "\1\30\1\31\1\32\1\33\1\34\1\35\1\36\1\37"+
    "\1\40\1\41\1\42\1\43\2\34\1\44\5\34\1\45"+
    "\1\46\1\34\1\47\1\50\1\3\1\34\1\51\1\52"+
    "\2\34\1\53\2\34\1\54\4\50\1\34\1\55\3\34"+
    "\1\50\1\2\111\0\3\3\2\0\1\3\54\0\1\3"+
    "\30\0\1\56\3\0\1\57\77\0\1\56\1\60\1\61"+
    "\2\56\2\0\101\56\26\0\1\62\106\0\1\63\105\0"+
    "\1\64\1\65\1\0\1\66\106\0\1\67\1\70\110\0"+
    "\1\71\111\0\1\72\104\0\1\73\35\0\1\74\60\0"+
    "\1\34\1\75\24\34\1\0\23\34\1\76\35\0\26\34"+
    "\1\0\23\34\1\76\35\0\3\34\1\77\1\100\21\34"+
    "\1\0\17\34\1\101\3\34\1\76\35\0\4\34\1\102"+
    "\21\34\1\0\23\34\1\76\35\0\7\34\1\103\1\104"+
    "\15\34\1\0\23\34\1\76\35\0\1\34\1\105\24\34"+
    "\1\0\23\34\1\76\35\0\5\34\1\106\20\34\1\0"+
    "\23\34\1\76\35\0\6\34\1\107\17\34\1\0\23\34"+
    "\1\76\35\0\4\34\1\110\21\34\1\0\11\34\1\111"+
    "\1\34\1\112\1\34\1\113\5\34\1\76\35\0\4\34"+
    "\1\114\1\115\6\34\1\116\1\117\1\120\4\34\1\121"+
    "\2\34\1\0\1\122\22\34\1\76\35\0\6\34\1\123"+
    "\17\34\1\0\23\34\1\76\35\0\3\34\1\124\22\34"+
    "\1\0\23\34\1\76\35\0\6\34\1\125\17\34\1\0"+
    "\23\34\1\76\62\0\1\50\12\0\4\50\5\0\1\50"+
    "\36\0\6\34\1\126\17\34\1\0\23\34\1\76\35\0"+
    "\16\34\1\127\7\34\1\0\23\34\1\76\35\0\26\34"+
    "\1\0\6\34\1\130\14\34\1\76\35\0\11\34\1\131"+
    "\14\34\1\0\11\34\1\132\1\34\1\133\7\34\1\76"+
    "\35\0\26\34\1\0\17\34\1\134\3\34\1\76\10\135"+
    "\1\136\77\135\2\0\1\61\132\0\1\137\120\0\1\140"+
    "\160\0\1\76\35\0\4\34\1\141\21\34\1\0\23\34"+
    "\1\76\35\0\22\34\1\142\3\34\1\0\23\34\1\76"+
    "\35\0\21\34\1\143\4\34\1\0\23\34\1\76\35\0"+
    "\26\34\1\0\1\144\22\34\1\76\35\0\3\34\1\145"+
    "\22\34\1\0\23\34\1\76\35\0\2\34\1\146\23\34"+
    "\1\0\23\34\1\76\35\0\10\34\1\147\15\34\1\0"+
    "\23\34\1\76\35\0\11\34\1\150\14\34\1\0\23\34"+
    "\1\76\35\0\26\34\1\0\1\151\16\34\1\152\3\34"+
    "\1\76\35\0\26\34\1\0\12\34\1\153\10\34\1\76"+
    "\35\0\26\34\1\0\14\34\1\154\6\34\1\76\35\0"+
    "\6\34\1\155\17\34\1\0\23\34\1\76\35\0\11\34"+
    "\1\156\14\34\1\0\23\34\1\76\35\0\1\34\1\157"+
    "\24\34\1\0\23\34\1\76\35\0\13\34\1\160\12\34"+
    "\1\0\23\34\1\76\35\0\13\34\1\161\4\34\1\162"+
    "\5\34\1\0\23\34\1\76\35\0\13\34\1\163\12\34"+
    "\1\0\23\34\1\76\35\0\13\34\1\164\12\34\1\0"+
    "\23\34\1\76\35\0\5\34\1\165\20\34\1\0\23\34"+
    "\1\76\35\0\22\34\1\166\3\34\1\0\23\34\1\76"+
    "\35\0\6\34\1\167\17\34\1\0\23\34\1\76\35\0"+
    "\24\34\1\170\1\34\1\0\23\34\1\76\35\0\26\34"+
    "\1\0\3\34\1\171\17\34\1\76\35\0\14\34\1\172"+
    "\11\34\1\0\23\34\1\76\35\0\10\34\1\173\15\34"+
    "\1\0\23\34\1\76\35\0\26\34\1\0\12\34\1\174"+
    "\10\34\1\76\35\0\26\34\1\0\14\34\1\175\6\34"+
    "\1\76\35\0\21\34\1\176\4\34\1\0\23\34\1\76"+
    "\10\135\1\177\77\135\4\0\1\61\3\0\1\136\156\0"+
    "\1\200\65\0\5\34\1\201\20\34\1\0\23\34\1\76"+
    "\35\0\3\34\1\202\22\34\1\0\23\34\1\76\35\0"+
    "\3\34\1\203\22\34\1\0\23\34\1\76\35\0\6\34"+
    "\1\204\17\34\1\0\23\34\1\76\35\0\12\34\1\205"+
    "\13\34\1\0\23\34\1\76\35\0\11\34\1\206\14\34"+
    "\1\0\23\34\1\76\35\0\6\34\1\207\17\34\1\0"+
    "\23\34\1\76\35\0\12\34\1\210\13\34\1\0\23\34"+
    "\1\76\35\0\17\34\1\211\6\34\1\0\23\34\1\76"+
    "\35\0\12\34\1\212\13\34\1\0\23\34\1\76\35\0"+
    "\15\34\1\213\1\214\7\34\1\0\23\34\1\76\35\0"+
    "\17\34\1\215\6\34\1\0\23\34\1\76\35\0\24\34"+
    "\1\216\1\34\1\0\23\34\1\76\35\0\17\34\1\217"+
    "\6\34\1\0\23\34\1\76\35\0\4\34\1\220\20\34"+
    "\1\221\1\0\23\34\1\76\35\0\1\34\1\222\24\34"+
    "\1\0\23\34\1\76\35\0\11\34\1\223\14\34\1\0"+
    "\23\34\1\76\35\0\1\34\1\224\24\34\1\0\23\34"+
    "\1\76\35\0\26\34\1\0\4\34\1\225\16\34\1\76"+
    "\35\0\26\34\1\0\7\34\1\226\13\34\1\76\35\0"+
    "\4\34\1\227\21\34\1\0\23\34\1\76\4\135\1\61"+
    "\3\135\1\177\77\135\32\0\1\230\112\0\6\34\1\231"+
    "\17\34\1\0\23\34\1\76\35\0\6\34\1\232\17\34"+
    "\1\0\23\34\1\76\35\0\6\34\1\233\17\34\1\0"+
    "\23\34\1\76\35\0\4\34\1\234\21\34\1\0\23\34"+
    "\1\76\35\0\20\34\1\235\5\34\1\0\23\34\1\76"+
    "\35\0\20\34\1\236\5\34\1\0\23\34\1\76\35\0"+
    "\20\34\1\237\5\34\1\0\23\34\1\76\35\0\24\34"+
    "\1\240\1\34\1\0\23\34\1\76\35\0\20\34\1\241"+
    "\5\34\1\0\23\34\1\76\35\0\11\34\1\242\14\34"+
    "\1\0\23\34\1\76\35\0\26\34\1\0\1\34\1\243"+
    "\21\34\1\76\35\0\21\34\1\244\4\34\1\0\23\34"+
    "\1\76\35\0\26\34\1\0\4\34\1\245\16\34\1\76"+
    "\35\0\26\34\1\0\1\246\22\34\1\76\35\0\1\247"+
    "\25\34\1\0\23\34\1\76\35\0\20\34\1\250\5\34"+
    "\1\0\23\34\1\76\35\0\21\34\1\251\4\34\1\0"+
    "\23\34\1\76\35\0\5\34\1\252\20\34\1\0\23\34"+
    "\1\76\35\0\21\34\1\253\4\34\1\0\23\34\1\76"+
    "\35\0\20\34\1\254\5\34\1\0\23\34\1\76\35\0"+
    "\21\34\1\255\4\34\1\0\23\34\1\76\35\0\17\34"+
    "\1\256\6\34\1\0\23\34\1\76\35\0\20\34\1\257"+
    "\5\34\1\0\23\34\1\76\35\0\26\34\1\0\20\34"+
    "\1\260\2\34\1\76\35\0\11\34\1\261\14\34\1\0"+
    "\23\34\1\76\35\0\5\34\1\262\20\34\1\0\23\34"+
    "\1\76\35\0\4\34\1\263\21\34\1\0\23\34\1\76"+
    "\35\0\26\34\1\264\23\34\1\76\35\0\13\34\1\265"+
    "\12\34\1\0\23\34\1\76\35\0\5\34\1\266\20\34"+
    "\1\0\23\34\1\76\35\0\13\34\1\267\12\34\1\0"+
    "\23\34\1\76\35\0\6\34\1\270\17\34\1\0\23\34"+
    "\1\76\35\0\20\34\1\271\5\34\1\0\23\34\1\76"+
    "\54\0\1\272\70\0\25\34\1\273\1\0\23\34\1\76"+
    "\35\0\26\34\1\274\23\34\1\76\35\0\10\34\1\275"+
    "\15\34\1\0\23\34\1\76\35\0\1\276\25\34\1\0"+
    "\23\34\1\76\35\0\11\34\1\277\14\34\1\0\23\34"+
    "\1\76\55\0\1\300\106\0\1\301\70\0\4\34\1\302"+
    "\21\34\1\0\23\34\1\76\35\0\22\34\1\303\3\34"+
    "\1\0\23\34\1\76\56\0\1\304\106\0\1\305\67\0"+
    "\26\34\1\0\17\34\1\306\3\34\1\76\56\0\1\307"+
    "\66\0\6\34\1\310\17\34\1\0\23\34\1\76";

  private static int [] zzUnpackTrans() {
    int [] result = new int[9936];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\3\1\7\11\1\1\3\11\3\1\1\11"+
    "\1\1\1\11\2\1\2\11\23\1\2\0\1\1\6\11"+
    "\1\1\4\11\1\0\40\1\2\0\1\11\1\0\36\1"+
    "\2\0\27\1\1\11\33\1\1\0\5\1\1\0\1\1"+
    "\1\0\3\1\2\0\2\1\1\11\1\0\1\1\1\11"+
    "\1\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[200];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true iff the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true iff the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;
  
  /** 
   * The number of occupied positions in zzBuffer beyond zzEndRead.
   * When a lead/high surrogate has been read from the input stream
   * into the final zzBuffer position, this will have a value of 1;
   * otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /* user code: */
    Symbol resolve(String name) {
        return newToken(Terminals.ID, name);
    }

    Symbol resolvePrime(String name) {
            return newToken(Terminals.PRIMEID, name);
        }

	Symbol newToken(short id)
	{
		return newToken(id, yytext());
	}

	Symbol newToken(short id, Object value)
	{
		return new Symbol(id, yyline + 1, yycolumn + 1, yylength(), value);
	}


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  Scanner(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x110000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 218) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException("Reader returned 0 characters. See JFlex examples for workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      /* If numRead == requested, we might have requested to few chars to
         encode a full Unicode character. We assume that a Reader would
         otherwise never return half characters. */
      if (numRead == requested) {
        if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    zzFinalHighSurrogate = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE)
      zzBuffer = new char[ZZ_BUFFERSIZE];
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public Symbol nextToken() throws java.io.IOException, Scanner.Exception {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':  // fall through
        case '\u000C':  // fall through
        case '\u0085':  // fall through
        case '\u2028':  // fall through
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
          { 	return newToken(Terminals.EOF);
 }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { throw new Scanner.Exception("unexpected character '" + yytext() + "'");
            } 
            // fall through
          case 79: break;
          case 2: 
            { 
            } 
            // fall through
          case 80: break;
          case 3: 
            { return newToken(Terminals.DIV);
            } 
            // fall through
          case 81: break;
          case 4: 
            { return newToken(Terminals.STAR);
            } 
            // fall through
          case 82: break;
          case 5: 
            { return newToken(Terminals.LPAREN);
            } 
            // fall through
          case 83: break;
          case 6: 
            { return newToken(Terminals.RPAREN);
            } 
            // fall through
          case 84: break;
          case 7: 
            { return newToken(Terminals.LBRACK);
            } 
            // fall through
          case 85: break;
          case 8: 
            { return newToken(Terminals.RBRACK);
            } 
            // fall through
          case 86: break;
          case 9: 
            { return newToken(Terminals.LBRACE);
            } 
            // fall through
          case 87: break;
          case 10: 
            { return newToken(Terminals.RBRACE);
            } 
            // fall through
          case 88: break;
          case 11: 
            { return newToken(Terminals.BANG);
            } 
            // fall through
          case 89: break;
          case 12: 
            { return newToken(Terminals.TILDE);
            } 
            // fall through
          case 90: break;
          case 13: 
            { return newToken(Terminals.MOD);
            } 
            // fall through
          case 91: break;
          case 14: 
            { return newToken(Terminals.PLUS);
            } 
            // fall through
          case 92: break;
          case 15: 
            { return newToken(Terminals.MINUS);
            } 
            // fall through
          case 93: break;
          case 16: 
            { return newToken(Terminals.LT);
            } 
            // fall through
          case 94: break;
          case 17: 
            { return newToken(Terminals.GT);
            } 
            // fall through
          case 95: break;
          case 18: 
            { return newToken(Terminals.EQ);
            } 
            // fall through
          case 96: break;
          case 19: 
            { return newToken(Terminals.AMP);
            } 
            // fall through
          case 97: break;
          case 20: 
            { return newToken(Terminals.CARET);
            } 
            // fall through
          case 98: break;
          case 21: 
            { return newToken(Terminals.PIPE);
            } 
            // fall through
          case 99: break;
          case 22: 
            { return newToken(Terminals.COLON);
            } 
            // fall through
          case 100: break;
          case 23: 
            { return newToken(Terminals.COMMA);
            } 
            // fall through
          case 101: break;
          case 24: 
            { return newToken(Terminals.SEMICOLON);
            } 
            // fall through
          case 102: break;
          case 25: 
            { return resolve(yytext());
            } 
            // fall through
          case 103: break;
          case 26: 
            { return newToken(Terminals.NUM, new Integer(yytext()));
            } 
            // fall through
          case 104: break;
          case 27: 
            { return newToken(Terminals.NEQ);
            } 
            // fall through
          case 105: break;
          case 28: 
            { return newToken(Terminals.MAPSTO);
            } 
            // fall through
          case 106: break;
          case 29: 
            { return newToken(Terminals.LARROW);
            } 
            // fall through
          case 107: break;
          case 30: 
            { return newToken(Terminals.SHL);
            } 
            // fall through
          case 108: break;
          case 31: 
            { return newToken(Terminals.LE);
            } 
            // fall through
          case 109: break;
          case 32: 
            { return newToken(Terminals.SHR);
            } 
            // fall through
          case 110: break;
          case 33: 
            { return newToken(Terminals.GE);
            } 
            // fall through
          case 111: break;
          case 34: 
            { return newToken(Terminals.AND);
            } 
            // fall through
          case 112: break;
          case 35: 
            { return newToken(Terminals.OR);
            } 
            // fall through
          case 113: break;
          case 36: 
            { return newToken(Terminals.ASG);
            } 
            // fall through
          case 114: break;
          case 37: 
            { return newToken(Terminals.DO);
            } 
            // fall through
          case 115: break;
          case 38: 
            { return resolvePrime(yytext());
            } 
            // fall through
          case 116: break;
          case 39: 
            { return newToken(Terminals.IF);
            } 
            // fall through
          case 117: break;
          case 40: 
            { return newToken(Terminals.EL);
            } 
            // fall through
          case 118: break;
          case 41: 
            { return newToken(Terminals.LPRED);
            } 
            // fall through
          case 119: break;
          case 42: 
            { return newToken(Terminals.BE);
            } 
            // fall through
          case 120: break;
          case 43: 
            { return newToken(Terminals.ASHR);
            } 
            // fall through
          case 121: break;
          case 44: 
            { return newToken(Terminals.BV32, "wzr");
            } 
            // fall through
          case 122: break;
          case 45: 
            { return newToken(Terminals.ISH);
            } 
            // fall through
          case 123: break;
          case 46: 
            { return newToken(Terminals.LOW);
            } 
            // fall through
          case 124: break;
          case 47: 
            { return newToken(Terminals.S32);
            } 
            // fall through
          case 125: break;
          case 48: 
            { return newToken(Terminals.S64);
            } 
            // fall through
          case 126: break;
          case 49: 
            { return newToken(Terminals.RET);
            } 
            // fall through
          case 127: break;
          case 50: 
            { return newToken(Terminals.MEM);
            } 
            // fall through
          case 128: break;
          case 51: 
            { return newToken(Terminals.U32);
            } 
            // fall through
          case 129: break;
          case 52: 
            { return newToken(Terminals.U64);
            } 
            // fall through
          case 130: break;
          case 53: 
            { return newToken(Terminals.BV64, "xzr");
            } 
            // fall through
          case 131: break;
          case 54: 
            { return newToken(Terminals.WITH);
            } 
            // fall through
          case 132: break;
          case 55: 
            { return newToken(Terminals.HIGH);
            } 
            // fall through
          case 133: break;
          case 56: 
            { return newToken(Terminals.ELSE);
            } 
            // fall through
          case 134: break;
          case 57: 
            { return newToken(Terminals.SIZE);
            } 
            // fall through
          case 135: break;
          case 58: 
            { return newToken(Terminals.LPREDGUAR);
            } 
            // fall through
          case 136: break;
          case 59: 
            { return newToken(Terminals.LPREDRELY);
            } 
            // fall through
          case 137: break;
          case 60: 
            { return newToken(Terminals.P_0);
            } 
            // fall through
          case 138: break;
          case 61: 
            { return newToken(Terminals.THEN);
            } 
            // fall through
          case 139: break;
          case 62: 
            { return newToken(Terminals.TRUE);
            } 
            // fall through
          case 140: break;
          case 63: 
            { return newToken(Terminals.GOT);
            } 
            // fall through
          case 141: break;
          case 64: 
            { return newToken(Terminals.WHILE);
            } 
            // fall through
          case 142: break;
          case 65: 
            { return newToken(Terminals.FENCE);
            } 
            // fall through
          case 143: break;
          case 66: 
            { return newToken(Terminals.FALSE);
            } 
            // fall through
          case 144: break;
          case 67: 
            { return newToken(Terminals.SIGNED);
            } 
            // fall through
          case 145: break;
          case 68: 
            { return newToken(Terminals.G_VAR);
            } 
            // fall through
          case 146: break;
          case 69: 
            { return newToken(Terminals.GAMMA);
            } 
            // fall through
          case 147: break;
          case 70: 
            { return newToken(Terminals.R_VAR);
            } 
            // fall through
          case 148: break;
          case 71: 
            { return newToken(Terminals.P_INV);
            } 
            // fall through
          case 149: break;
          case 72: 
            { return newToken(Terminals.SPECIAL);
            } 
            // fall through
          case 150: break;
          case 73: 
            { return newToken(Terminals.GAMMA_0);
            } 
            // fall through
          case 151: break;
          case 74: 
            { return newToken(Terminals.UNSIGNED);
            } 
            // fall through
          case 152: break;
          case 75: 
            { return newToken(Terminals.INVARIANT);
            } 
            // fall through
          case 153: break;
          case 76: 
            { return newToken(Terminals.LOCAL);
            } 
            // fall through
          case 154: break;
          case 77: 
            { return newToken(Terminals.GLOBAL);
            } 
            // fall through
          case 155: break;
          case 78: 
            { return newToken(Terminals.MEMSIZE);
            } 
            // fall through
          case 156: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
