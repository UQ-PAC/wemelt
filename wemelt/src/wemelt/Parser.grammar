%package "wemelt";
%class "Parser";

%terminals LOCAL, GLOBAL;
//%terminals ARRAY;

//%terminals RETURN, BREAK, CONTINUE;
%terminals IF, ELSE, WHILE, DO;

%terminals ID;
%terminals NUM;
%terminals LOW, HIGH, TRUE, FALSE;

%terminals LPAREN, RPAREN, LBRACK, RBRACK, LBRACE, RBRACE;
%terminals POSTFIX;
%terminals PREFIX,  BANG, TILDE;
%terminals STAR, DIV, MOD;
%terminals PLUS, MINUS;
%terminals SHL, SHR, ASHR;
%terminals LT, LE, GE, GT;
%terminals EQ, NEQ;
%terminals AMP;
%terminals CARET;
%terminals PIPE;
%terminals AND;
%terminals OR;
%terminals COLON;
%terminals ASG;
%terminals COMMA, SEMICOLON;

%terminals CAS;
%terminals FENCE, CFENCE;
%terminals INVARIANT, GAMMA, P_0, GAMMA_0;
%terminals RELY, GUARANTEE;
%terminals LPRED, LPREDGUAR, LPREDRELY;
%terminals MAPSTO;

%nonassoc IF;
%nonassoc ELSE;
%nonassoc LPAREN, RPAREN;
%right PREFIX;
%left  STAR, DIV, MOD;
%left  PLUS, MINUS;
%left  SHL, SHR, ASHR;
%left  LT, LE, GE, GT;
%left  EQ, NEQ;
%left  AMP;
%left  CARET;
%left  PIPE;
%left  AND;
%left  OR;
%right COLON;
%right ASG;
%left  COMMA;

%typeof ID      = "String";

%typeof NUM     = "Integer";

%typeof expr    = "Expression";

%typeof statement   = "Statement";
%typeof statement1  = "Statement";
%typeof statement2  = "Statement";

%typeof definition = "Definition";
%typeof lpred = "Expression";
%typeof lpredr = "Expression";
%typeof lpredg = "Expression";
%typeof unit = "Parsed";
%typeof gamma_mapping = "GammaMapping";
%typeof security = "Security";
//%typeof lpredindex = "Expression";

%goal unit;

unit = defs.v RELY COLON exprs.r GUARANTEE COLON exprs.g statements.s {: return new Parsed(v, r, g, s); :}
     | defs.v RELY COLON exprs.r GUARANTEE COLON exprs.g GAMMA_0 COLON gamma_mappings.f statements.s {: return new Parsed(v, r, g, f, s); :}
     | defs.v RELY COLON exprs.r GUARANTEE COLON exprs.g P_0 COLON exprs.p statements.s {: return new Parsed(v, r, g, p, s); :}
     | defs.v RELY COLON exprs.r GUARANTEE COLON exprs.g P_0 COLON exprs.p GAMMA_0 COLON gamma_mappings.f statements.s {: return new Parsed(v, r, g, p, f, s); :};

exprs = expr @ ASG | exprs COMMA expr;


statement
    = SEMICOLON {: return Block.empty(); :}
    | statement1
    ;

statement2
	=  statement1
    ;

statements  = statement *;
statements2 = statement2 *;

definition
    =     LOCAL ID.n {: return new LocalVarDef(n); :}
          | GLOBAL ID.n COLON lpred.l  {: return new GlobalVarDef(n, l, false); :}
          | GLOBAL ID.n COLON lpredr.r lpredg.g {: return new GlobalVarDef(n, r, g, false); :}
          /*
          | ARRAY ID.n LBRACK NUM.s RBRACK COLON lpred.l mode.m {: return new ArrayDef(n, s, l, m); :}
          | ARRAY ID.n LBRACK NUM.s RBRACK COLON lpredindexes.l mode.m {: return new ArrayDef(n, s, l, m); :}
          | ARRAY ID.n LBRACK NUM.s RBRACK COLON mode.m {: return new ArrayDef(n, s, m); :}
          | ARRAY REG_ID.n LBRACK NUM.s RBRACK COLON lpred.l {: return new ArrayDef(n, s, l); :}
          | ARRAY REG_ID.n LBRACK NUM.s RBRACK COLON lpredindexes.l {: return new ArrayDef(n, s, l); :}
          | ARRAY REG_ID.n LBRACK NUM.s RBRACK  {: return new ArrayDef(n, s); :} */
          ;

defs = definition *;

statement1
    = LBRACE statements2.ss RBRACE          {: return new Block(ss); :}
    | ID.n ASG    expr.b SEMICOLON              {: return new Assignment(n, b); :}
    | ID.n ASG CAS LPAREN ID.x COMMA expr.y COMMA expr.z RPAREN SEMICOLON {: return new CompareAndSwap(n, x, y, z); :}
    | ID.n LBRACK expr.i RBRACK ASG    expr.b SEMICOLON        {: return new ArrayAssignment(n, i, b); :}
    | FENCE SEMICOLON                   {: return Fence.self();  :}
    | CFENCE SEMICOLON                   {: return ControlFence.self();  :}
    | IF LPAREN expr.a RPAREN statement.b   {: return new If(a, b);  :}
    | IF LPAREN expr.a RPAREN statement.b ELSE statement.c     {: return new If(a, b, c);   :}
    | WHILE LPAREN expr.a RPAREN INVARIANT COLON exprs.i GAMMA COLON gamma_mappings.g statement.b      {: return new While(a, i, g, b);   :}
    | DO INVARIANT COLON exprs.i GAMMA COLON gamma_mappings.g statement.b WHILE LPAREN expr.a RPAREN    {: return new DoWhile(a, i, g, b);   :}
    | error SEMICOLON {: return Malformed.self(); :}
    ;

expr
    = PREFIX | POSTFIX /* unused */
    | ID.n                              {: return new Id(n);  :}
    | ID.n LBRACK expr.i RBRACK       {: return new Access(n, i); :}
    | NUM.n                             {: return new Lit(n); :}
    | PLUS  expr.a @ PREFIX             {: return new PreOp("+", a);    :}
    | MINUS expr.a @ PREFIX             {: return new PreOp("-", a);    :}
    | BANG  expr.a @ PREFIX             {: return new PreOp("!", a);    :}
    | TILDE expr.a @ PREFIX             {: return new PreOp("~", a);    :}
    | expr.a STAR   expr.b              {: return new BinOp("*", a, b); :}
    | expr.a DIV    expr.b              {: return new BinOp("/", a, b); :}
    | expr.a MOD    expr.b              {: return new BinOp("%", a, b); :}
    | expr.a PLUS   expr.b              {: return new BinOp("+", a, b); :}
    | expr.a MINUS  expr.b              {: return new BinOp("-", a, b); :}
    | expr.a SHL    expr.b              {: return new BinOp("<<",a, b); :}
    | expr.a SHR    expr.b              {: return new BinOp(">>",a, b); :}
    | expr.a ASHR    expr.b             {: return new BinOp(">>>",a, b); :}
    | expr.a LT     expr.b              {: return new BinOp("<", a, b); :}
    | expr.a LE     expr.b              {: return new BinOp("<=",a, b); :}
    | expr.a GE     expr.b              {: return new BinOp(">=",a, b); :}
    | expr.a GT     expr.b              {: return new BinOp(">", a, b); :}
    | expr.a EQ     expr.b              {: return new BinOp("==",a, b); :}
    | expr.a NEQ    expr.b              {: return new BinOp("!=",a, b); :}
    | expr.a AMP    expr.b              {: return new BinOp("&", a, b); :}
    | expr.a CARET  expr.b              {: return new BinOp("^", a, b); :}
    | expr.a PIPE   expr.b              {: return new BinOp("|", a, b); :}
    | expr.a AND    expr.b              {: return new BinOp("&&",a, b); :}
    | expr.a OR     expr.b              {: return new BinOp("||",a, b); :}
    | LPAREN expr.e RPAREN              {: return (Symbol) e;           :}
    | TRUE                              {: return new Const("True");  :}
    | FALSE                             {: return new Const("False");  :}
    ;

// for _L(x): pred construction to set predicate for variable security level
lpred
    = LPRED COLON expr.a {: return (Symbol) a; :}
    ;

lpredr
    = LPREDRELY COLON expr.a {: return (Symbol) a; :}
    ;

lpredg
    = LPREDGUAR COLON expr.a {: return (Symbol) a; :}
    ;

//lpredindex = LPRED LBRACK NUM.n RBRACK COLON expr.a {: return (Symbol) a; :};

//lpredindexes = lpredindex | lpredindexes lpredindex;

gamma_mappings
    = gamma_mapping | gamma_mappings COMMA gamma_mapping;

gamma_mapping
    = ID.n MAPSTO security.s {: return new GammaMapping(n, s); :}
    //| ID.n LBRACK NUM.i RBRACK MAPSTO security.s {: return new GammaMapping(n, i, s); :}
    //| ID.n LBRACK STAR RBRACK MAPSTO security.s {: return new GammaMapping(n, s); :}
    ;

security
    = LOW {: return Low.instance(); :}
    | HIGH {: return High.instance(); :}
    ;