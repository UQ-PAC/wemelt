_var r_h:
_L: TRUE

_var r_t:
_L: TRUE

_var r_task:
_L: r_lev == 0

_var r_lev:
_L: TRUE

_var r_r:
_L: TRUE

_var head:
_L: TRUE
_Mode: RW

_var tail:
_L: TRUE
_Mode: RW

_var L:
_L: TRUE
_Mode: NoW

_var steal_result:
_L: TRUE
_Mode: NoW

_var r_index:
_L: TRUE

_var z:
_L: TRUE
_Mode: RW

_array tasks[2]:
_L[0]: levels[0] == 0
_L[1]: levels[1] == 0
_Mode: RW

_array levels[2]:
_L: TRUE
_Mode: RW

_var r_res:
_L: TRUE

_P_0: L == 2
_Gamma_0: r_res -> LOW, r_h -> LOW, r_index -> LOW, L -> LOW, steal_result -> LOW, r_t -> LOW, r_task -> LOW, r_r -> LOW

r_h = head;
fence;
r_t = tail;
if (r_h < r_t) {
  do 
  _invariant: L == 2
  _Gamma: r_res -> LOW, r_h -> LOW, r_index -> LOW, L -> LOW, steal_result -> LOW, r_t -> LOW, r_task -> LOW, r_r -> LOW, z -> LOW
  _Stable: z
  {
    do 
    _invariant: L == 2
    _Gamma: r_res -> LOW, r_h -> LOW, r_index -> LOW, L -> LOW, steal_result -> LOW, r_t -> LOW, r_task -> LOW, r_r -> LOW, z -> LOW
    {
      r_r = z;
    } while (r_r % 2 != 0)
    cfence;
    r_index = r_h % L;
    r_lev = levels[r_index];
    if (r_lev != 0) {
      r_task = -1;
    } else {
      r_task = tasks[r_index];
    }
    fence;
  } while (z != r_r)
  r_res = CAS(head, r_h, r_h + 1);
  if (r_res == 0) {
    r_task = -1;
  }
} else {
  r_task = 0;
}
steal_result = r_task;
