BIL stuff:
-rules for stores, figure out how they work for where lhs is referenced in assign versions
-handling gamma, D for memory accesses
-updates for memory stores
-handle memory reads in assignL and assignG rules

to check for memory accesses:
-index is low
-index in bounds
-rules hold for all possible indices
-for gamma update, use if then else to handle branches?



-make P_inv optional in parsing
-remove unnecessary SMT calls in R-var part of P + R ?? - check this ??
-SMT optimisations to reduce calls in a few places

new weak memory model:
-optimise by only testing those variables not in the sets to compare to in AssignG
done:
-I and U updates
-P restrict ind
-D updates in rules
-D subset checks
-P restrict u checks
-u and i calculations
-D fixed point calculation
-all assignG checks
-convert G to being Gvar
-modified P + (R, i) update
-modified gamma update

for later
-make r_var implementation better?
-check rely & guarantee don't evaluate to false initially