_global var z:
size: 32
_L: TRUE
_R_var: (TRUE, z' >= z)
_G_var: (TRUE, z' = z)

_global var x:
size: 32
_L_R: z % 2 = 0
_L_G: TRUE

_local var Temp1:
size: 32

_local var Temp2:
size: 32

_local var Result:
size: 32

_local var w0:
size: 32

_local var w1:
size: 32

_local var sp:
size: 64

_local var x0:
size: 64

_local var Z:
size: 1

_local var C:
size: 1

_local var N:
size: 1

_local var V:
size: 1

_P_inv: TRUE
_P_0: sp = 40
memory_size: 40

            sp := sp - 16
            mem := mem with [sp, el]:u32 <- wzr
            mem := mem with [sp + 4, el]:u32 <- wzr

do
_invariant: sp = 24
_Gamma: Z -> TRUE, V -> TRUE, mem[12]:u32 -> TRUE, mem[16]:u32 -> TRUE, mem[40]:u32 -> TRUE, mem[36]:u32 -> TRUE, mem[20]:u32 -> TRUE, mem[12]:u32 -> TRUE, Temp2 -> TRUE, mem[32]:u32 -> TRUE, w0 -> TRUE, mem[8]:u32 -> TRUE, mem[24]:u32 -> TRUE, sp -> TRUE, mem[32]:u32 -> TRUE, mem[28]:u32 -> TRUE, mem[24]:u32 -> TRUE, mem[36]:u32 -> TRUE, N -> TRUE, C -> TRUE, Result -> TRUE, mem[28]:u32 -> TRUE, x0 -> TRUE, mem[20]:u32 -> TRUE, mem[8]:u32 -> TRUE, z -> TRUE, mem[40]:u32 -> TRUE, mem[16]:u32 -> TRUE, Temp1 -> TRUE, w1 -> TRUE
{
do
_invariant: sp = 24
_Gamma: Z -> TRUE, V -> TRUE, Temp2 -> TRUE, w0 -> TRUE, sp -> TRUE, N -> TRUE, C -> TRUE, Result -> TRUE, x0 -> TRUE, z -> TRUE, Temp1 -> TRUE, w1 -> TRUE,  mem[12]:u64 -> TRUE, mem[16]:u64 -> TRUE, mem[40]:u64 -> TRUE, mem[36]:u32 -> TRUE, mem[20]:u32 -> TRUE, mem[12]:u32 -> TRUE, mem[32]:u32 -> TRUE, mem[8]:u32 -> TRUE, mem[24]:u64 -> TRUE, mem[32]:u64 -> TRUE, mem[28]:u32 -> TRUE, mem[24]:u32 -> TRUE, mem[36]:u64 -> TRUE, mem[28]:u64 -> TRUE, mem[20]:u64 -> TRUE, mem[8]:u64 -> TRUE, mem[40]:u32 -> TRUE, mem[16]:u32 -> TRUE
{
            x0 := z - low:12[z]
            x0 := x0 + low:12[z]
            w0 := mem[x0, el]:u32
            mem := mem with [sp, el]:u32 <- w0
            w0 := mem[sp, el]:u32 
            w0 := w0 & 1
            Temp1 := w0
            Temp2 := 0
            Result := w0 - 0
            Z := Result = 0
            N := high:1[Result]
            C := Temp2 <= Temp1
            V := high:1[(Temp1 ^ Temp2) & (Temp1 ^ Result)]
} while (~Z)
            w0 := 5
            mem := mem with [sp + 12, el]:u32 <- w0
            special(fence ish)
            x0 := x - low:12[x]
            x0 := x0 + low:12[x]
            w0 := mem[x0, el]:u32
            mem := mem with [sp + 4, el]:u32 <- w0
            w0 := 5
            mem := mem with [sp + 8, el]:u32 <- w0
            special(fence ish)
            x0 := z - low:12[z]
            x0 := x0 + low:12[z]
            w0 := mem[x0, el]:u32
            w1 := mem[sp, el]:u32
            Temp1 := w1
            Temp2 := w0
            Result := w1 - w0
            Z := Result = 0
            N := high:1[Result]
            C := Temp2 <= Temp1
            V := high:1[(Temp1 ^ Temp2) & (Temp1 ^ Result)]
            w0 := if Z = 0 then 1 else 0
            w0 := w0 & 255
            Temp1 := w0
            Temp2 := 0
            Result := w0 - 0
            Z := Result = 0
            N := high:1[Result]
            C := Temp2 <= Temp1
            V := high:1[(Temp1 ^ Temp2) & (Temp1 ^ Result)]
} while (~Z)
            w0 := mem[sp + 4, el]:u32 
            sp := sp + 16
            special(ret)
