_global var z:
size: 32
_L: TRUE
_R_var: (TRUE, z' = z)
_G_var: (TRUE, z' >= z)

_global var x:
size: 32
_L_R: TRUE
_L_G: z % 2 = 0

_global var secret:
size: 32
_L: FALSE

_local var Temp1:
size: 32

_local var Temp2:
size: 32

_local var Result:
size: 32

_local var Temp1:
size: 32

_local var Temp2:
size: 32

_local var Result:
size: 32

_local var w0:
size: 32

_local var w1:
size: 32

_local var sp:
size: 64

_local var x0:
size: 64

_P_inv: TRUE
_P_0: z % 2 = 0, sp = 40
memory_size: 40
            x0 := :got:z - low:12[:got:z]
            x0 := mem[x0 + low:12[:got:z], el]:u64
            w0 := mem[x0, el]:u32
            w1 := w0 + 1
            x0 := :got:z - low:12[:got:z]
            x0 := mem[x0 + low:12[:got:z], el]:u64
            mem := mem with [x0, el]:u32 <- w1
            special(fence ish)
            x0 := secret - low:12[secret]
            x0 := x0 + low:12[secret]
            w1 := mem[x0, el]:u32
            x0 := :got:x - low:12[:got:x]
            x0 := mem[x0 + low:12[:got:x], el]:u64
            mem := mem with [x0, el]:u32 <- w1
            x0 := :got:x - low:12[:got:x]
            x0 := mem[x0 + low:12[:got:x], el]:u64
            mem := mem with [x0, el]:u32 <- wzr
            special(fence ish)
            x0 := :got:z - low:12[:got:z]
            x0 := mem[x0 + low:12[:got:z], el]:u64
            w0 := mem[x0, el]:u32
            w1 := w0 + 1
            x0 := :got:z - low:12[:got:z]
            x0 := mem[x0 + low:12[:got:z], el]:u64
            mem := mem with [x0, el]:u32 <- w1
            w0 := 0
            special(ret)

