package tool;

import beaver.*;
import java.util.ArrayList;

/**
 * This class is a LALR parser generated by
 * <a href="http://beaver.sourceforge.net">Beaver</a> v0.9.6.1
 * from the grammar specification "Parser.grammar".
 */
public class Parser extends beaver.Parser {
	static public class Terminals {
		static public final short EOF = 0;
		static public final short PLUS = 1;
		static public final short MINUS = 2;
		static public final short ID = 3;
		static public final short REG_ID = 4;
		static public final short LPAREN = 5;
		static public final short NUM = 6;
		static public final short PREFIX = 7;
		static public final short POSTFIX = 8;
		static public final short BANG = 9;
		static public final short TILDE = 10;
		static public final short TRUE = 11;
		static public final short FALSE = 12;
		static public final short STAR = 13;
		static public final short DIV = 14;
		static public final short MOD = 15;
		static public final short SHL = 16;
		static public final short SHR = 17;
		static public final short ASHR = 18;
		static public final short LT = 19;
		static public final short LE = 20;
		static public final short GE = 21;
		static public final short GT = 22;
		static public final short COLON = 23;
		static public final short EQ = 24;
		static public final short NEQ = 25;
		static public final short WHILE = 26;
		static public final short SEMICOLON = 27;
		static public final short AMP = 28;
		static public final short CARET = 29;
		static public final short DO = 30;
		static public final short IF = 31;
		static public final short LBRACE = 32;
		static public final short FENCE = 33;
		static public final short PIPE = 34;
		static public final short AND = 35;
		static public final short OR = 36;
		static public final short COMMA = 37;
		static public final short LPRED = 38;
		static public final short RPAREN = 39;
		static public final short MODE = 40;
		static public final short LBRACK = 41;
		static public final short RBRACE = 42;
		static public final short RBRACK = 43;
		static public final short INVARIANT = 44;
		static public final short GAMMA = 45;
		static public final short STABLE = 46;
		static public final short ARRAY = 47;
		static public final short GAMMA_0 = 48;
		static public final short VAR = 49;
		static public final short ASG = 50;
		static public final short MAPSTO = 51;
		static public final short LOW = 52;
		static public final short HIGH = 53;
		static public final short P_0 = 54;
		static public final short ELSE = 55;
		static public final short NORW = 56;
		static public final short NOW = 57;
		static public final short RW = 58;

		static public final String[] NAMES = {
			"EOF",
			"PLUS",
			"MINUS",
			"ID",
			"REG_ID",
			"LPAREN",
			"NUM",
			"PREFIX",
			"POSTFIX",
			"BANG",
			"TILDE",
			"TRUE",
			"FALSE",
			"STAR",
			"DIV",
			"MOD",
			"SHL",
			"SHR",
			"ASHR",
			"LT",
			"LE",
			"GE",
			"GT",
			"COLON",
			"EQ",
			"NEQ",
			"WHILE",
			"SEMICOLON",
			"AMP",
			"CARET",
			"DO",
			"IF",
			"LBRACE",
			"FENCE",
			"PIPE",
			"AND",
			"OR",
			"COMMA",
			"LPRED",
			"RPAREN",
			"MODE",
			"LBRACK",
			"RBRACE",
			"RBRACK",
			"INVARIANT",
			"GAMMA",
			"STABLE",
			"ARRAY",
			"GAMMA_0",
			"VAR",
			"ASG",
			"MAPSTO",
			"LOW",
			"HIGH",
			"P_0",
			"ELSE",
			"NORW",
			"NOW",
			"RW"
		};
	}

	static final ParsingTables PARSING_TABLES = new ParsingTables(
		"U9pjcGkKLLKPn$$tCJ1AAZxevlW8mU4rWYI6qXsSGM1W1XYOqL2prD8qUu1bMcOOvbjJoHv" +
		"6IkKZ4967YY0YWY8Ycb6IIYynB5#eQQPKMjlVtkUxTyxSUsOaLwtbSd7k#f$$tj$#$llRP#" +
		"zplhq7fEo5wgS1MgS5IckMhe5$h5bkjdFgfVtLHmTea0Rh81sieJhK$KSVKwqgj9yEKtrGN" +
		"g4kEboZrA0FwZlQG$jmJr1gxw2yKYkBoiMwrvHBz2KTfHsrIw9oXw3ifayLbJjfPrD6$Xqf" +
		"Fn2KthkWN5kC#Q2wwyGEbRi6vHNwIb4vXL#az9hFwpHzCt66$cRFkMTiXiw9bEubdQtpQFj" +
		"mOipl1wNllKtv8ujvetwYoxHGzoKgUmQbLtXbvD7RbDM9Yhxj57xbJb9$KzGaAWQMAKxMWQ" +
		"RuIA9YI9dYT7tK58SaAeQLARwcV50Cr$M9YhfsYhiqGllg4oYyzbk9Yf7j5AUeHr1yNISef" +
		"#CI5KjZYZk3OhJ6TAfe3ee9cgWcZTF7DLvZrQWM7Q6ZTSns#xkq#nNmwtgHRjOytQBhj4et" +
		"yKjQWSxwcAz9MgPMbBDrf2RhM7tol#fZk$rzRNT$r$7wTCWAdz7dz5dgf#eBeVv5JGrlu7V" +
		"rPPs1FQFTWtsta1NEr5d5h52QLxwXwPh63kBjMPrRj5#bR#k7gjG5POeeJgKkrCNgIfnBT2" +
		"bnBjTNmplyFQ8dvwvAzvhxjwxsBUujNQkVwdo#b9y5Jw#uNZSK5J$d6vX3ZBbbVPsYHRfLj" +
		"nVhj#5v1$brUOX#j$ih7YjqZrOdva5ytCkXlpN1$tuzmBUwh9rFYN$P2BmjxkFF5NTAPlEN" +
		"LqWpYegzg5M13zdSHTSFc3j$xMPMtwyqisWjN56$AKv1JUnhuzdJck59S2kj$Won2oU6NL7" +
		"ipYcd1xtvI7iIUI$EDli4PJtxJozstlt9$iFPBVmzIJasAFFiNWNbAFQKIDd8tjANDokRgA" +
		"mFoY6nc0UpfqRAoByZvRYWzDv9COTq4ZDI#cShAAl3gS8hlQOlPuE1dSnGdXaldw41uJdpP" +
		"DiavPYWzBsNAwEO7Oqs7vHUuPMHHzwK#MrGH2ltNbRaUUVUMT6Vkf#ZNgPzPqKLRvLNxClv" +
		"j2Sd$2H5NKmnEYZo$3fJjCNmVLVmrq9NCiuEd7ExSJxVRd$tzcXTerDp7txz#2MjG6TzrB4" +
		"#VK0$ia4#V8t9R#DxyVcts$$$Tl65LuIMF7m8zJpxiQ$dA4LlO8wV#9jhPB0tM1uve9WLIl" +
		"DA3akE7SJR1zDhmJwK7WTZpvKfeZZLsAf2d0ey6$0P5CQT2$j#Kkwg3ZjxBhI8VJs7eWzlk" +
		"gzxHIwMkt9y0tM9qQl8fLsm5#ermTFRVFGQThAgq5F$n3peVGQ4$cf2sVValzQuJwb$wGYy" +
		"BUxZvsEqSv7DSNa5zx55nGHg4q5BD7SkN7xk0ZVOZD9ltEhiibZIGzEvOVYDbBcOOZUG1YE" +
		"eNmlx7VwuwT7vgIUezkK2k1f1hPNde7ckVNlc5MxdMljbKZOLqruafURvqKJrr5BZrSRhZN" +
		"$FhGL#5gQSUer#du0T$JKnNCQSFHFcBSaotdHlk1zy83m8piFry1Xm13WLd04OJ#eg#6huB" +
		"FW6#0Hu8UnzbyE3ui$JDlRqMkCDnfkCjnXlvRPtYQQPSMSe3BEvcM9y0V1hCPbu9r4#6fvc" +
		"RPS0V#ez7JuPd0FwKfy23$7h1vy7dmtFDStvu3gUkR$LURRCDQ2EobHubloPMPdxm4om68p" +
		"3DiFyvu5Ve3ySNW9#2OwYORwrBu#juTEnjLuDJWGpmFDW0yRxOTOiyvBtOQatccuzjetWOT" +
		"C#1HYRteAVOQw6mezRsmlKzojV0prAssR6sGNctSYyWH$vArDOWoDZOtiHl#xmot05p7obU" +
		"aHjANj$Cw$JLWDOeonpdjqficTtBlJ3#Fdx97DihBw9#fKsdkwniVLA66zTJ5VodMHpyJhj" +
		"MqgqisFbHSQBZLSQhpD#nBWmrvkDdp5#rVXDuyBtjwFn7iOvuzx6DSOsNodB2wdZIv#rRQm" +
		"fUyVJXndN6uyq7fMiIpSaspEjDkOrna$6sYR7VPb3UxwszUAQ0BQMZB5x#xgcnigdnNE0$x" +
		"OInbeLQv#PDEvoZQQnvWDZzSkf7nhhvyQIvruGAw#8nHv6VTMsn8o3kVa7kiVi#Liw7cTcy" +
		"pOyoq4HPxjRdPpadbAxoyqBzvlTJMvEACqDzzVTF$r8AFqnt5znMyt$3s0TU12i1G#0DO1y" +
		"uiWpZjpbxWMhm4fm3rW1xWRaRNSNM0RuNjrIzwZxjVkLM#$8PEuHG7Pp3uE7GgmbxWwtsEA" +
		"IgzplYgF#BTYeailzo$W9uyTBFSp#M4cTFTPjSBUuDzshxeqoxoVT9lSdU0juCLXkjvONmd" +
		"sXM#3ck#TBLC#1PzsYcEKsH$vqjrhjQV0NzsT7djGnQcLlR#Li5Q6Ily5J81FE2HvZmSY0D" +
		"2S8WHHdXnHVZKTQ4x5DfDm2cZYzD8L$IwcmSgMXQmmLQiQt6Rz9Q2TH7WzgYLcB9a8w$7zJ" +
		"BVx#$u1gEPdKSYwjvNpYs$BuboDTWip$654SVuuSpNckaN9Z#5igKyG8R2FWUiCuwXx3tmO" +
		"CHM#l");

	private final Action[] actions;

	public Parser() {
		super(PARSING_TABLES);
		actions = new Action[] {
			new Action() {	// [0] unit = defs.v locals.s
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_v = _symbols[offset + 1];
					final ArrayList _list_v = (ArrayList) _symbol_v.value;
					final Definition[] v = _list_v == null ? new Definition[0] : (Definition[]) _list_v.toArray(new Definition[_list_v.size()]);
					final Symbol _symbol_s = _symbols[offset + 2];
					final ArrayList _list_s = (ArrayList) _symbol_s.value;
					final Statement[] s = _list_s == null ? new Statement[0] : (Statement[]) _list_s.toArray(new Statement[_list_s.size()]);
					 return new Global(v, s);
				}
			},
			new Action() {	// [1] unit = defs.v GAMMA_0 COLON gamma_mappings.f locals.s
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_v = _symbols[offset + 1];
					final ArrayList _list_v = (ArrayList) _symbol_v.value;
					final Definition[] v = _list_v == null ? new Definition[0] : (Definition[]) _list_v.toArray(new Definition[_list_v.size()]);
					final Symbol _symbol_f = _symbols[offset + 4];
					final ArrayList _list_f = (ArrayList) _symbol_f.value;
					final GammaMapping[] f = _list_f == null ? new GammaMapping[0] : (GammaMapping[]) _list_f.toArray(new GammaMapping[_list_f.size()]);
					final Symbol _symbol_s = _symbols[offset + 5];
					final ArrayList _list_s = (ArrayList) _symbol_s.value;
					final Statement[] s = _list_s == null ? new Statement[0] : (Statement[]) _list_s.toArray(new Statement[_list_s.size()]);
					 return new Global(v, f, s);
				}
			},
			new Action() {	// [2] unit = defs.v P_0 COLON exprs.e locals.s
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_v = _symbols[offset + 1];
					final ArrayList _list_v = (ArrayList) _symbol_v.value;
					final Definition[] v = _list_v == null ? new Definition[0] : (Definition[]) _list_v.toArray(new Definition[_list_v.size()]);
					final Symbol _symbol_e = _symbols[offset + 4];
					final ArrayList _list_e = (ArrayList) _symbol_e.value;
					final Expression[] e = _list_e == null ? new Expression[0] : (Expression[]) _list_e.toArray(new Expression[_list_e.size()]);
					final Symbol _symbol_s = _symbols[offset + 5];
					final ArrayList _list_s = (ArrayList) _symbol_s.value;
					final Statement[] s = _list_s == null ? new Statement[0] : (Statement[]) _list_s.toArray(new Statement[_list_s.size()]);
					 return new Global(v, e, s);
				}
			},
			new Action() {	// [3] unit = defs.v P_0 COLON exprs.e GAMMA_0 COLON gamma_mappings.f locals.s
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_v = _symbols[offset + 1];
					final ArrayList _list_v = (ArrayList) _symbol_v.value;
					final Definition[] v = _list_v == null ? new Definition[0] : (Definition[]) _list_v.toArray(new Definition[_list_v.size()]);
					final Symbol _symbol_e = _symbols[offset + 4];
					final ArrayList _list_e = (ArrayList) _symbol_e.value;
					final Expression[] e = _list_e == null ? new Expression[0] : (Expression[]) _list_e.toArray(new Expression[_list_e.size()]);
					final Symbol _symbol_f = _symbols[offset + 7];
					final ArrayList _list_f = (ArrayList) _symbol_f.value;
					final GammaMapping[] f = _list_f == null ? new GammaMapping[0] : (GammaMapping[]) _list_f.toArray(new GammaMapping[_list_f.size()]);
					final Symbol _symbol_s = _symbols[offset + 8];
					final ArrayList _list_s = (ArrayList) _symbol_s.value;
					final Statement[] s = _list_s == null ? new Statement[0] : (Statement[]) _list_s.toArray(new Statement[_list_s.size()]);
					 return new Global(v, e, f, s);
				}
			},
			new Action() {	// [4] exprs = expr
				public Symbol reduce(Symbol[] _symbols, int offset) {
					ArrayList lst = new ArrayList(); lst.add(_symbols[offset + 1].value); return new Symbol(lst);
				}
			},
			new Action() {	// [5] exprs = exprs COMMA expr
				public Symbol reduce(Symbol[] _symbols, int offset) {
					((ArrayList) _symbols[offset + 1].value).add(_symbols[offset + 3].value); return _symbols[offset + 1];
				}
			},
			new Action() {	// [6] local = SEMICOLON
				public Symbol reduce(Symbol[] _symbols, int offset) {
					 return Block.empty();
				}
			},
			Action.RETURN,	// [7] local = local1
			Action.RETURN,	// [8] local2 = local1
			new Action() {	// [9] lst$local = local
				public Symbol reduce(Symbol[] _symbols, int offset) {
					ArrayList lst = new ArrayList(); lst.add(_symbols[offset + 1].value); return new Symbol(lst);
				}
			},
			new Action() {	// [10] lst$local = lst$local local
				public Symbol reduce(Symbol[] _symbols, int offset) {
					((ArrayList) _symbols[offset + 1].value).add(_symbols[offset + 2].value); return _symbols[offset + 1];
				}
			},
			Action.NONE,  	// [11] opt$lst$local = 
			Action.RETURN,	// [12] opt$lst$local = lst$local
			Action.RETURN,	// [13] locals = opt$lst$local
			new Action() {	// [14] lst$local2 = local2
				public Symbol reduce(Symbol[] _symbols, int offset) {
					ArrayList lst = new ArrayList(); lst.add(_symbols[offset + 1].value); return new Symbol(lst);
				}
			},
			new Action() {	// [15] lst$local2 = lst$local2 local2
				public Symbol reduce(Symbol[] _symbols, int offset) {
					((ArrayList) _symbols[offset + 1].value).add(_symbols[offset + 2].value); return _symbols[offset + 1];
				}
			},
			Action.NONE,  	// [16] opt$lst$local2 = 
			Action.RETURN,	// [17] opt$lst$local2 = lst$local2
			Action.RETURN,	// [18] locals2 = opt$lst$local2
			new Action() {	// [19] definition = VAR REG_ID.n COLON lpred.l
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_n = _symbols[offset + 2];
					final String n = (String) _symbol_n.value;
					final Symbol _symbol_l = _symbols[offset + 4];
					final Expression l = (Expression) _symbol_l.value;
					 return new VarDef(n, l);
				}
			},
			new Action() {	// [20] definition = VAR REG_ID.n
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_n = _symbols[offset + 2];
					final String n = (String) _symbol_n.value;
					 return new VarDef(n);
				}
			},
			new Action() {	// [21] definition = VAR ID.n COLON lpred.l mode.m
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_n = _symbols[offset + 2];
					final String n = (String) _symbol_n.value;
					final Symbol _symbol_l = _symbols[offset + 4];
					final Expression l = (Expression) _symbol_l.value;
					final Symbol _symbol_m = _symbols[offset + 5];
					final Mode m = (Mode) _symbol_m.value;
					  return new VarDef(n, l, m);
				}
			},
			new Action() {	// [22] definition = VAR ID.n COLON mode.m
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_n = _symbols[offset + 2];
					final String n = (String) _symbol_n.value;
					final Symbol _symbol_m = _symbols[offset + 4];
					final Mode m = (Mode) _symbol_m.value;
					 return new VarDef(n, m);
				}
			},
			new Action() {	// [23] definition = ARRAY ID.n LBRACK NUM.s RBRACK COLON lpred.l mode.m
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_n = _symbols[offset + 2];
					final String n = (String) _symbol_n.value;
					final Symbol _symbol_s = _symbols[offset + 4];
					final Integer s = (Integer) _symbol_s.value;
					final Symbol _symbol_l = _symbols[offset + 7];
					final Expression l = (Expression) _symbol_l.value;
					final Symbol _symbol_m = _symbols[offset + 8];
					final Mode m = (Mode) _symbol_m.value;
					 return new ArrayDef(n, s, l, m);
				}
			},
			new Action() {	// [24] definition = ARRAY ID.n LBRACK NUM.s RBRACK COLON lpredindexes.l mode.m
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_n = _symbols[offset + 2];
					final String n = (String) _symbol_n.value;
					final Symbol _symbol_s = _symbols[offset + 4];
					final Integer s = (Integer) _symbol_s.value;
					final Symbol _symbol_l = _symbols[offset + 7];
					final ArrayList _list_l = (ArrayList) _symbol_l.value;
					final Expression[] l = _list_l == null ? new Expression[0] : (Expression[]) _list_l.toArray(new Expression[_list_l.size()]);
					final Symbol _symbol_m = _symbols[offset + 8];
					final Mode m = (Mode) _symbol_m.value;
					 return new ArrayDef(n, s, l, m);
				}
			},
			new Action() {	// [25] definition = ARRAY ID.n LBRACK NUM.s RBRACK COLON mode.m
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_n = _symbols[offset + 2];
					final String n = (String) _symbol_n.value;
					final Symbol _symbol_s = _symbols[offset + 4];
					final Integer s = (Integer) _symbol_s.value;
					final Symbol _symbol_m = _symbols[offset + 7];
					final Mode m = (Mode) _symbol_m.value;
					 return new ArrayDef(n, s, m);
				}
			},
			new Action() {	// [26] definition = ARRAY REG_ID.n LBRACK NUM.s RBRACK COLON lpred.l
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_n = _symbols[offset + 2];
					final String n = (String) _symbol_n.value;
					final Symbol _symbol_s = _symbols[offset + 4];
					final Integer s = (Integer) _symbol_s.value;
					final Symbol _symbol_l = _symbols[offset + 7];
					final Expression l = (Expression) _symbol_l.value;
					 return new ArrayDef(n, s, l);
				}
			},
			new Action() {	// [27] definition = ARRAY REG_ID.n LBRACK NUM.s RBRACK COLON lpredindexes.l
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_n = _symbols[offset + 2];
					final String n = (String) _symbol_n.value;
					final Symbol _symbol_s = _symbols[offset + 4];
					final Integer s = (Integer) _symbol_s.value;
					final Symbol _symbol_l = _symbols[offset + 7];
					final ArrayList _list_l = (ArrayList) _symbol_l.value;
					final Expression[] l = _list_l == null ? new Expression[0] : (Expression[]) _list_l.toArray(new Expression[_list_l.size()]);
					 return new ArrayDef(n, s, l);
				}
			},
			new Action() {	// [28] definition = ARRAY REG_ID.n LBRACK NUM.s RBRACK
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_n = _symbols[offset + 2];
					final String n = (String) _symbol_n.value;
					final Symbol _symbol_s = _symbols[offset + 4];
					final Integer s = (Integer) _symbol_s.value;
					 return new ArrayDef(n, s);
				}
			},
			new Action() {	// [29] lst$definition = definition
				public Symbol reduce(Symbol[] _symbols, int offset) {
					ArrayList lst = new ArrayList(); lst.add(_symbols[offset + 1].value); return new Symbol(lst);
				}
			},
			new Action() {	// [30] lst$definition = lst$definition definition
				public Symbol reduce(Symbol[] _symbols, int offset) {
					((ArrayList) _symbols[offset + 1].value).add(_symbols[offset + 2].value); return _symbols[offset + 1];
				}
			},
			Action.NONE,  	// [31] opt$lst$definition = 
			Action.RETURN,	// [32] opt$lst$definition = lst$definition
			Action.RETURN,	// [33] defs = opt$lst$definition
			new Action() {	// [34] local1 = LBRACE locals2.ss RBRACE
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_ss = _symbols[offset + 2];
					final ArrayList _list_ss = (ArrayList) _symbol_ss.value;
					final Statement[] ss = _list_ss == null ? new Statement[0] : (Statement[]) _list_ss.toArray(new Statement[_list_ss.size()]);
					 return new Block(ss);
				}
			},
			new Action() {	// [35] local1 = ID.n ASG expr.b SEMICOLON
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_n = _symbols[offset + 1];
					final String n = (String) _symbol_n.value;
					final Symbol _symbol_b = _symbols[offset + 3];
					final Expression b = (Expression) _symbol_b.value;
					 return new Assignment(n, b);
				}
			},
			new Action() {	// [36] local1 = REG_ID.n ASG expr.b SEMICOLON
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_n = _symbols[offset + 1];
					final String n = (String) _symbol_n.value;
					final Symbol _symbol_b = _symbols[offset + 3];
					final Expression b = (Expression) _symbol_b.value;
					 return new Assignment(n, b);
				}
			},
			new Action() {	// [37] local1 = FENCE SEMICOLON
				public Symbol reduce(Symbol[] _symbols, int offset) {
					 return Fence.self();
				}
			},
			new Action() {	// [38] local1 = IF LPAREN expr.a RPAREN local.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_a = _symbols[offset + 3];
					final Expression a = (Expression) _symbol_a.value;
					final Symbol _symbol_b = _symbols[offset + 5];
					final Statement b = (Statement) _symbol_b.value;
					 return new If(a, b);
				}
			},
			new Action() {	// [39] local1 = IF LPAREN expr.a RPAREN local.b ELSE local.c
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_a = _symbols[offset + 3];
					final Expression a = (Expression) _symbol_a.value;
					final Symbol _symbol_b = _symbols[offset + 5];
					final Statement b = (Statement) _symbol_b.value;
					final Symbol _symbol_c = _symbols[offset + 7];
					final Statement c = (Statement) _symbol_c.value;
					 return new If(a, b, c);
				}
			},
			new Action() {	// [40] local1 = WHILE LPAREN expr.a RPAREN INVARIANT COLON exprs.i GAMMA COLON gamma_mappings.g local.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_a = _symbols[offset + 3];
					final Expression a = (Expression) _symbol_a.value;
					final Symbol _symbol_i = _symbols[offset + 7];
					final ArrayList _list_i = (ArrayList) _symbol_i.value;
					final Expression[] i = _list_i == null ? new Expression[0] : (Expression[]) _list_i.toArray(new Expression[_list_i.size()]);
					final Symbol _symbol_g = _symbols[offset + 10];
					final ArrayList _list_g = (ArrayList) _symbol_g.value;
					final GammaMapping[] g = _list_g == null ? new GammaMapping[0] : (GammaMapping[]) _list_g.toArray(new GammaMapping[_list_g.size()]);
					final Symbol _symbol_b = _symbols[offset + 11];
					final Statement b = (Statement) _symbol_b.value;
					 return new While(a, i, g, b);
				}
			},
			new Action() {	// [41] local1 = WHILE LPAREN expr.a RPAREN INVARIANT COLON exprs.i GAMMA COLON gamma_mappings.g STABLE COLON ID.n local.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_a = _symbols[offset + 3];
					final Expression a = (Expression) _symbol_a.value;
					final Symbol _symbol_i = _symbols[offset + 7];
					final ArrayList _list_i = (ArrayList) _symbol_i.value;
					final Expression[] i = _list_i == null ? new Expression[0] : (Expression[]) _list_i.toArray(new Expression[_list_i.size()]);
					final Symbol _symbol_g = _symbols[offset + 10];
					final ArrayList _list_g = (ArrayList) _symbol_g.value;
					final GammaMapping[] g = _list_g == null ? new GammaMapping[0] : (GammaMapping[]) _list_g.toArray(new GammaMapping[_list_g.size()]);
					final Symbol _symbol_n = _symbols[offset + 13];
					final String n = (String) _symbol_n.value;
					final Symbol _symbol_b = _symbols[offset + 14];
					final Statement b = (Statement) _symbol_b.value;
					 return new While(a, i, g, n, b);
				}
			},
			new Action() {	// [42] local1 = DO INVARIANT COLON exprs.i GAMMA COLON gamma_mappings.g local.b WHILE LPAREN expr.a RPAREN
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_i = _symbols[offset + 4];
					final ArrayList _list_i = (ArrayList) _symbol_i.value;
					final Expression[] i = _list_i == null ? new Expression[0] : (Expression[]) _list_i.toArray(new Expression[_list_i.size()]);
					final Symbol _symbol_g = _symbols[offset + 7];
					final ArrayList _list_g = (ArrayList) _symbol_g.value;
					final GammaMapping[] g = _list_g == null ? new GammaMapping[0] : (GammaMapping[]) _list_g.toArray(new GammaMapping[_list_g.size()]);
					final Symbol _symbol_b = _symbols[offset + 8];
					final Statement b = (Statement) _symbol_b.value;
					final Symbol _symbol_a = _symbols[offset + 11];
					final Expression a = (Expression) _symbol_a.value;
					 return new DoWhile(a, i, g, b);
				}
			},
			new Action() {	// [43] local1 = DO INVARIANT COLON exprs.i GAMMA COLON gamma_mappings.g STABLE COLON ID.n local.b WHILE LPAREN expr.a RPAREN
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_i = _symbols[offset + 4];
					final ArrayList _list_i = (ArrayList) _symbol_i.value;
					final Expression[] i = _list_i == null ? new Expression[0] : (Expression[]) _list_i.toArray(new Expression[_list_i.size()]);
					final Symbol _symbol_g = _symbols[offset + 7];
					final ArrayList _list_g = (ArrayList) _symbol_g.value;
					final GammaMapping[] g = _list_g == null ? new GammaMapping[0] : (GammaMapping[]) _list_g.toArray(new GammaMapping[_list_g.size()]);
					final Symbol _symbol_n = _symbols[offset + 10];
					final String n = (String) _symbol_n.value;
					final Symbol _symbol_b = _symbols[offset + 11];
					final Statement b = (Statement) _symbol_b.value;
					final Symbol _symbol_a = _symbols[offset + 14];
					final Expression a = (Expression) _symbol_a.value;
					 return new DoWhile(a, i, g, n, b);
				}
			},
			new Action() {	// [44] local1 = error SEMICOLON
				public Symbol reduce(Symbol[] _symbols, int offset) {
					 return Malformed.self();
				}
			},
			Action.RETURN,	// [45] expr = PREFIX
			Action.RETURN,	// [46] expr = POSTFIX
			new Action() {	// [47] expr = ID.n
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_n = _symbols[offset + 1];
					final String n = (String) _symbol_n.value;
					 return new Id(n);
				}
			},
			new Action() {	// [48] expr = REG_ID.n
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_n = _symbols[offset + 1];
					final String n = (String) _symbol_n.value;
					 return new Id(n);
				}
			},
			new Action() {	// [49] expr = NUM.n
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_n = _symbols[offset + 1];
					final Integer n = (Integer) _symbol_n.value;
					 return new Lit(n);
				}
			},
			new Action() {	// [50] expr = PLUS expr.a
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_a = _symbols[offset + 2];
					final Expression a = (Expression) _symbol_a.value;
					 return new PreOp("+", a);
				}
			},
			new Action() {	// [51] expr = MINUS expr.a
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_a = _symbols[offset + 2];
					final Expression a = (Expression) _symbol_a.value;
					 return new PreOp("-", a);
				}
			},
			new Action() {	// [52] expr = BANG expr.a
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_a = _symbols[offset + 2];
					final Expression a = (Expression) _symbol_a.value;
					 return new PreOp("!", a);
				}
			},
			new Action() {	// [53] expr = TILDE expr.a
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_a = _symbols[offset + 2];
					final Expression a = (Expression) _symbol_a.value;
					 return new PreOp("~", a);
				}
			},
			new Action() {	// [54] expr = expr.a STAR expr.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_a = _symbols[offset + 1];
					final Expression a = (Expression) _symbol_a.value;
					final Symbol _symbol_b = _symbols[offset + 3];
					final Expression b = (Expression) _symbol_b.value;
					 return new BinOp("*", a, b);
				}
			},
			new Action() {	// [55] expr = expr.a DIV expr.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_a = _symbols[offset + 1];
					final Expression a = (Expression) _symbol_a.value;
					final Symbol _symbol_b = _symbols[offset + 3];
					final Expression b = (Expression) _symbol_b.value;
					 return new BinOp("/", a, b);
				}
			},
			new Action() {	// [56] expr = expr.a MOD expr.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_a = _symbols[offset + 1];
					final Expression a = (Expression) _symbol_a.value;
					final Symbol _symbol_b = _symbols[offset + 3];
					final Expression b = (Expression) _symbol_b.value;
					 return new BinOp("%", a, b);
				}
			},
			new Action() {	// [57] expr = expr.a PLUS expr.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_a = _symbols[offset + 1];
					final Expression a = (Expression) _symbol_a.value;
					final Symbol _symbol_b = _symbols[offset + 3];
					final Expression b = (Expression) _symbol_b.value;
					 return new BinOp("+", a, b);
				}
			},
			new Action() {	// [58] expr = expr.a MINUS expr.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_a = _symbols[offset + 1];
					final Expression a = (Expression) _symbol_a.value;
					final Symbol _symbol_b = _symbols[offset + 3];
					final Expression b = (Expression) _symbol_b.value;
					 return new BinOp("-", a, b);
				}
			},
			new Action() {	// [59] expr = expr.a SHL expr.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_a = _symbols[offset + 1];
					final Expression a = (Expression) _symbol_a.value;
					final Symbol _symbol_b = _symbols[offset + 3];
					final Expression b = (Expression) _symbol_b.value;
					 return new BinOp("<<",a, b);
				}
			},
			new Action() {	// [60] expr = expr.a SHR expr.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_a = _symbols[offset + 1];
					final Expression a = (Expression) _symbol_a.value;
					final Symbol _symbol_b = _symbols[offset + 3];
					final Expression b = (Expression) _symbol_b.value;
					 return new BinOp(">>",a, b);
				}
			},
			new Action() {	// [61] expr = expr.a ASHR expr.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_a = _symbols[offset + 1];
					final Expression a = (Expression) _symbol_a.value;
					final Symbol _symbol_b = _symbols[offset + 3];
					final Expression b = (Expression) _symbol_b.value;
					 return new BinOp(">>>",a, b);
				}
			},
			new Action() {	// [62] expr = expr.a LT expr.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_a = _symbols[offset + 1];
					final Expression a = (Expression) _symbol_a.value;
					final Symbol _symbol_b = _symbols[offset + 3];
					final Expression b = (Expression) _symbol_b.value;
					 return new BinOp("<", a, b);
				}
			},
			new Action() {	// [63] expr = expr.a LE expr.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_a = _symbols[offset + 1];
					final Expression a = (Expression) _symbol_a.value;
					final Symbol _symbol_b = _symbols[offset + 3];
					final Expression b = (Expression) _symbol_b.value;
					 return new BinOp("<=",a, b);
				}
			},
			new Action() {	// [64] expr = expr.a GE expr.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_a = _symbols[offset + 1];
					final Expression a = (Expression) _symbol_a.value;
					final Symbol _symbol_b = _symbols[offset + 3];
					final Expression b = (Expression) _symbol_b.value;
					 return new BinOp(">=",a, b);
				}
			},
			new Action() {	// [65] expr = expr.a GT expr.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_a = _symbols[offset + 1];
					final Expression a = (Expression) _symbol_a.value;
					final Symbol _symbol_b = _symbols[offset + 3];
					final Expression b = (Expression) _symbol_b.value;
					 return new BinOp(">", a, b);
				}
			},
			new Action() {	// [66] expr = expr.a EQ expr.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_a = _symbols[offset + 1];
					final Expression a = (Expression) _symbol_a.value;
					final Symbol _symbol_b = _symbols[offset + 3];
					final Expression b = (Expression) _symbol_b.value;
					 return new BinOp("==",a, b);
				}
			},
			new Action() {	// [67] expr = expr.a NEQ expr.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_a = _symbols[offset + 1];
					final Expression a = (Expression) _symbol_a.value;
					final Symbol _symbol_b = _symbols[offset + 3];
					final Expression b = (Expression) _symbol_b.value;
					 return new BinOp("!=",a, b);
				}
			},
			new Action() {	// [68] expr = expr.a AMP expr.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_a = _symbols[offset + 1];
					final Expression a = (Expression) _symbol_a.value;
					final Symbol _symbol_b = _symbols[offset + 3];
					final Expression b = (Expression) _symbol_b.value;
					 return new BinOp("&", a, b);
				}
			},
			new Action() {	// [69] expr = expr.a CARET expr.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_a = _symbols[offset + 1];
					final Expression a = (Expression) _symbol_a.value;
					final Symbol _symbol_b = _symbols[offset + 3];
					final Expression b = (Expression) _symbol_b.value;
					 return new BinOp("^", a, b);
				}
			},
			new Action() {	// [70] expr = expr.a PIPE expr.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_a = _symbols[offset + 1];
					final Expression a = (Expression) _symbol_a.value;
					final Symbol _symbol_b = _symbols[offset + 3];
					final Expression b = (Expression) _symbol_b.value;
					 return new BinOp("|", a, b);
				}
			},
			new Action() {	// [71] expr = expr.a AND expr.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_a = _symbols[offset + 1];
					final Expression a = (Expression) _symbol_a.value;
					final Symbol _symbol_b = _symbols[offset + 3];
					final Expression b = (Expression) _symbol_b.value;
					 return new BinOp("&&",a, b);
				}
			},
			new Action() {	// [72] expr = expr.a OR expr.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_a = _symbols[offset + 1];
					final Expression a = (Expression) _symbol_a.value;
					final Symbol _symbol_b = _symbols[offset + 3];
					final Expression b = (Expression) _symbol_b.value;
					 return new BinOp("||",a, b);
				}
			},
			new Action() {	// [73] expr = LPAREN expr.e RPAREN
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_e = _symbols[offset + 2];
					final Expression e = (Expression) _symbol_e.value;
					 return (Symbol) e;
				}
			},
			new Action() {	// [74] expr = TRUE
				public Symbol reduce(Symbol[] _symbols, int offset) {
					 return new Const("True");
				}
			},
			new Action() {	// [75] expr = FALSE
				public Symbol reduce(Symbol[] _symbols, int offset) {
					 return new Const("False");
				}
			},
			new Action() {	// [76] lpred = LPRED COLON expr.a
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_a = _symbols[offset + 3];
					final Expression a = (Expression) _symbol_a.value;
					 return (Symbol) a;
				}
			},
			new Action() {	// [77] lpredindex = LPRED LBRACK NUM.n RBRACK COLON expr.a
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_n = _symbols[offset + 3];
					final Integer n = (Integer) _symbol_n.value;
					final Symbol _symbol_a = _symbols[offset + 6];
					final Expression a = (Expression) _symbol_a.value;
					 return (Symbol) a;
				}
			},
			new Action() {	// [78] lpredindexes = lpredindex
				public Symbol reduce(Symbol[] _symbols, int offset) {
					ArrayList lst = new ArrayList(); lst.add(_symbols[offset + 1].value); return new Symbol(lst);
				}
			},
			new Action() {	// [79] lpredindexes = lpredindexes lpredindex
				public Symbol reduce(Symbol[] _symbols, int offset) {
					((ArrayList) _symbols[offset + 1].value).add(_symbols[offset + 2].value); return _symbols[offset + 1];
				}
			},
			new Action() {	// [80] mode = MODE COLON NORW
				public Symbol reduce(Symbol[] _symbols, int offset) {
					 return NoRW.instance();
				}
			},
			new Action() {	// [81] mode = MODE COLON NOW
				public Symbol reduce(Symbol[] _symbols, int offset) {
					 return NoW.instance();
				}
			},
			new Action() {	// [82] mode = MODE COLON RW
				public Symbol reduce(Symbol[] _symbols, int offset) {
					 return RW.instance();
				}
			},
			new Action() {	// [83] gamma_mappings = gamma_mapping
				public Symbol reduce(Symbol[] _symbols, int offset) {
					ArrayList lst = new ArrayList(); lst.add(_symbols[offset + 1].value); return new Symbol(lst);
				}
			},
			new Action() {	// [84] gamma_mappings = gamma_mappings COMMA gamma_mapping
				public Symbol reduce(Symbol[] _symbols, int offset) {
					((ArrayList) _symbols[offset + 1].value).add(_symbols[offset + 3].value); return _symbols[offset + 1];
				}
			},
			new Action() {	// [85] gamma_mapping = ID.n MAPSTO security.s
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_n = _symbols[offset + 1];
					final String n = (String) _symbol_n.value;
					final Symbol _symbol_s = _symbols[offset + 3];
					final Security s = (Security) _symbol_s.value;
					 return new GammaMapping(n, s);
				}
			},
			new Action() {	// [86] gamma_mapping = REG_ID.n MAPSTO security.s
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_n = _symbols[offset + 1];
					final String n = (String) _symbol_n.value;
					final Symbol _symbol_s = _symbols[offset + 3];
					final Security s = (Security) _symbol_s.value;
					 return new GammaMapping(n, s);
				}
			},
			new Action() {	// [87] security = LOW
				public Symbol reduce(Symbol[] _symbols, int offset) {
					 return Low.instance();
				}
			},
			new Action() {	// [88] security = HIGH
				public Symbol reduce(Symbol[] _symbols, int offset) {
					 return High.instance();
				}
			}
		};
	}

	protected Symbol invokeReduceAction(int rule_num, int offset) {
		return actions[rule_num].reduce(_symbols, offset);
	}
}
