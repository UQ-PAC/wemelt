package tool;

import beaver.*;
import java.util.ArrayList;

/**
 * This class is a LALR parser generated by
 * <a href="http://beaver.sourceforge.net">Beaver</a> v0.9.6.1
 * from the grammar specification "Parser.grammar".
 */
public class Parser extends beaver.Parser {
	static public class Terminals {
		static public final short EOF = 0;
		static public final short PLUS = 1;
		static public final short MINUS = 2;
		static public final short ID = 3;
		static public final short REG_ID = 4;
		static public final short LPAREN = 5;
		static public final short PREFIX = 6;
		static public final short POSTFIX = 7;
		static public final short NUM = 8;
		static public final short BANG = 9;
		static public final short TILDE = 10;
		static public final short TRUE = 11;
		static public final short FALSE = 12;
		static public final short STAR = 13;
		static public final short DIV = 14;
		static public final short MOD = 15;
		static public final short SHL = 16;
		static public final short SHR = 17;
		static public final short ASHR = 18;
		static public final short LT = 19;
		static public final short LE = 20;
		static public final short GE = 21;
		static public final short GT = 22;
		static public final short SEMICOLON = 23;
		static public final short EQ = 24;
		static public final short NEQ = 25;
		static public final short AMP = 26;
		static public final short WHILE = 27;
		static public final short IF = 28;
		static public final short LBRACE = 29;
		static public final short FENCE = 30;
		static public final short CARET = 31;
		static public final short COLON = 32;
		static public final short PIPE = 33;
		static public final short AND = 34;
		static public final short OR = 35;
		static public final short COMMA = 36;
		static public final short RBRACE = 37;
		static public final short RPAREN = 38;
		static public final short GAMMA_0 = 39;
		static public final short VAR = 40;
		static public final short ASG = 41;
		static public final short MODE = 42;
		static public final short LPRED = 43;
		static public final short MAPSTO = 44;
		static public final short LOW = 45;
		static public final short HIGH = 46;
		static public final short INVARIANT = 47;
		static public final short GAMMA = 48;
		static public final short STABLE = 49;
		static public final short P_0 = 50;
		static public final short ELSE = 51;
		static public final short NORW = 52;
		static public final short NOW = 53;
		static public final short RW = 54;

		static public final String[] NAMES = {
			"EOF",
			"PLUS",
			"MINUS",
			"ID",
			"REG_ID",
			"LPAREN",
			"PREFIX",
			"POSTFIX",
			"NUM",
			"BANG",
			"TILDE",
			"TRUE",
			"FALSE",
			"STAR",
			"DIV",
			"MOD",
			"SHL",
			"SHR",
			"ASHR",
			"LT",
			"LE",
			"GE",
			"GT",
			"SEMICOLON",
			"EQ",
			"NEQ",
			"AMP",
			"WHILE",
			"IF",
			"LBRACE",
			"FENCE",
			"CARET",
			"COLON",
			"PIPE",
			"AND",
			"OR",
			"COMMA",
			"RBRACE",
			"RPAREN",
			"GAMMA_0",
			"VAR",
			"ASG",
			"MODE",
			"LPRED",
			"MAPSTO",
			"LOW",
			"HIGH",
			"INVARIANT",
			"GAMMA",
			"STABLE",
			"P_0",
			"ELSE",
			"NORW",
			"NOW",
			"RW"
		};
	}

	static final ParsingTables PARSING_TABLES = new ParsingTables(
		"U9pjM5bq54KKlTsT20YonJ2oPX12P1LacG490K8WG51aKH1GS0K5L4341GL5GKL4HKNnntF" +
		"yy1CL414HHMHHDbd47MLH5cLn0nNAMzLlPcgIdZEHupdwaSwvVQjUlrllzLBrQW9uQt4HMg" +
		"0Efc4wF6JXKTGslVDn8PgY6LgX3ThY4dH09qJH65tG5TsCfY6zkYk5dkY5tZWNDT0WK9EPq" +
		"AWpk0VTSOwbkIfGCygASnwgKrD5DBvtaERUCfe9egcAYRW#K7ExfQbcSfjavNPBsZWBy0Gr" +
		"CzBcLjFIr39nPeb6F#iRWZJgXALv6YzGKzVIt1Ie#T7Iv21CJHEZqOh9o0tCBS$ID4TBljE" +
		"VgMcDHhZQF8KWpSMM9Xlj6ASzRiPeX72DqGLfEbgQ23fJfxEwAwuBqbngD0DmEVgXFuQY67" +
		"rHWYim6CCmlC9#blR4ZA$46P$F6VySdiV2m3UGVeoP7AE0Oyp7O#ZnZyQeiF#dTlKB2b5av" +
		"gj#cttOlmm3JNyGXk1AZ4nwczaOWMin9ZvVit6TyOtrCt0ZndACSLnjjVr1t8hnk1#tuGxw" +
		"tecfk3lkg#CzGDziL4uQmyHJf$4GxLFa#teOMUelVb$Ph4rQPuyn1uzp1QwSbAVTrZvpJOH" +
		"vU39#fqyb#MZh0h4yWsU1U0HhHLD76PyLJ$qKj#hZFYIE#lIeHxuWxl4YUounctW4KA#Pw4" +
		"677zsXTvGhOnUkUrtfsqrwkfhLO0sfnQUGnSgiLyuGuzHbl9WcXwCqvZXDMCKpE0#3D65B0" +
		"yxx7CxRXAPPsZYj#RnogFCrldUG9b96qrqqhSnz1cdQMfgYSkPcnsd1ofM8apgtLYdZf7xM" +
		"i3GzEMToM4dJQN8jJNDccaDeZQ#8fBsVYD7eTnenJq0ZdIOaSUfp9zQGNsrvD3fEIBAAwL9" +
		"hj4AFciazN2NEkohS8LJbpgd2VlRsn8oFSCPtu3wfK#0RAFyOsYlu2$i$td#5lHhdUKJckJ" +
		"yd4$s8$DblCyGL9SGnOlCr9BwnVXvtuvbcZAR6diVzUfYxiGZF8SBZEUQhuuNf6nBVv3K0l" +
		"DQK#$l4zmL#No7M9gspn#X5pvRqjVEqs$xQgIE4hJiD9$beQmkn52BCtvQn2FQAbYlhLMxC" +
		"gdYWXueVw4EFlkJ#SLqlzdeJnKG$eaH7Lm57$BuNpU29XczOma#pgTVYckPvmCiZToAwpF2" +
		"hTn7HHBTZyEizygNzCU1KIRxkJUHfiLn$Z$r9bdOD$GVgRFo#Cr9uhF0KOKtzo7F92yc4rv" +
		"dy2dagUJ5vANabsI6l9mybxo2F8EyXJo0V8KxoFgiJtC6uRTddD#ZoRJiDoSLaZpo4SGwIH" +
		"vEtsFUJoDqTBpnDU9RmVE6NUAfRIiFuxgjij9U#tBTNc#qbR0nW$5osJz0sNQurPdyrz5uD" +
		"xXdsTUvypjp1mjrDdabRBV8SSdtHP17jY7dIRsGzyqNMksd0CVQHEOUylWJtR4vLSZunI7n" +
		"QIwxCmoiWEefzC6t7sE1pzuQJfv27oJNcwcmEUcvoVHnV#SPOd#q$wBz6ygjZvLfGLel9bc" +
		"vRgN57sNrUtrTAkyngBnTU9Rn1U8lmLk4Tmdk53maV4Jxji#C9PmY7X6LSvx3mKP$TTSBhX" +
		"JULljT4hgxav4fExdPXoStTcKAtAuNzWEG#M$XbwzhnP5$4tlyfoyPvWXN9VavcglmjtHZw" +
		"xRVw$5NXPIVwNhraVw#DrSwtTFFPBon7l4Ny2WuWwL3Bp7cfUaEzRbfBpFbNTKgTDAszvdn" +
		"C$Ix#tn7RYAt45c8piOdW75GV4Hk93GJN7BME#91OItn0S7rJxnDSzzHgubtrkVfCxLQVgb" +
		"tixIIuGgdjn2ScrYhrZbefSRybziIpvkgilaQfGyyRmry9VqbyeTvKVwhZwhSotllKVlMzQ" +
		"HrMHmo$BLSEcVCAzPPQhWwg7w1Nbn9MhH9MLn#L#Ol38JnMHyUW1z7Lm6MbrDNIOTrqM9Cq" +
		"NFx#1k6mDZcicHc4HsIQTZ5jnVJXcauuw4r4UJtAQpvSy$$KAFSEKUuRegnLKRDVS0BWbeB" +
		"tByEFesjweOK2sWh8#O8YzZKw$mqbqSAA");

	private final Action[] actions;

	public Parser() {
		super(PARSING_TABLES);
		actions = new Action[] {
			new Action() {	// [0] unit = vardefs.v locals.s
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_v = _symbols[offset + 1];
					final ArrayList _list_v = (ArrayList) _symbol_v.value;
					final VarDef[] v = _list_v == null ? new VarDef[0] : (VarDef[]) _list_v.toArray(new VarDef[_list_v.size()]);
					final Symbol _symbol_s = _symbols[offset + 2];
					final ArrayList _list_s = (ArrayList) _symbol_s.value;
					final Statement[] s = _list_s == null ? new Statement[0] : (Statement[]) _list_s.toArray(new Statement[_list_s.size()]);
					 return new Global(v, s);
				}
			},
			new Action() {	// [1] unit = vardefs.v GAMMA_0 COLON gamma_mappings.f locals.s
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_v = _symbols[offset + 1];
					final ArrayList _list_v = (ArrayList) _symbol_v.value;
					final VarDef[] v = _list_v == null ? new VarDef[0] : (VarDef[]) _list_v.toArray(new VarDef[_list_v.size()]);
					final Symbol _symbol_f = _symbols[offset + 4];
					final ArrayList _list_f = (ArrayList) _symbol_f.value;
					final GammaMapping[] f = _list_f == null ? new GammaMapping[0] : (GammaMapping[]) _list_f.toArray(new GammaMapping[_list_f.size()]);
					final Symbol _symbol_s = _symbols[offset + 5];
					final ArrayList _list_s = (ArrayList) _symbol_s.value;
					final Statement[] s = _list_s == null ? new Statement[0] : (Statement[]) _list_s.toArray(new Statement[_list_s.size()]);
					 return new Global(v, f, s);
				}
			},
			new Action() {	// [2] unit = vardefs.v P_0 COLON exprs.e locals.s
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_v = _symbols[offset + 1];
					final ArrayList _list_v = (ArrayList) _symbol_v.value;
					final VarDef[] v = _list_v == null ? new VarDef[0] : (VarDef[]) _list_v.toArray(new VarDef[_list_v.size()]);
					final Symbol _symbol_e = _symbols[offset + 4];
					final ArrayList _list_e = (ArrayList) _symbol_e.value;
					final Expression[] e = _list_e == null ? new Expression[0] : (Expression[]) _list_e.toArray(new Expression[_list_e.size()]);
					final Symbol _symbol_s = _symbols[offset + 5];
					final ArrayList _list_s = (ArrayList) _symbol_s.value;
					final Statement[] s = _list_s == null ? new Statement[0] : (Statement[]) _list_s.toArray(new Statement[_list_s.size()]);
					 return new Global(v, e, s);
				}
			},
			new Action() {	// [3] unit = vardefs.v P_0 COLON exprs.e GAMMA_0 COLON gamma_mappings.f locals.s
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_v = _symbols[offset + 1];
					final ArrayList _list_v = (ArrayList) _symbol_v.value;
					final VarDef[] v = _list_v == null ? new VarDef[0] : (VarDef[]) _list_v.toArray(new VarDef[_list_v.size()]);
					final Symbol _symbol_e = _symbols[offset + 4];
					final ArrayList _list_e = (ArrayList) _symbol_e.value;
					final Expression[] e = _list_e == null ? new Expression[0] : (Expression[]) _list_e.toArray(new Expression[_list_e.size()]);
					final Symbol _symbol_f = _symbols[offset + 7];
					final ArrayList _list_f = (ArrayList) _symbol_f.value;
					final GammaMapping[] f = _list_f == null ? new GammaMapping[0] : (GammaMapping[]) _list_f.toArray(new GammaMapping[_list_f.size()]);
					final Symbol _symbol_s = _symbols[offset + 8];
					final ArrayList _list_s = (ArrayList) _symbol_s.value;
					final Statement[] s = _list_s == null ? new Statement[0] : (Statement[]) _list_s.toArray(new Statement[_list_s.size()]);
					 return new Global(v, e, f, s);
				}
			},
			new Action() {	// [4] exprs = expr
				public Symbol reduce(Symbol[] _symbols, int offset) {
					ArrayList lst = new ArrayList(); lst.add(_symbols[offset + 1].value); return new Symbol(lst);
				}
			},
			new Action() {	// [5] exprs = exprs COMMA expr
				public Symbol reduce(Symbol[] _symbols, int offset) {
					((ArrayList) _symbols[offset + 1].value).add(_symbols[offset + 3].value); return _symbols[offset + 1];
				}
			},
			new Action() {	// [6] local = SEMICOLON
				public Symbol reduce(Symbol[] _symbols, int offset) {
					 return Block.empty();
				}
			},
			Action.RETURN,	// [7] local = local1
			Action.RETURN,	// [8] local2 = local1
			new Action() {	// [9] lst$local = local
				public Symbol reduce(Symbol[] _symbols, int offset) {
					ArrayList lst = new ArrayList(); lst.add(_symbols[offset + 1].value); return new Symbol(lst);
				}
			},
			new Action() {	// [10] lst$local = lst$local local
				public Symbol reduce(Symbol[] _symbols, int offset) {
					((ArrayList) _symbols[offset + 1].value).add(_symbols[offset + 2].value); return _symbols[offset + 1];
				}
			},
			Action.NONE,  	// [11] opt$lst$local = 
			Action.RETURN,	// [12] opt$lst$local = lst$local
			Action.RETURN,	// [13] locals = opt$lst$local
			new Action() {	// [14] lst$local2 = local2
				public Symbol reduce(Symbol[] _symbols, int offset) {
					ArrayList lst = new ArrayList(); lst.add(_symbols[offset + 1].value); return new Symbol(lst);
				}
			},
			new Action() {	// [15] lst$local2 = lst$local2 local2
				public Symbol reduce(Symbol[] _symbols, int offset) {
					((ArrayList) _symbols[offset + 1].value).add(_symbols[offset + 2].value); return _symbols[offset + 1];
				}
			},
			Action.NONE,  	// [16] opt$lst$local2 = 
			Action.RETURN,	// [17] opt$lst$local2 = lst$local2
			Action.RETURN,	// [18] locals2 = opt$lst$local2
			new Action() {	// [19] vardef = VAR REG_ID.n COLON lpred.l
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_n = _symbols[offset + 2];
					final String n = (String) _symbol_n.value;
					final Symbol _symbol_l = _symbols[offset + 4];
					final Expression l = (Expression) _symbol_l.value;
					 return new VarDef(n, l);
				}
			},
			new Action() {	// [20] vardef = VAR REG_ID.n COLON
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_n = _symbols[offset + 2];
					final String n = (String) _symbol_n.value;
					 return new VarDef(n);
				}
			},
			new Action() {	// [21] vardef = VAR ID.n COLON lpred.l mode.m
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_n = _symbols[offset + 2];
					final String n = (String) _symbol_n.value;
					final Symbol _symbol_l = _symbols[offset + 4];
					final Expression l = (Expression) _symbol_l.value;
					final Symbol _symbol_m = _symbols[offset + 5];
					final Mode m = (Mode) _symbol_m.value;
					  return new VarDef(n, l, m);
				}
			},
			new Action() {	// [22] vardef = VAR ID.n COLON mode.m
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_n = _symbols[offset + 2];
					final String n = (String) _symbol_n.value;
					final Symbol _symbol_m = _symbols[offset + 4];
					final Mode m = (Mode) _symbol_m.value;
					 return new VarDef(n, m);
				}
			},
			new Action() {	// [23] lst$vardef = vardef
				public Symbol reduce(Symbol[] _symbols, int offset) {
					ArrayList lst = new ArrayList(); lst.add(_symbols[offset + 1].value); return new Symbol(lst);
				}
			},
			new Action() {	// [24] lst$vardef = lst$vardef vardef
				public Symbol reduce(Symbol[] _symbols, int offset) {
					((ArrayList) _symbols[offset + 1].value).add(_symbols[offset + 2].value); return _symbols[offset + 1];
				}
			},
			Action.NONE,  	// [25] opt$lst$vardef = 
			Action.RETURN,	// [26] opt$lst$vardef = lst$vardef
			Action.RETURN,	// [27] vardefs = opt$lst$vardef
			new Action() {	// [28] local1 = LBRACE locals2.ss RBRACE
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_ss = _symbols[offset + 2];
					final ArrayList _list_ss = (ArrayList) _symbol_ss.value;
					final Statement[] ss = _list_ss == null ? new Statement[0] : (Statement[]) _list_ss.toArray(new Statement[_list_ss.size()]);
					 return new Block(ss);
				}
			},
			new Action() {	// [29] local1 = ID.n ASG expr.b SEMICOLON
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_n = _symbols[offset + 1];
					final String n = (String) _symbol_n.value;
					final Symbol _symbol_b = _symbols[offset + 3];
					final Expression b = (Expression) _symbol_b.value;
					 return new Assignment(n, b);
				}
			},
			new Action() {	// [30] local1 = REG_ID.n ASG expr.b SEMICOLON
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_n = _symbols[offset + 1];
					final String n = (String) _symbol_n.value;
					final Symbol _symbol_b = _symbols[offset + 3];
					final Expression b = (Expression) _symbol_b.value;
					 return new Assignment(n, b);
				}
			},
			new Action() {	// [31] local1 = FENCE SEMICOLON
				public Symbol reduce(Symbol[] _symbols, int offset) {
					 return Fence.self();
				}
			},
			new Action() {	// [32] local1 = IF LPAREN expr.a RPAREN local.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_a = _symbols[offset + 3];
					final Expression a = (Expression) _symbol_a.value;
					final Symbol _symbol_b = _symbols[offset + 5];
					final Statement b = (Statement) _symbol_b.value;
					 return new If(a, b);
				}
			},
			new Action() {	// [33] local1 = IF LPAREN expr.a RPAREN local.b ELSE local.c
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_a = _symbols[offset + 3];
					final Expression a = (Expression) _symbol_a.value;
					final Symbol _symbol_b = _symbols[offset + 5];
					final Statement b = (Statement) _symbol_b.value;
					final Symbol _symbol_c = _symbols[offset + 7];
					final Statement c = (Statement) _symbol_c.value;
					 return new If(a, b, c);
				}
			},
			new Action() {	// [34] local1 = WHILE LPAREN expr.a RPAREN INVARIANT COLON exprs.i GAMMA COLON gamma_mappings.g local.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_a = _symbols[offset + 3];
					final Expression a = (Expression) _symbol_a.value;
					final Symbol _symbol_i = _symbols[offset + 7];
					final ArrayList _list_i = (ArrayList) _symbol_i.value;
					final Expression[] i = _list_i == null ? new Expression[0] : (Expression[]) _list_i.toArray(new Expression[_list_i.size()]);
					final Symbol _symbol_g = _symbols[offset + 10];
					final ArrayList _list_g = (ArrayList) _symbol_g.value;
					final GammaMapping[] g = _list_g == null ? new GammaMapping[0] : (GammaMapping[]) _list_g.toArray(new GammaMapping[_list_g.size()]);
					final Symbol _symbol_b = _symbols[offset + 11];
					final Statement b = (Statement) _symbol_b.value;
					 return new While(a, i, g, b);
				}
			},
			new Action() {	// [35] local1 = WHILE LPAREN expr.a RPAREN INVARIANT COLON exprs.i GAMMA COLON gamma_mappings.g STABLE COLON ID.n local.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_a = _symbols[offset + 3];
					final Expression a = (Expression) _symbol_a.value;
					final Symbol _symbol_i = _symbols[offset + 7];
					final ArrayList _list_i = (ArrayList) _symbol_i.value;
					final Expression[] i = _list_i == null ? new Expression[0] : (Expression[]) _list_i.toArray(new Expression[_list_i.size()]);
					final Symbol _symbol_g = _symbols[offset + 10];
					final ArrayList _list_g = (ArrayList) _symbol_g.value;
					final GammaMapping[] g = _list_g == null ? new GammaMapping[0] : (GammaMapping[]) _list_g.toArray(new GammaMapping[_list_g.size()]);
					final Symbol _symbol_n = _symbols[offset + 13];
					final String n = (String) _symbol_n.value;
					final Symbol _symbol_b = _symbols[offset + 14];
					final Statement b = (Statement) _symbol_b.value;
					 return new While(a, i, g, n, b);
				}
			},
			new Action() {	// [36] local1 = error SEMICOLON
				public Symbol reduce(Symbol[] _symbols, int offset) {
					 return Malformed.self();
				}
			},
			Action.RETURN,	// [37] expr = PREFIX
			Action.RETURN,	// [38] expr = POSTFIX
			new Action() {	// [39] expr = ID.n
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_n = _symbols[offset + 1];
					final String n = (String) _symbol_n.value;
					 return new Id(n);
				}
			},
			new Action() {	// [40] expr = REG_ID.n
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_n = _symbols[offset + 1];
					final String n = (String) _symbol_n.value;
					 return new Id(n);
				}
			},
			new Action() {	// [41] expr = NUM.n
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_n = _symbols[offset + 1];
					final Integer n = (Integer) _symbol_n.value;
					 return new Lit(n);
				}
			},
			new Action() {	// [42] expr = PLUS expr.a
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_a = _symbols[offset + 2];
					final Expression a = (Expression) _symbol_a.value;
					 return new PreOp("+", a);
				}
			},
			new Action() {	// [43] expr = MINUS expr.a
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_a = _symbols[offset + 2];
					final Expression a = (Expression) _symbol_a.value;
					 return new PreOp("-", a);
				}
			},
			new Action() {	// [44] expr = BANG expr.a
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_a = _symbols[offset + 2];
					final Expression a = (Expression) _symbol_a.value;
					 return new PreOp("!", a);
				}
			},
			new Action() {	// [45] expr = TILDE expr.a
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_a = _symbols[offset + 2];
					final Expression a = (Expression) _symbol_a.value;
					 return new PreOp("~", a);
				}
			},
			new Action() {	// [46] expr = expr.a STAR expr.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_a = _symbols[offset + 1];
					final Expression a = (Expression) _symbol_a.value;
					final Symbol _symbol_b = _symbols[offset + 3];
					final Expression b = (Expression) _symbol_b.value;
					 return new BinOp("*", a, b);
				}
			},
			new Action() {	// [47] expr = expr.a DIV expr.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_a = _symbols[offset + 1];
					final Expression a = (Expression) _symbol_a.value;
					final Symbol _symbol_b = _symbols[offset + 3];
					final Expression b = (Expression) _symbol_b.value;
					 return new BinOp("/", a, b);
				}
			},
			new Action() {	// [48] expr = expr.a MOD expr.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_a = _symbols[offset + 1];
					final Expression a = (Expression) _symbol_a.value;
					final Symbol _symbol_b = _symbols[offset + 3];
					final Expression b = (Expression) _symbol_b.value;
					 return new BinOp("%", a, b);
				}
			},
			new Action() {	// [49] expr = expr.a PLUS expr.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_a = _symbols[offset + 1];
					final Expression a = (Expression) _symbol_a.value;
					final Symbol _symbol_b = _symbols[offset + 3];
					final Expression b = (Expression) _symbol_b.value;
					 return new BinOp("+", a, b);
				}
			},
			new Action() {	// [50] expr = expr.a MINUS expr.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_a = _symbols[offset + 1];
					final Expression a = (Expression) _symbol_a.value;
					final Symbol _symbol_b = _symbols[offset + 3];
					final Expression b = (Expression) _symbol_b.value;
					 return new BinOp("-", a, b);
				}
			},
			new Action() {	// [51] expr = expr.a SHL expr.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_a = _symbols[offset + 1];
					final Expression a = (Expression) _symbol_a.value;
					final Symbol _symbol_b = _symbols[offset + 3];
					final Expression b = (Expression) _symbol_b.value;
					 return new BinOp("<<",a, b);
				}
			},
			new Action() {	// [52] expr = expr.a SHR expr.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_a = _symbols[offset + 1];
					final Expression a = (Expression) _symbol_a.value;
					final Symbol _symbol_b = _symbols[offset + 3];
					final Expression b = (Expression) _symbol_b.value;
					 return new BinOp(">>",a, b);
				}
			},
			new Action() {	// [53] expr = expr.a ASHR expr.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_a = _symbols[offset + 1];
					final Expression a = (Expression) _symbol_a.value;
					final Symbol _symbol_b = _symbols[offset + 3];
					final Expression b = (Expression) _symbol_b.value;
					 return new BinOp(">>>",a, b);
				}
			},
			new Action() {	// [54] expr = expr.a LT expr.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_a = _symbols[offset + 1];
					final Expression a = (Expression) _symbol_a.value;
					final Symbol _symbol_b = _symbols[offset + 3];
					final Expression b = (Expression) _symbol_b.value;
					 return new BinOp("<", a, b);
				}
			},
			new Action() {	// [55] expr = expr.a LE expr.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_a = _symbols[offset + 1];
					final Expression a = (Expression) _symbol_a.value;
					final Symbol _symbol_b = _symbols[offset + 3];
					final Expression b = (Expression) _symbol_b.value;
					 return new BinOp("<=",a, b);
				}
			},
			new Action() {	// [56] expr = expr.a GE expr.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_a = _symbols[offset + 1];
					final Expression a = (Expression) _symbol_a.value;
					final Symbol _symbol_b = _symbols[offset + 3];
					final Expression b = (Expression) _symbol_b.value;
					 return new BinOp(">=",a, b);
				}
			},
			new Action() {	// [57] expr = expr.a GT expr.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_a = _symbols[offset + 1];
					final Expression a = (Expression) _symbol_a.value;
					final Symbol _symbol_b = _symbols[offset + 3];
					final Expression b = (Expression) _symbol_b.value;
					 return new BinOp(">", a, b);
				}
			},
			new Action() {	// [58] expr = expr.a EQ expr.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_a = _symbols[offset + 1];
					final Expression a = (Expression) _symbol_a.value;
					final Symbol _symbol_b = _symbols[offset + 3];
					final Expression b = (Expression) _symbol_b.value;
					 return new BinOp("==",a, b);
				}
			},
			new Action() {	// [59] expr = expr.a NEQ expr.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_a = _symbols[offset + 1];
					final Expression a = (Expression) _symbol_a.value;
					final Symbol _symbol_b = _symbols[offset + 3];
					final Expression b = (Expression) _symbol_b.value;
					 return new BinOp("!=",a, b);
				}
			},
			new Action() {	// [60] expr = expr.a AMP expr.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_a = _symbols[offset + 1];
					final Expression a = (Expression) _symbol_a.value;
					final Symbol _symbol_b = _symbols[offset + 3];
					final Expression b = (Expression) _symbol_b.value;
					 return new BinOp("&", a, b);
				}
			},
			new Action() {	// [61] expr = expr.a CARET expr.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_a = _symbols[offset + 1];
					final Expression a = (Expression) _symbol_a.value;
					final Symbol _symbol_b = _symbols[offset + 3];
					final Expression b = (Expression) _symbol_b.value;
					 return new BinOp("^", a, b);
				}
			},
			new Action() {	// [62] expr = expr.a PIPE expr.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_a = _symbols[offset + 1];
					final Expression a = (Expression) _symbol_a.value;
					final Symbol _symbol_b = _symbols[offset + 3];
					final Expression b = (Expression) _symbol_b.value;
					 return new BinOp("|", a, b);
				}
			},
			new Action() {	// [63] expr = expr.a AND expr.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_a = _symbols[offset + 1];
					final Expression a = (Expression) _symbol_a.value;
					final Symbol _symbol_b = _symbols[offset + 3];
					final Expression b = (Expression) _symbol_b.value;
					 return new BinOp("&&",a, b);
				}
			},
			new Action() {	// [64] expr = expr.a OR expr.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_a = _symbols[offset + 1];
					final Expression a = (Expression) _symbol_a.value;
					final Symbol _symbol_b = _symbols[offset + 3];
					final Expression b = (Expression) _symbol_b.value;
					 return new BinOp("||",a, b);
				}
			},
			new Action() {	// [65] expr = LPAREN expr.e RPAREN
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_e = _symbols[offset + 2];
					final Expression e = (Expression) _symbol_e.value;
					 return (Symbol) e;
				}
			},
			new Action() {	// [66] expr = TRUE
				public Symbol reduce(Symbol[] _symbols, int offset) {
					 return new Const("True");
				}
			},
			new Action() {	// [67] expr = FALSE
				public Symbol reduce(Symbol[] _symbols, int offset) {
					 return new Const("False");
				}
			},
			new Action() {	// [68] lpred = LPRED COLON expr.a
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_a = _symbols[offset + 3];
					final Expression a = (Expression) _symbol_a.value;
					 return (Symbol) a;
				}
			},
			new Action() {	// [69] mode = MODE COLON NORW
				public Symbol reduce(Symbol[] _symbols, int offset) {
					 return NoRW.instance();
				}
			},
			new Action() {	// [70] mode = MODE COLON NOW
				public Symbol reduce(Symbol[] _symbols, int offset) {
					 return NoW.instance();
				}
			},
			new Action() {	// [71] mode = MODE COLON RW
				public Symbol reduce(Symbol[] _symbols, int offset) {
					 return RW.instance();
				}
			},
			new Action() {	// [72] gamma_mappings = gamma_mapping
				public Symbol reduce(Symbol[] _symbols, int offset) {
					ArrayList lst = new ArrayList(); lst.add(_symbols[offset + 1].value); return new Symbol(lst);
				}
			},
			new Action() {	// [73] gamma_mappings = gamma_mappings COMMA gamma_mapping
				public Symbol reduce(Symbol[] _symbols, int offset) {
					((ArrayList) _symbols[offset + 1].value).add(_symbols[offset + 3].value); return _symbols[offset + 1];
				}
			},
			new Action() {	// [74] gamma_mapping = ID.n MAPSTO security.s
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_n = _symbols[offset + 1];
					final String n = (String) _symbol_n.value;
					final Symbol _symbol_s = _symbols[offset + 3];
					final Security s = (Security) _symbol_s.value;
					 return new GammaMapping(n, s);
				}
			},
			new Action() {	// [75] gamma_mapping = REG_ID.n MAPSTO security.s
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_n = _symbols[offset + 1];
					final String n = (String) _symbol_n.value;
					final Symbol _symbol_s = _symbols[offset + 3];
					final Security s = (Security) _symbol_s.value;
					 return new GammaMapping(n, s);
				}
			},
			new Action() {	// [76] security = LOW
				public Symbol reduce(Symbol[] _symbols, int offset) {
					 return Low.instance();
				}
			},
			new Action() {	// [77] security = HIGH
				public Symbol reduce(Symbol[] _symbols, int offset) {
					 return High.instance();
				}
			}
		};
	}

	protected Symbol invokeReduceAction(int rule_num, int offset) {
		return actions[rule_num].reduce(_symbols, offset);
	}
}
