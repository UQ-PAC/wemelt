package tool;

import beaver.*;
import java.util.ArrayList;

/**
 * This class is a LALR parser generated by
 * <a href="http://beaver.sourceforge.net">Beaver</a> v0.9.6.1
 * from the grammar specification "Parser.grammar".
 */
public class Parser extends beaver.Parser {
	static public class Terminals {
		static public final short EOF = 0;
		static public final short PLUS = 1;
		static public final short MINUS = 2;
		static public final short ID = 3;
		static public final short REG_ID = 4;
		static public final short LPAREN = 5;
		static public final short NUM = 6;
		static public final short PREFIX = 7;
		static public final short POSTFIX = 8;
		static public final short BANG = 9;
		static public final short TILDE = 10;
		static public final short TRUE = 11;
		static public final short FALSE = 12;
		static public final short STAR = 13;
		static public final short DIV = 14;
		static public final short MOD = 15;
		static public final short SHL = 16;
		static public final short SHR = 17;
		static public final short ASHR = 18;
		static public final short LT = 19;
		static public final short LE = 20;
		static public final short GE = 21;
		static public final short GT = 22;
		static public final short EQ = 23;
		static public final short NEQ = 24;
		static public final short AMP = 25;
		static public final short CARET = 26;
		static public final short COLON = 27;
		static public final short SEMICOLON = 28;
		static public final short PIPE = 29;
		static public final short AND = 30;
		static public final short WHILE = 31;
		static public final short OR = 32;
		static public final short DO = 33;
		static public final short IF = 34;
		static public final short LBRACE = 35;
		static public final short FENCE = 36;
		static public final short CFENCE = 37;
		static public final short COMMA = 38;
		static public final short LBRACK = 39;
		static public final short RBRACK = 40;
		static public final short RPAREN = 41;
		static public final short LPRED = 42;
		static public final short MODE = 43;
		static public final short RBRACE = 44;
		static public final short MAPSTO = 45;
		static public final short LOW = 46;
		static public final short HIGH = 47;
		static public final short INVARIANT = 48;
		static public final short GAMMA = 49;
		static public final short STABLE = 50;
		static public final short ASG = 51;
		static public final short ARRAY = 52;
		static public final short GAMMA_0 = 53;
		static public final short VAR = 54;
		static public final short CAS = 55;
		static public final short P_0 = 56;
		static public final short ELSE = 57;
		static public final short NORW = 58;
		static public final short NOW = 59;
		static public final short RW = 60;

		static public final String[] NAMES = {
			"EOF",
			"PLUS",
			"MINUS",
			"ID",
			"REG_ID",
			"LPAREN",
			"NUM",
			"PREFIX",
			"POSTFIX",
			"BANG",
			"TILDE",
			"TRUE",
			"FALSE",
			"STAR",
			"DIV",
			"MOD",
			"SHL",
			"SHR",
			"ASHR",
			"LT",
			"LE",
			"GE",
			"GT",
			"EQ",
			"NEQ",
			"AMP",
			"CARET",
			"COLON",
			"SEMICOLON",
			"PIPE",
			"AND",
			"WHILE",
			"OR",
			"DO",
			"IF",
			"LBRACE",
			"FENCE",
			"CFENCE",
			"COMMA",
			"LBRACK",
			"RBRACK",
			"RPAREN",
			"LPRED",
			"MODE",
			"RBRACE",
			"MAPSTO",
			"LOW",
			"HIGH",
			"INVARIANT",
			"GAMMA",
			"STABLE",
			"ASG",
			"ARRAY",
			"GAMMA_0",
			"VAR",
			"CAS",
			"P_0",
			"ELSE",
			"NORW",
			"NOW",
			"RW"
		};
	}

	static final ParsingTables PARSING_TABLES = new ParsingTables(
		"U9pjM7byLDKL$YRp9aInW8YW93XQosG1b4r4P1m8Qmm14aYHIgLLt7UffHPBKOksjHHRn6g" +
		"rMaH0G55sK260u0O2GI3Aub9jQL4M5r2hxVMxzvqtSz#GcKpuuU$d7xpyldVEFUTyvwvpvq" +
		"o0q7LeZuueGbkSXRNgConK2gVWL8J4rXbTq1NTq1qNe0UAqHjzqH$Nen0NOe3wFmOQVYl36" +
		"OTyJC8OX34QjwRbdm17yp5B#4tmBh9mFEQZ4lFGJ4t5SMdvkZVDNoFy29RZD4n37hMV6cri" +
		"MhxcQ7w4V1tzAtmFZN1rMewEq9mJutsUPBY$ftQjqVwO4VzuuR#DDp4TsUfJt8Xtp8oQfkM" +
		"VZ5iClt5ypPkZ8TUyHOPhNe42isUVnCT$XXdr0zH#QRH7w#2tCVrlS$bgBzPn1YxZ3hnEVx" +
		"iw#3Dyynz2RJf#Xyln6$oLsXHSKIz#1SucwnbSYJ$ZSQp2QhoOqPvVHtu5EX2TY7CoujnaE" +
		"ESIvn7dPyJvcU54YHZHCoFEpmsd5z67w9SHfm8bH2bHHWpAWAFFMWM64XSHFy8lwkIqOjm8" +
		"dhNRCpfhxkvSGln4#hgAk2ObOnY6cxYH#246enmNuyUu59STDNi5RY1k9cx3g6#zj##QtTs" +
		"DySJTnk$ko4ErxaRw75EDRor#ZOLu7ejmPxro7BCVirjsrXeLUCvuKZ4Zc83M$5vQYYf6lu" +
		"ItJ5Ght8ExU1VzmBgB9gJCqGeJyJIZ9rZHEIPId#d9g44LDXZzjyQwqNUcNNqJO$GDk9Lv$" +
		"k3BuzKzz$cizvgvpJ2#Fs4PxiTVy20UDks$OGuUmMFaL5kSlnlV4ymtM#t7EFK$Nxvnc6kr" +
		"6Qc#nWB6BbRxw5lgzs49Utm1ApZcbNWPh#1LHhw6zOpSR4LMuGsvsQknXRxjAMvs7RC3Ex6" +
		"BAwFr6gw6VWvV9LUFqAThYIVXFa7ayXr1Iv#rGTogzpUPyvJnpgHNFsSItsVCwHAZHm4yon" +
		"YjjOJtkAD8Q05MbBhcQioHWMFJOt78ScrDMCSrPGNNZ7LLSzPGUkLQidxDuugSnjZJ3J$FS" +
		"CAi5CxW6CxacMkTbb$AUaBpkme$cz$dWrW3bBFs6a9c9R$Rq$5rRvfVBFmeQu0OxzIUr0f5" +
		"IyVN7CsFakz6dyKgAPAMeoCqfo3UPscz#lJuKU7tOytGYz$gOCOoCwDsQVa5ikRvyJLlnxy" +
		"mHv7PcaVvhMFlMPIxNv$nUtnlpTkQ6RYCGiv0#pFXU$FFfwRd7sAbLMYqQBtukgrP4SFlnc" +
		"gpUqPxdaU#vdh8XDFf23X7qi#HSEpup3ZwhDcCK9sSF1CNPbMVoLdpTaV3xYiLGyVhk13lW" +
		"GQynu$ZRvU6$ErxjEpsNC$zrdlxBjhjtV1sfBRTg2k7zdMcjulHsjSxnp7xCRjdH$n4fVxS" +
		"HiptKX7QI5MYaOSEh4x2$4MVk8iYANFeokGSHaTyqLwl7KpkOgFd6cj$tvbsTHtZtO2vlZn" +
		"UtTFUP#repItN$8KvheuoWmjDEypllmGd93FBewyjVV3by$Ug8y5woOijIlBrCpqMSyovx2" +
		"FRr0sw7QQUY6n3ktkpvvlnvAUusTtgh80n$OrUX2B5fvPLSlKeVQQMKEP17$JbEugIDDRQE" +
		"GDGObg32Vt$eQ5Iet0KRemPJucInns5DJRWlV5yqL1DaKtaK3zWwXyuGqmj3GmRxrR5yuXA" +
		"hNlWqvsuYNYGk6AyLtFhcXguEods2sAbt#OymbUr#DclCz$pSHoV0bazz6XTVzO0aHU972L" +
		"o34CEKju519fIJcAUEoWV1aB3A6TIZg1SGFjOoYhAhodNqTw8ieQo6UNxn7v#Y4B4YKG#sm" +
		"MKdIYvLi4OyxEVO2db3ahc3gnAp2LmCcsNKGadRC4RHOuLUO$8oI8VuolcNvF0#UolBMKt#" +
		"kVGC99o2ULjj8qGtejyFSIszcsalaouzucSBPBp37Ai$BsBm25Y5#U#Kd9mpi7TLBvaVtjf" +
		"v$o2N7D7pranTZZrg#dJjZ6oNxSJrnDRfNqBSJ$Ha2WZ7c0yryYvavXCp2LQCDUf4lyeiP3" +
		"WMZlS7sSvmLzbWVF4FyjQXz7MEU6PSiucUDwSrmYkH$0aojd4TZa77yYyJg5jDR5Ok1k87i" +
		"mtaP9hvN1VdLNYsqnxeRt#OYydNYR#Gxn2y8mubSGcyLzfnN9j7PuRPmlnB#9IvfmflYaYT" +
		"$ACwJNQG$1puEmL#pulZtk6dJs9lE1PTGwAdcF5xKyUhyMfI6fFgIMcjRyTIfvxawJu9PPU" +
		"8tAtAmDXaL6HCP4zHShT4HWkycAHDuiSBV9MaVUAd2XoaiXf8gUBbFKDnCzBOeo15KbjEU#" +
		"1rIAtYTmdya1o3h7dYFnCv26$FwkpfNUfBOVbx#fA58diQVaM#MFnkTZjTV#A69aKDoffl2" +
		"qiNR#gh3wM7puchB7yDUd6duXpRk1vSQn#SjbkRlad9iLFjNIxxppxivuf#6mZRvxaYwMES" +
		"uPba4lEdBDUsk$nq$KsV8#QQTupr3JrUDmsNUGJwYFreT4EgY$L5qRROTu7rESIivrOIwmX" +
		"U6Shtajg5R6IuFUGMa7m3bGl4CyJpn7BYAK4xpYrc5X4yCvK2zG6zRfQR$AkKxm5rQi4RoV" +
		"5cqgzPEpprJprB98UzPQblqdmDbFRufQjn9R3EFyL#OR8pSaHOgzEQcyYDgedrLVgOtNeiE" +
		"YTQfTwXvBtgjfZBC#8vz$cFKVDLhFKxYGMRrNrJ$MKPPchFk3xQMdfdNjV$KEzoyObg6JDK" +
		"ybhpKKEgya04JHraSO0egy1QoCoIgZt8GORPB6IuZrAVIWH5GpayHr8tq3cTFKSGGCB8PGp" +
		"jfnnkdOQGdqG4MFVCN9YhBPZZ8lHxo8aRMrlH9n0D3Q#2yXBm16PbOJWKORRNp$g$LaDbb4" +
		"lOp$5R7leJLjlobu6sGQbj6dq#0OCDnZQ");

	private final Action[] actions;

	public Parser() {
		super(PARSING_TABLES);
		actions = new Action[] {
			new Action() {	// [0] unit = defs.v locals.s
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_v = _symbols[offset + 1];
					final ArrayList _list_v = (ArrayList) _symbol_v.value;
					final Definition[] v = _list_v == null ? new Definition[0] : (Definition[]) _list_v.toArray(new Definition[_list_v.size()]);
					final Symbol _symbol_s = _symbols[offset + 2];
					final ArrayList _list_s = (ArrayList) _symbol_s.value;
					final Statement[] s = _list_s == null ? new Statement[0] : (Statement[]) _list_s.toArray(new Statement[_list_s.size()]);
					 return new Global(v, s);
				}
			},
			new Action() {	// [1] unit = defs.v GAMMA_0 COLON gamma_mappings.f locals.s
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_v = _symbols[offset + 1];
					final ArrayList _list_v = (ArrayList) _symbol_v.value;
					final Definition[] v = _list_v == null ? new Definition[0] : (Definition[]) _list_v.toArray(new Definition[_list_v.size()]);
					final Symbol _symbol_f = _symbols[offset + 4];
					final ArrayList _list_f = (ArrayList) _symbol_f.value;
					final GammaMapping[] f = _list_f == null ? new GammaMapping[0] : (GammaMapping[]) _list_f.toArray(new GammaMapping[_list_f.size()]);
					final Symbol _symbol_s = _symbols[offset + 5];
					final ArrayList _list_s = (ArrayList) _symbol_s.value;
					final Statement[] s = _list_s == null ? new Statement[0] : (Statement[]) _list_s.toArray(new Statement[_list_s.size()]);
					 return new Global(v, f, s);
				}
			},
			new Action() {	// [2] unit = defs.v P_0 COLON exprs.e locals.s
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_v = _symbols[offset + 1];
					final ArrayList _list_v = (ArrayList) _symbol_v.value;
					final Definition[] v = _list_v == null ? new Definition[0] : (Definition[]) _list_v.toArray(new Definition[_list_v.size()]);
					final Symbol _symbol_e = _symbols[offset + 4];
					final ArrayList _list_e = (ArrayList) _symbol_e.value;
					final Expression[] e = _list_e == null ? new Expression[0] : (Expression[]) _list_e.toArray(new Expression[_list_e.size()]);
					final Symbol _symbol_s = _symbols[offset + 5];
					final ArrayList _list_s = (ArrayList) _symbol_s.value;
					final Statement[] s = _list_s == null ? new Statement[0] : (Statement[]) _list_s.toArray(new Statement[_list_s.size()]);
					 return new Global(v, e, s);
				}
			},
			new Action() {	// [3] unit = defs.v P_0 COLON exprs.e GAMMA_0 COLON gamma_mappings.f locals.s
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_v = _symbols[offset + 1];
					final ArrayList _list_v = (ArrayList) _symbol_v.value;
					final Definition[] v = _list_v == null ? new Definition[0] : (Definition[]) _list_v.toArray(new Definition[_list_v.size()]);
					final Symbol _symbol_e = _symbols[offset + 4];
					final ArrayList _list_e = (ArrayList) _symbol_e.value;
					final Expression[] e = _list_e == null ? new Expression[0] : (Expression[]) _list_e.toArray(new Expression[_list_e.size()]);
					final Symbol _symbol_f = _symbols[offset + 7];
					final ArrayList _list_f = (ArrayList) _symbol_f.value;
					final GammaMapping[] f = _list_f == null ? new GammaMapping[0] : (GammaMapping[]) _list_f.toArray(new GammaMapping[_list_f.size()]);
					final Symbol _symbol_s = _symbols[offset + 8];
					final ArrayList _list_s = (ArrayList) _symbol_s.value;
					final Statement[] s = _list_s == null ? new Statement[0] : (Statement[]) _list_s.toArray(new Statement[_list_s.size()]);
					 return new Global(v, e, f, s);
				}
			},
			new Action() {	// [4] exprs = expr
				public Symbol reduce(Symbol[] _symbols, int offset) {
					ArrayList lst = new ArrayList(); lst.add(_symbols[offset + 1].value); return new Symbol(lst);
				}
			},
			new Action() {	// [5] exprs = exprs COMMA expr
				public Symbol reduce(Symbol[] _symbols, int offset) {
					((ArrayList) _symbols[offset + 1].value).add(_symbols[offset + 3].value); return _symbols[offset + 1];
				}
			},
			new Action() {	// [6] local = SEMICOLON
				public Symbol reduce(Symbol[] _symbols, int offset) {
					 return Block.empty();
				}
			},
			Action.RETURN,	// [7] local = local1
			Action.RETURN,	// [8] local2 = local1
			new Action() {	// [9] lst$local = local
				public Symbol reduce(Symbol[] _symbols, int offset) {
					ArrayList lst = new ArrayList(); lst.add(_symbols[offset + 1].value); return new Symbol(lst);
				}
			},
			new Action() {	// [10] lst$local = lst$local local
				public Symbol reduce(Symbol[] _symbols, int offset) {
					((ArrayList) _symbols[offset + 1].value).add(_symbols[offset + 2].value); return _symbols[offset + 1];
				}
			},
			Action.NONE,  	// [11] opt$lst$local = 
			Action.RETURN,	// [12] opt$lst$local = lst$local
			Action.RETURN,	// [13] locals = opt$lst$local
			new Action() {	// [14] lst$local2 = local2
				public Symbol reduce(Symbol[] _symbols, int offset) {
					ArrayList lst = new ArrayList(); lst.add(_symbols[offset + 1].value); return new Symbol(lst);
				}
			},
			new Action() {	// [15] lst$local2 = lst$local2 local2
				public Symbol reduce(Symbol[] _symbols, int offset) {
					((ArrayList) _symbols[offset + 1].value).add(_symbols[offset + 2].value); return _symbols[offset + 1];
				}
			},
			Action.NONE,  	// [16] opt$lst$local2 = 
			Action.RETURN,	// [17] opt$lst$local2 = lst$local2
			Action.RETURN,	// [18] locals2 = opt$lst$local2
			new Action() {	// [19] id_reg_id = ID.n
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_n = _symbols[offset + 1];
					final String n = (String) _symbol_n.value;
					 return new Id(n);
				}
			},
			new Action() {	// [20] id_reg_id = REG_ID.n
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_n = _symbols[offset + 1];
					final String n = (String) _symbol_n.value;
					 return new Id(n);
				}
			},
			new Action() {	// [21] definition = VAR REG_ID.n COLON lpred.l
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_n = _symbols[offset + 2];
					final String n = (String) _symbol_n.value;
					final Symbol _symbol_l = _symbols[offset + 4];
					final Expression l = (Expression) _symbol_l.value;
					 return new VarDef(n, l);
				}
			},
			new Action() {	// [22] definition = VAR REG_ID.n
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_n = _symbols[offset + 2];
					final String n = (String) _symbol_n.value;
					 return new VarDef(n);
				}
			},
			new Action() {	// [23] definition = VAR ID.n COLON lpred.l mode.m
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_n = _symbols[offset + 2];
					final String n = (String) _symbol_n.value;
					final Symbol _symbol_l = _symbols[offset + 4];
					final Expression l = (Expression) _symbol_l.value;
					final Symbol _symbol_m = _symbols[offset + 5];
					final Mode m = (Mode) _symbol_m.value;
					  return new VarDef(n, l, m);
				}
			},
			new Action() {	// [24] definition = VAR ID.n COLON mode.m
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_n = _symbols[offset + 2];
					final String n = (String) _symbol_n.value;
					final Symbol _symbol_m = _symbols[offset + 4];
					final Mode m = (Mode) _symbol_m.value;
					 return new VarDef(n, m);
				}
			},
			new Action() {	// [25] definition = ARRAY ID.n LBRACK NUM.s RBRACK COLON lpred.l mode.m
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_n = _symbols[offset + 2];
					final String n = (String) _symbol_n.value;
					final Symbol _symbol_s = _symbols[offset + 4];
					final Integer s = (Integer) _symbol_s.value;
					final Symbol _symbol_l = _symbols[offset + 7];
					final Expression l = (Expression) _symbol_l.value;
					final Symbol _symbol_m = _symbols[offset + 8];
					final Mode m = (Mode) _symbol_m.value;
					 return new ArrayDef(n, s, l, m);
				}
			},
			new Action() {	// [26] definition = ARRAY ID.n LBRACK NUM.s RBRACK COLON lpredindexes.l mode.m
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_n = _symbols[offset + 2];
					final String n = (String) _symbol_n.value;
					final Symbol _symbol_s = _symbols[offset + 4];
					final Integer s = (Integer) _symbol_s.value;
					final Symbol _symbol_l = _symbols[offset + 7];
					final ArrayList _list_l = (ArrayList) _symbol_l.value;
					final Expression[] l = _list_l == null ? new Expression[0] : (Expression[]) _list_l.toArray(new Expression[_list_l.size()]);
					final Symbol _symbol_m = _symbols[offset + 8];
					final Mode m = (Mode) _symbol_m.value;
					 return new ArrayDef(n, s, l, m);
				}
			},
			new Action() {	// [27] definition = ARRAY ID.n LBRACK NUM.s RBRACK COLON mode.m
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_n = _symbols[offset + 2];
					final String n = (String) _symbol_n.value;
					final Symbol _symbol_s = _symbols[offset + 4];
					final Integer s = (Integer) _symbol_s.value;
					final Symbol _symbol_m = _symbols[offset + 7];
					final Mode m = (Mode) _symbol_m.value;
					 return new ArrayDef(n, s, m);
				}
			},
			new Action() {	// [28] definition = ARRAY REG_ID.n LBRACK NUM.s RBRACK COLON lpred.l
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_n = _symbols[offset + 2];
					final String n = (String) _symbol_n.value;
					final Symbol _symbol_s = _symbols[offset + 4];
					final Integer s = (Integer) _symbol_s.value;
					final Symbol _symbol_l = _symbols[offset + 7];
					final Expression l = (Expression) _symbol_l.value;
					 return new ArrayDef(n, s, l);
				}
			},
			new Action() {	// [29] definition = ARRAY REG_ID.n LBRACK NUM.s RBRACK COLON lpredindexes.l
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_n = _symbols[offset + 2];
					final String n = (String) _symbol_n.value;
					final Symbol _symbol_s = _symbols[offset + 4];
					final Integer s = (Integer) _symbol_s.value;
					final Symbol _symbol_l = _symbols[offset + 7];
					final ArrayList _list_l = (ArrayList) _symbol_l.value;
					final Expression[] l = _list_l == null ? new Expression[0] : (Expression[]) _list_l.toArray(new Expression[_list_l.size()]);
					 return new ArrayDef(n, s, l);
				}
			},
			new Action() {	// [30] definition = ARRAY REG_ID.n LBRACK NUM.s RBRACK
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_n = _symbols[offset + 2];
					final String n = (String) _symbol_n.value;
					final Symbol _symbol_s = _symbols[offset + 4];
					final Integer s = (Integer) _symbol_s.value;
					 return new ArrayDef(n, s);
				}
			},
			new Action() {	// [31] lst$definition = definition
				public Symbol reduce(Symbol[] _symbols, int offset) {
					ArrayList lst = new ArrayList(); lst.add(_symbols[offset + 1].value); return new Symbol(lst);
				}
			},
			new Action() {	// [32] lst$definition = lst$definition definition
				public Symbol reduce(Symbol[] _symbols, int offset) {
					((ArrayList) _symbols[offset + 1].value).add(_symbols[offset + 2].value); return _symbols[offset + 1];
				}
			},
			Action.NONE,  	// [33] opt$lst$definition = 
			Action.RETURN,	// [34] opt$lst$definition = lst$definition
			Action.RETURN,	// [35] defs = opt$lst$definition
			new Action() {	// [36] local1 = LBRACE locals2.ss RBRACE
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_ss = _symbols[offset + 2];
					final ArrayList _list_ss = (ArrayList) _symbol_ss.value;
					final Statement[] ss = _list_ss == null ? new Statement[0] : (Statement[]) _list_ss.toArray(new Statement[_list_ss.size()]);
					 return new Block(ss);
				}
			},
			new Action() {	// [37] local1 = id_reg_id.n ASG expr.b SEMICOLON
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_n = _symbols[offset + 1];
					final Id n = (Id) _symbol_n.value;
					final Symbol _symbol_b = _symbols[offset + 3];
					final Expression b = (Expression) _symbol_b.value;
					 return new Assignment(n, b);
				}
			},
			new Action() {	// [38] local1 = id_reg_id.n ASG CAS LPAREN id_reg_id.x COMMA expr.y COMMA expr.z RPAREN SEMICOLON
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_n = _symbols[offset + 1];
					final Id n = (Id) _symbol_n.value;
					final Symbol _symbol_x = _symbols[offset + 5];
					final Id x = (Id) _symbol_x.value;
					final Symbol _symbol_y = _symbols[offset + 7];
					final Expression y = (Expression) _symbol_y.value;
					final Symbol _symbol_z = _symbols[offset + 9];
					final Expression z = (Expression) _symbol_z.value;
					 return new CompareAndSwap(n, x, y, z);
				}
			},
			new Action() {	// [39] local1 = id_reg_id.n LBRACK expr.i RBRACK ASG expr.b SEMICOLON
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_n = _symbols[offset + 1];
					final Id n = (Id) _symbol_n.value;
					final Symbol _symbol_i = _symbols[offset + 3];
					final Expression i = (Expression) _symbol_i.value;
					final Symbol _symbol_b = _symbols[offset + 6];
					final Expression b = (Expression) _symbol_b.value;
					 return new ArrayAssignment(n, i, b);
				}
			},
			new Action() {	// [40] local1 = FENCE SEMICOLON
				public Symbol reduce(Symbol[] _symbols, int offset) {
					 return Fence.self();
				}
			},
			new Action() {	// [41] local1 = CFENCE SEMICOLON
				public Symbol reduce(Symbol[] _symbols, int offset) {
					 return ControlFence.self();
				}
			},
			new Action() {	// [42] local1 = IF LPAREN expr.a RPAREN local.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_a = _symbols[offset + 3];
					final Expression a = (Expression) _symbol_a.value;
					final Symbol _symbol_b = _symbols[offset + 5];
					final Statement b = (Statement) _symbol_b.value;
					 return new If(a, b);
				}
			},
			new Action() {	// [43] local1 = IF LPAREN expr.a RPAREN local.b ELSE local.c
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_a = _symbols[offset + 3];
					final Expression a = (Expression) _symbol_a.value;
					final Symbol _symbol_b = _symbols[offset + 5];
					final Statement b = (Statement) _symbol_b.value;
					final Symbol _symbol_c = _symbols[offset + 7];
					final Statement c = (Statement) _symbol_c.value;
					 return new If(a, b, c);
				}
			},
			new Action() {	// [44] local1 = WHILE LPAREN expr.a RPAREN INVARIANT COLON exprs.i GAMMA COLON gamma_mappings.g local.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_a = _symbols[offset + 3];
					final Expression a = (Expression) _symbol_a.value;
					final Symbol _symbol_i = _symbols[offset + 7];
					final ArrayList _list_i = (ArrayList) _symbol_i.value;
					final Expression[] i = _list_i == null ? new Expression[0] : (Expression[]) _list_i.toArray(new Expression[_list_i.size()]);
					final Symbol _symbol_g = _symbols[offset + 10];
					final ArrayList _list_g = (ArrayList) _symbol_g.value;
					final GammaMapping[] g = _list_g == null ? new GammaMapping[0] : (GammaMapping[]) _list_g.toArray(new GammaMapping[_list_g.size()]);
					final Symbol _symbol_b = _symbols[offset + 11];
					final Statement b = (Statement) _symbol_b.value;
					 return new While(a, i, g, b);
				}
			},
			new Action() {	// [45] local1 = WHILE LPAREN expr.a RPAREN INVARIANT COLON exprs.i GAMMA COLON gamma_mappings.g STABLE COLON ID.n local.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_a = _symbols[offset + 3];
					final Expression a = (Expression) _symbol_a.value;
					final Symbol _symbol_i = _symbols[offset + 7];
					final ArrayList _list_i = (ArrayList) _symbol_i.value;
					final Expression[] i = _list_i == null ? new Expression[0] : (Expression[]) _list_i.toArray(new Expression[_list_i.size()]);
					final Symbol _symbol_g = _symbols[offset + 10];
					final ArrayList _list_g = (ArrayList) _symbol_g.value;
					final GammaMapping[] g = _list_g == null ? new GammaMapping[0] : (GammaMapping[]) _list_g.toArray(new GammaMapping[_list_g.size()]);
					final Symbol _symbol_n = _symbols[offset + 13];
					final String n = (String) _symbol_n.value;
					final Symbol _symbol_b = _symbols[offset + 14];
					final Statement b = (Statement) _symbol_b.value;
					 return new While(a, i, g, n, b);
				}
			},
			new Action() {	// [46] local1 = DO INVARIANT COLON exprs.i GAMMA COLON gamma_mappings.g local.b WHILE LPAREN expr.a RPAREN
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_i = _symbols[offset + 4];
					final ArrayList _list_i = (ArrayList) _symbol_i.value;
					final Expression[] i = _list_i == null ? new Expression[0] : (Expression[]) _list_i.toArray(new Expression[_list_i.size()]);
					final Symbol _symbol_g = _symbols[offset + 7];
					final ArrayList _list_g = (ArrayList) _symbol_g.value;
					final GammaMapping[] g = _list_g == null ? new GammaMapping[0] : (GammaMapping[]) _list_g.toArray(new GammaMapping[_list_g.size()]);
					final Symbol _symbol_b = _symbols[offset + 8];
					final Statement b = (Statement) _symbol_b.value;
					final Symbol _symbol_a = _symbols[offset + 11];
					final Expression a = (Expression) _symbol_a.value;
					 return new DoWhile(a, i, g, b);
				}
			},
			new Action() {	// [47] local1 = DO INVARIANT COLON exprs.i GAMMA COLON gamma_mappings.g STABLE COLON ID.n local.b WHILE LPAREN expr.a RPAREN
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_i = _symbols[offset + 4];
					final ArrayList _list_i = (ArrayList) _symbol_i.value;
					final Expression[] i = _list_i == null ? new Expression[0] : (Expression[]) _list_i.toArray(new Expression[_list_i.size()]);
					final Symbol _symbol_g = _symbols[offset + 7];
					final ArrayList _list_g = (ArrayList) _symbol_g.value;
					final GammaMapping[] g = _list_g == null ? new GammaMapping[0] : (GammaMapping[]) _list_g.toArray(new GammaMapping[_list_g.size()]);
					final Symbol _symbol_n = _symbols[offset + 10];
					final String n = (String) _symbol_n.value;
					final Symbol _symbol_b = _symbols[offset + 11];
					final Statement b = (Statement) _symbol_b.value;
					final Symbol _symbol_a = _symbols[offset + 14];
					final Expression a = (Expression) _symbol_a.value;
					 return new DoWhile(a, i, g, n, b);
				}
			},
			new Action() {	// [48] local1 = error SEMICOLON
				public Symbol reduce(Symbol[] _symbols, int offset) {
					 return Malformed.self();
				}
			},
			Action.RETURN,	// [49] expr = PREFIX
			Action.RETURN,	// [50] expr = POSTFIX
			new Action() {	// [51] expr = id_reg_id.n
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_n = _symbols[offset + 1];
					final Id n = (Id) _symbol_n.value;
					 return n;
				}
			},
			new Action() {	// [52] expr = id_reg_id.n LBRACK expr.i RBRACK
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_n = _symbols[offset + 1];
					final Id n = (Id) _symbol_n.value;
					final Symbol _symbol_i = _symbols[offset + 3];
					final Expression i = (Expression) _symbol_i.value;
					 return new Access(n, i);
				}
			},
			new Action() {	// [53] expr = NUM.n
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_n = _symbols[offset + 1];
					final Integer n = (Integer) _symbol_n.value;
					 return new Lit(n);
				}
			},
			new Action() {	// [54] expr = PLUS expr.a
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_a = _symbols[offset + 2];
					final Expression a = (Expression) _symbol_a.value;
					 return new PreOp("+", a);
				}
			},
			new Action() {	// [55] expr = MINUS expr.a
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_a = _symbols[offset + 2];
					final Expression a = (Expression) _symbol_a.value;
					 return new PreOp("-", a);
				}
			},
			new Action() {	// [56] expr = BANG expr.a
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_a = _symbols[offset + 2];
					final Expression a = (Expression) _symbol_a.value;
					 return new PreOp("!", a);
				}
			},
			new Action() {	// [57] expr = TILDE expr.a
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_a = _symbols[offset + 2];
					final Expression a = (Expression) _symbol_a.value;
					 return new PreOp("~", a);
				}
			},
			new Action() {	// [58] expr = expr.a STAR expr.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_a = _symbols[offset + 1];
					final Expression a = (Expression) _symbol_a.value;
					final Symbol _symbol_b = _symbols[offset + 3];
					final Expression b = (Expression) _symbol_b.value;
					 return new BinOp("*", a, b);
				}
			},
			new Action() {	// [59] expr = expr.a DIV expr.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_a = _symbols[offset + 1];
					final Expression a = (Expression) _symbol_a.value;
					final Symbol _symbol_b = _symbols[offset + 3];
					final Expression b = (Expression) _symbol_b.value;
					 return new BinOp("/", a, b);
				}
			},
			new Action() {	// [60] expr = expr.a MOD expr.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_a = _symbols[offset + 1];
					final Expression a = (Expression) _symbol_a.value;
					final Symbol _symbol_b = _symbols[offset + 3];
					final Expression b = (Expression) _symbol_b.value;
					 return new BinOp("%", a, b);
				}
			},
			new Action() {	// [61] expr = expr.a PLUS expr.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_a = _symbols[offset + 1];
					final Expression a = (Expression) _symbol_a.value;
					final Symbol _symbol_b = _symbols[offset + 3];
					final Expression b = (Expression) _symbol_b.value;
					 return new BinOp("+", a, b);
				}
			},
			new Action() {	// [62] expr = expr.a MINUS expr.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_a = _symbols[offset + 1];
					final Expression a = (Expression) _symbol_a.value;
					final Symbol _symbol_b = _symbols[offset + 3];
					final Expression b = (Expression) _symbol_b.value;
					 return new BinOp("-", a, b);
				}
			},
			new Action() {	// [63] expr = expr.a SHL expr.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_a = _symbols[offset + 1];
					final Expression a = (Expression) _symbol_a.value;
					final Symbol _symbol_b = _symbols[offset + 3];
					final Expression b = (Expression) _symbol_b.value;
					 return new BinOp("<<",a, b);
				}
			},
			new Action() {	// [64] expr = expr.a SHR expr.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_a = _symbols[offset + 1];
					final Expression a = (Expression) _symbol_a.value;
					final Symbol _symbol_b = _symbols[offset + 3];
					final Expression b = (Expression) _symbol_b.value;
					 return new BinOp(">>",a, b);
				}
			},
			new Action() {	// [65] expr = expr.a ASHR expr.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_a = _symbols[offset + 1];
					final Expression a = (Expression) _symbol_a.value;
					final Symbol _symbol_b = _symbols[offset + 3];
					final Expression b = (Expression) _symbol_b.value;
					 return new BinOp(">>>",a, b);
				}
			},
			new Action() {	// [66] expr = expr.a LT expr.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_a = _symbols[offset + 1];
					final Expression a = (Expression) _symbol_a.value;
					final Symbol _symbol_b = _symbols[offset + 3];
					final Expression b = (Expression) _symbol_b.value;
					 return new BinOp("<", a, b);
				}
			},
			new Action() {	// [67] expr = expr.a LE expr.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_a = _symbols[offset + 1];
					final Expression a = (Expression) _symbol_a.value;
					final Symbol _symbol_b = _symbols[offset + 3];
					final Expression b = (Expression) _symbol_b.value;
					 return new BinOp("<=",a, b);
				}
			},
			new Action() {	// [68] expr = expr.a GE expr.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_a = _symbols[offset + 1];
					final Expression a = (Expression) _symbol_a.value;
					final Symbol _symbol_b = _symbols[offset + 3];
					final Expression b = (Expression) _symbol_b.value;
					 return new BinOp(">=",a, b);
				}
			},
			new Action() {	// [69] expr = expr.a GT expr.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_a = _symbols[offset + 1];
					final Expression a = (Expression) _symbol_a.value;
					final Symbol _symbol_b = _symbols[offset + 3];
					final Expression b = (Expression) _symbol_b.value;
					 return new BinOp(">", a, b);
				}
			},
			new Action() {	// [70] expr = expr.a EQ expr.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_a = _symbols[offset + 1];
					final Expression a = (Expression) _symbol_a.value;
					final Symbol _symbol_b = _symbols[offset + 3];
					final Expression b = (Expression) _symbol_b.value;
					 return new BinOp("==",a, b);
				}
			},
			new Action() {	// [71] expr = expr.a NEQ expr.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_a = _symbols[offset + 1];
					final Expression a = (Expression) _symbol_a.value;
					final Symbol _symbol_b = _symbols[offset + 3];
					final Expression b = (Expression) _symbol_b.value;
					 return new BinOp("!=",a, b);
				}
			},
			new Action() {	// [72] expr = expr.a AMP expr.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_a = _symbols[offset + 1];
					final Expression a = (Expression) _symbol_a.value;
					final Symbol _symbol_b = _symbols[offset + 3];
					final Expression b = (Expression) _symbol_b.value;
					 return new BinOp("&", a, b);
				}
			},
			new Action() {	// [73] expr = expr.a CARET expr.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_a = _symbols[offset + 1];
					final Expression a = (Expression) _symbol_a.value;
					final Symbol _symbol_b = _symbols[offset + 3];
					final Expression b = (Expression) _symbol_b.value;
					 return new BinOp("^", a, b);
				}
			},
			new Action() {	// [74] expr = expr.a PIPE expr.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_a = _symbols[offset + 1];
					final Expression a = (Expression) _symbol_a.value;
					final Symbol _symbol_b = _symbols[offset + 3];
					final Expression b = (Expression) _symbol_b.value;
					 return new BinOp("|", a, b);
				}
			},
			new Action() {	// [75] expr = expr.a AND expr.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_a = _symbols[offset + 1];
					final Expression a = (Expression) _symbol_a.value;
					final Symbol _symbol_b = _symbols[offset + 3];
					final Expression b = (Expression) _symbol_b.value;
					 return new BinOp("&&",a, b);
				}
			},
			new Action() {	// [76] expr = expr.a OR expr.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_a = _symbols[offset + 1];
					final Expression a = (Expression) _symbol_a.value;
					final Symbol _symbol_b = _symbols[offset + 3];
					final Expression b = (Expression) _symbol_b.value;
					 return new BinOp("||",a, b);
				}
			},
			new Action() {	// [77] expr = LPAREN expr.e RPAREN
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_e = _symbols[offset + 2];
					final Expression e = (Expression) _symbol_e.value;
					 return (Symbol) e;
				}
			},
			new Action() {	// [78] expr = TRUE
				public Symbol reduce(Symbol[] _symbols, int offset) {
					 return new Const("True");
				}
			},
			new Action() {	// [79] expr = FALSE
				public Symbol reduce(Symbol[] _symbols, int offset) {
					 return new Const("False");
				}
			},
			new Action() {	// [80] lpred = LPRED COLON expr.a
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_a = _symbols[offset + 3];
					final Expression a = (Expression) _symbol_a.value;
					 return (Symbol) a;
				}
			},
			new Action() {	// [81] lpredindex = LPRED LBRACK NUM.n RBRACK COLON expr.a
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_n = _symbols[offset + 3];
					final Integer n = (Integer) _symbol_n.value;
					final Symbol _symbol_a = _symbols[offset + 6];
					final Expression a = (Expression) _symbol_a.value;
					 return (Symbol) a;
				}
			},
			new Action() {	// [82] lpredindexes = lpredindex
				public Symbol reduce(Symbol[] _symbols, int offset) {
					ArrayList lst = new ArrayList(); lst.add(_symbols[offset + 1].value); return new Symbol(lst);
				}
			},
			new Action() {	// [83] lpredindexes = lpredindexes lpredindex
				public Symbol reduce(Symbol[] _symbols, int offset) {
					((ArrayList) _symbols[offset + 1].value).add(_symbols[offset + 2].value); return _symbols[offset + 1];
				}
			},
			new Action() {	// [84] mode = MODE COLON NORW
				public Symbol reduce(Symbol[] _symbols, int offset) {
					 return NoRW.instance();
				}
			},
			new Action() {	// [85] mode = MODE COLON NOW
				public Symbol reduce(Symbol[] _symbols, int offset) {
					 return NoW.instance();
				}
			},
			new Action() {	// [86] mode = MODE COLON RW
				public Symbol reduce(Symbol[] _symbols, int offset) {
					 return RW.instance();
				}
			},
			new Action() {	// [87] gamma_mappings = gamma_mapping
				public Symbol reduce(Symbol[] _symbols, int offset) {
					ArrayList lst = new ArrayList(); lst.add(_symbols[offset + 1].value); return new Symbol(lst);
				}
			},
			new Action() {	// [88] gamma_mappings = gamma_mappings COMMA gamma_mapping
				public Symbol reduce(Symbol[] _symbols, int offset) {
					((ArrayList) _symbols[offset + 1].value).add(_symbols[offset + 3].value); return _symbols[offset + 1];
				}
			},
			new Action() {	// [89] gamma_mapping = id_reg_id.n MAPSTO security.s
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_n = _symbols[offset + 1];
					final Id n = (Id) _symbol_n.value;
					final Symbol _symbol_s = _symbols[offset + 3];
					final Security s = (Security) _symbol_s.value;
					 return new GammaMapping(n, s);
				}
			},
			new Action() {	// [90] gamma_mapping = id_reg_id.n LBRACK NUM.i RBRACK MAPSTO security.s
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_n = _symbols[offset + 1];
					final Id n = (Id) _symbol_n.value;
					final Symbol _symbol_i = _symbols[offset + 3];
					final Integer i = (Integer) _symbol_i.value;
					final Symbol _symbol_s = _symbols[offset + 6];
					final Security s = (Security) _symbol_s.value;
					 return new GammaMapping(n, i, s);
				}
			},
			new Action() {	// [91] gamma_mapping = id_reg_id.n LBRACK STAR RBRACK MAPSTO security.s
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_n = _symbols[offset + 1];
					final Id n = (Id) _symbol_n.value;
					final Symbol _symbol_s = _symbols[offset + 6];
					final Security s = (Security) _symbol_s.value;
					 return new GammaMapping(n, s);
				}
			},
			new Action() {	// [92] security = LOW
				public Symbol reduce(Symbol[] _symbols, int offset) {
					 return Low.instance();
				}
			},
			new Action() {	// [93] security = HIGH
				public Symbol reduce(Symbol[] _symbols, int offset) {
					 return High.instance();
				}
			}
		};
	}

	protected Symbol invokeReduceAction(int rule_num, int offset) {
		return actions[rule_num].reduce(_symbols, offset);
	}
}
